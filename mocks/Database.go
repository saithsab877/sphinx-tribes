// Code generated by mockery v2.50.0. DO NOT EDIT.

package db

import (
	http "net/http"

	db "github.com/stakwork/sphinx-tribes/db"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// AddAndUpdateBudget provides a mock function with given fields: invoice
func (_m *Database) AddAndUpdateBudget(invoice db.NewInvoiceList) db.NewPaymentHistory {
	ret := _m.Called(invoice)

	if len(ret) == 0 {
		panic("no return value specified for AddAndUpdateBudget")
	}

	var r0 db.NewPaymentHistory
	if rf, ok := ret.Get(0).(func(db.NewInvoiceList) db.NewPaymentHistory); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Get(0).(db.NewPaymentHistory)
	}

	return r0
}

// Database_AddAndUpdateBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAndUpdateBudget'
type Database_AddAndUpdateBudget_Call struct {
	*mock.Call
}

// AddAndUpdateBudget is a helper method to define mock.On call
//   - invoice db.NewInvoiceList
func (_e *Database_Expecter) AddAndUpdateBudget(invoice interface{}) *Database_AddAndUpdateBudget_Call {
	return &Database_AddAndUpdateBudget_Call{Call: _e.mock.On("AddAndUpdateBudget", invoice)}
}

func (_c *Database_AddAndUpdateBudget_Call) Run(run func(invoice db.NewInvoiceList)) *Database_AddAndUpdateBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewInvoiceList))
	})
	return _c
}

func (_c *Database_AddAndUpdateBudget_Call) Return(_a0 db.NewPaymentHistory) *Database_AddAndUpdateBudget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AddAndUpdateBudget_Call) RunAndReturn(run func(db.NewInvoiceList) db.NewPaymentHistory) *Database_AddAndUpdateBudget_Call {
	_c.Call.Return(run)
	return _c
}

// AddBounty provides a mock function with given fields: b
func (_m *Database) AddBounty(b db.Bounty) (db.Bounty, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for AddBounty")
	}

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bounty) (db.Bounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bounty) db.Bounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(db.Bounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_AddBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBounty'
type Database_AddBounty_Call struct {
	*mock.Call
}

// AddBounty is a helper method to define mock.On call
//   - b db.Bounty
func (_e *Database_Expecter) AddBounty(b interface{}) *Database_AddBounty_Call {
	return &Database_AddBounty_Call{Call: _e.mock.On("AddBounty", b)}
}

func (_c *Database_AddBounty_Call) Run(run func(b db.Bounty)) *Database_AddBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Bounty))
	})
	return _c
}

func (_c *Database_AddBounty_Call) Return(_a0 db.Bounty, _a1 error) *Database_AddBounty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_AddBounty_Call) RunAndReturn(run func(db.Bounty) (db.Bounty, error)) *Database_AddBounty_Call {
	_c.Call.Return(run)
	return _c
}

// AddBudgetHistory provides a mock function with given fields: budget
func (_m *Database) AddBudgetHistory(budget db.BudgetHistory) db.BudgetHistory {
	ret := _m.Called(budget)

	if len(ret) == 0 {
		panic("no return value specified for AddBudgetHistory")
	}

	var r0 db.BudgetHistory
	if rf, ok := ret.Get(0).(func(db.BudgetHistory) db.BudgetHistory); ok {
		r0 = rf(budget)
	} else {
		r0 = ret.Get(0).(db.BudgetHistory)
	}

	return r0
}

// Database_AddBudgetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBudgetHistory'
type Database_AddBudgetHistory_Call struct {
	*mock.Call
}

// AddBudgetHistory is a helper method to define mock.On call
//   - budget db.BudgetHistory
func (_e *Database_Expecter) AddBudgetHistory(budget interface{}) *Database_AddBudgetHistory_Call {
	return &Database_AddBudgetHistory_Call{Call: _e.mock.On("AddBudgetHistory", budget)}
}

func (_c *Database_AddBudgetHistory_Call) Run(run func(budget db.BudgetHistory)) *Database_AddBudgetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.BudgetHistory))
	})
	return _c
}

func (_c *Database_AddBudgetHistory_Call) Return(_a0 db.BudgetHistory) *Database_AddBudgetHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AddBudgetHistory_Call) RunAndReturn(run func(db.BudgetHistory) db.BudgetHistory) *Database_AddBudgetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// AddChat provides a mock function with given fields: chat
func (_m *Database) AddChat(chat *db.Chat) (db.Chat, error) {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for AddChat")
	}

	var r0 db.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.Chat) (db.Chat, error)); ok {
		return rf(chat)
	}
	if rf, ok := ret.Get(0).(func(*db.Chat) db.Chat); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Get(0).(db.Chat)
	}

	if rf, ok := ret.Get(1).(func(*db.Chat) error); ok {
		r1 = rf(chat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_AddChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChat'
type Database_AddChat_Call struct {
	*mock.Call
}

// AddChat is a helper method to define mock.On call
//   - chat *db.Chat
func (_e *Database_Expecter) AddChat(chat interface{}) *Database_AddChat_Call {
	return &Database_AddChat_Call{Call: _e.mock.On("AddChat", chat)}
}

func (_c *Database_AddChat_Call) Run(run func(chat *db.Chat)) *Database_AddChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.Chat))
	})
	return _c
}

func (_c *Database_AddChat_Call) Return(_a0 db.Chat, _a1 error) *Database_AddChat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_AddChat_Call) RunAndReturn(run func(*db.Chat) (db.Chat, error)) *Database_AddChat_Call {
	_c.Call.Return(run)
	return _c
}

// AddChatMessage provides a mock function with given fields: message
func (_m *Database) AddChatMessage(message *db.ChatMessage) (db.ChatMessage, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for AddChatMessage")
	}

	var r0 db.ChatMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.ChatMessage) (db.ChatMessage, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(*db.ChatMessage) db.ChatMessage); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(db.ChatMessage)
	}

	if rf, ok := ret.Get(1).(func(*db.ChatMessage) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_AddChatMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChatMessage'
type Database_AddChatMessage_Call struct {
	*mock.Call
}

// AddChatMessage is a helper method to define mock.On call
//   - message *db.ChatMessage
func (_e *Database_Expecter) AddChatMessage(message interface{}) *Database_AddChatMessage_Call {
	return &Database_AddChatMessage_Call{Call: _e.mock.On("AddChatMessage", message)}
}

func (_c *Database_AddChatMessage_Call) Run(run func(message *db.ChatMessage)) *Database_AddChatMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.ChatMessage))
	})
	return _c
}

func (_c *Database_AddChatMessage_Call) Return(_a0 db.ChatMessage, _a1 error) *Database_AddChatMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_AddChatMessage_Call) RunAndReturn(run func(*db.ChatMessage) (db.ChatMessage, error)) *Database_AddChatMessage_Call {
	_c.Call.Return(run)
	return _c
}

// AddEndpoint provides a mock function with given fields: endpoint
func (_m *Database) AddEndpoint(endpoint *db.Endpoint) (db.Endpoint, error) {
	ret := _m.Called(endpoint)

	if len(ret) == 0 {
		panic("no return value specified for AddEndpoint")
	}

	var r0 db.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.Endpoint) (db.Endpoint, error)); ok {
		return rf(endpoint)
	}
	if rf, ok := ret.Get(0).(func(*db.Endpoint) db.Endpoint); ok {
		r0 = rf(endpoint)
	} else {
		r0 = ret.Get(0).(db.Endpoint)
	}

	if rf, ok := ret.Get(1).(func(*db.Endpoint) error); ok {
		r1 = rf(endpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_AddEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEndpoint'
type Database_AddEndpoint_Call struct {
	*mock.Call
}

// AddEndpoint is a helper method to define mock.On call
//   - endpoint *db.Endpoint
func (_e *Database_Expecter) AddEndpoint(endpoint interface{}) *Database_AddEndpoint_Call {
	return &Database_AddEndpoint_Call{Call: _e.mock.On("AddEndpoint", endpoint)}
}

func (_c *Database_AddEndpoint_Call) Run(run func(endpoint *db.Endpoint)) *Database_AddEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.Endpoint))
	})
	return _c
}

func (_c *Database_AddEndpoint_Call) Return(_a0 db.Endpoint, _a1 error) *Database_AddEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_AddEndpoint_Call) RunAndReturn(run func(*db.Endpoint) (db.Endpoint, error)) *Database_AddEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// AddFeatureFlag provides a mock function with given fields: flag
func (_m *Database) AddFeatureFlag(flag *db.FeatureFlag) (db.FeatureFlag, error) {
	ret := _m.Called(flag)

	if len(ret) == 0 {
		panic("no return value specified for AddFeatureFlag")
	}

	var r0 db.FeatureFlag
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.FeatureFlag) (db.FeatureFlag, error)); ok {
		return rf(flag)
	}
	if rf, ok := ret.Get(0).(func(*db.FeatureFlag) db.FeatureFlag); ok {
		r0 = rf(flag)
	} else {
		r0 = ret.Get(0).(db.FeatureFlag)
	}

	if rf, ok := ret.Get(1).(func(*db.FeatureFlag) error); ok {
		r1 = rf(flag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_AddFeatureFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeatureFlag'
type Database_AddFeatureFlag_Call struct {
	*mock.Call
}

// AddFeatureFlag is a helper method to define mock.On call
//   - flag *db.FeatureFlag
func (_e *Database_Expecter) AddFeatureFlag(flag interface{}) *Database_AddFeatureFlag_Call {
	return &Database_AddFeatureFlag_Call{Call: _e.mock.On("AddFeatureFlag", flag)}
}

func (_c *Database_AddFeatureFlag_Call) Run(run func(flag *db.FeatureFlag)) *Database_AddFeatureFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.FeatureFlag))
	})
	return _c
}

func (_c *Database_AddFeatureFlag_Call) Return(_a0 db.FeatureFlag, _a1 error) *Database_AddFeatureFlag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_AddFeatureFlag_Call) RunAndReturn(run func(*db.FeatureFlag) (db.FeatureFlag, error)) *Database_AddFeatureFlag_Call {
	_c.Call.Return(run)
	return _c
}

// AddInvoice provides a mock function with given fields: invoice
func (_m *Database) AddInvoice(invoice db.NewInvoiceList) db.NewInvoiceList {
	ret := _m.Called(invoice)

	if len(ret) == 0 {
		panic("no return value specified for AddInvoice")
	}

	var r0 db.NewInvoiceList
	if rf, ok := ret.Get(0).(func(db.NewInvoiceList) db.NewInvoiceList); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Get(0).(db.NewInvoiceList)
	}

	return r0
}

// Database_AddInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInvoice'
type Database_AddInvoice_Call struct {
	*mock.Call
}

// AddInvoice is a helper method to define mock.On call
//   - invoice db.NewInvoiceList
func (_e *Database_Expecter) AddInvoice(invoice interface{}) *Database_AddInvoice_Call {
	return &Database_AddInvoice_Call{Call: _e.mock.On("AddInvoice", invoice)}
}

func (_c *Database_AddInvoice_Call) Run(run func(invoice db.NewInvoiceList)) *Database_AddInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewInvoiceList))
	})
	return _c
}

func (_c *Database_AddInvoice_Call) Return(_a0 db.NewInvoiceList) *Database_AddInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AddInvoice_Call) RunAndReturn(run func(db.NewInvoiceList) db.NewInvoiceList) *Database_AddInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// AddPaymentHistory provides a mock function with given fields: payment
func (_m *Database) AddPaymentHistory(payment db.NewPaymentHistory) db.NewPaymentHistory {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for AddPaymentHistory")
	}

	var r0 db.NewPaymentHistory
	if rf, ok := ret.Get(0).(func(db.NewPaymentHistory) db.NewPaymentHistory); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Get(0).(db.NewPaymentHistory)
	}

	return r0
}

// Database_AddPaymentHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPaymentHistory'
type Database_AddPaymentHistory_Call struct {
	*mock.Call
}

// AddPaymentHistory is a helper method to define mock.On call
//   - payment db.NewPaymentHistory
func (_e *Database_Expecter) AddPaymentHistory(payment interface{}) *Database_AddPaymentHistory_Call {
	return &Database_AddPaymentHistory_Call{Call: _e.mock.On("AddPaymentHistory", payment)}
}

func (_c *Database_AddPaymentHistory_Call) Run(run func(payment db.NewPaymentHistory)) *Database_AddPaymentHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewPaymentHistory))
	})
	return _c
}

func (_c *Database_AddPaymentHistory_Call) Return(_a0 db.NewPaymentHistory) *Database_AddPaymentHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AddPaymentHistory_Call) RunAndReturn(run func(db.NewPaymentHistory) db.NewPaymentHistory) *Database_AddPaymentHistory_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserInvoiceData provides a mock function with given fields: userData
func (_m *Database) AddUserInvoiceData(userData db.UserInvoiceData) db.UserInvoiceData {
	ret := _m.Called(userData)

	if len(ret) == 0 {
		panic("no return value specified for AddUserInvoiceData")
	}

	var r0 db.UserInvoiceData
	if rf, ok := ret.Get(0).(func(db.UserInvoiceData) db.UserInvoiceData); ok {
		r0 = rf(userData)
	} else {
		r0 = ret.Get(0).(db.UserInvoiceData)
	}

	return r0
}

// Database_AddUserInvoiceData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserInvoiceData'
type Database_AddUserInvoiceData_Call struct {
	*mock.Call
}

// AddUserInvoiceData is a helper method to define mock.On call
//   - userData db.UserInvoiceData
func (_e *Database_Expecter) AddUserInvoiceData(userData interface{}) *Database_AddUserInvoiceData_Call {
	return &Database_AddUserInvoiceData_Call{Call: _e.mock.On("AddUserInvoiceData", userData)}
}

func (_c *Database_AddUserInvoiceData_Call) Run(run func(userData db.UserInvoiceData)) *Database_AddUserInvoiceData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.UserInvoiceData))
	})
	return _c
}

func (_c *Database_AddUserInvoiceData_Call) Return(_a0 db.UserInvoiceData) *Database_AddUserInvoiceData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AddUserInvoiceData_Call) RunAndReturn(run func(db.UserInvoiceData) db.UserInvoiceData) *Database_AddUserInvoiceData_Call {
	_c.Call.Return(run)
	return _c
}

// AverageCompletedTime provides a mock function with given fields: r, workspace
func (_m *Database) AverageCompletedTime(r db.PaymentDateRange, workspace string) uint {
	ret := _m.Called(r, workspace)

	if len(ret) == 0 {
		panic("no return value specified for AverageCompletedTime")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, string) uint); ok {
		r0 = rf(r, workspace)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_AverageCompletedTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AverageCompletedTime'
type Database_AverageCompletedTime_Call struct {
	*mock.Call
}

// AverageCompletedTime is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - workspace string
func (_e *Database_Expecter) AverageCompletedTime(r interface{}, workspace interface{}) *Database_AverageCompletedTime_Call {
	return &Database_AverageCompletedTime_Call{Call: _e.mock.On("AverageCompletedTime", r, workspace)}
}

func (_c *Database_AverageCompletedTime_Call) Run(run func(r db.PaymentDateRange, workspace string)) *Database_AverageCompletedTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(string))
	})
	return _c
}

func (_c *Database_AverageCompletedTime_Call) Return(_a0 uint) *Database_AverageCompletedTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AverageCompletedTime_Call) RunAndReturn(run func(db.PaymentDateRange, string) uint) *Database_AverageCompletedTime_Call {
	_c.Call.Return(run)
	return _c
}

// AveragePaidTime provides a mock function with given fields: r, workspace
func (_m *Database) AveragePaidTime(r db.PaymentDateRange, workspace string) uint {
	ret := _m.Called(r, workspace)

	if len(ret) == 0 {
		panic("no return value specified for AveragePaidTime")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, string) uint); ok {
		r0 = rf(r, workspace)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_AveragePaidTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AveragePaidTime'
type Database_AveragePaidTime_Call struct {
	*mock.Call
}

// AveragePaidTime is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - workspace string
func (_e *Database_Expecter) AveragePaidTime(r interface{}, workspace interface{}) *Database_AveragePaidTime_Call {
	return &Database_AveragePaidTime_Call{Call: _e.mock.On("AveragePaidTime", r, workspace)}
}

func (_c *Database_AveragePaidTime_Call) Run(run func(r db.PaymentDateRange, workspace string)) *Database_AveragePaidTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(string))
	})
	return _c
}

func (_c *Database_AveragePaidTime_Call) Return(_a0 uint) *Database_AveragePaidTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_AveragePaidTime_Call) RunAndReturn(run func(db.PaymentDateRange, string) uint) *Database_AveragePaidTime_Call {
	_c.Call.Return(run)
	return _c
}

// BountiesPaidPercentage provides a mock function with given fields: r, workspace
func (_m *Database) BountiesPaidPercentage(r db.PaymentDateRange, workspace string) uint {
	ret := _m.Called(r, workspace)

	if len(ret) == 0 {
		panic("no return value specified for BountiesPaidPercentage")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, string) uint); ok {
		r0 = rf(r, workspace)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_BountiesPaidPercentage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BountiesPaidPercentage'
type Database_BountiesPaidPercentage_Call struct {
	*mock.Call
}

// BountiesPaidPercentage is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - workspace string
func (_e *Database_Expecter) BountiesPaidPercentage(r interface{}, workspace interface{}) *Database_BountiesPaidPercentage_Call {
	return &Database_BountiesPaidPercentage_Call{Call: _e.mock.On("BountiesPaidPercentage", r, workspace)}
}

func (_c *Database_BountiesPaidPercentage_Call) Run(run func(r db.PaymentDateRange, workspace string)) *Database_BountiesPaidPercentage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(string))
	})
	return _c
}

func (_c *Database_BountiesPaidPercentage_Call) Return(_a0 uint) *Database_BountiesPaidPercentage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_BountiesPaidPercentage_Call) RunAndReturn(run func(db.PaymentDateRange, string) uint) *Database_BountiesPaidPercentage_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeWorkspaceDeleteStatus provides a mock function with given fields: workspace_uuid, status
func (_m *Database) ChangeWorkspaceDeleteStatus(workspace_uuid string, status bool) db.Workspace {
	ret := _m.Called(workspace_uuid, status)

	if len(ret) == 0 {
		panic("no return value specified for ChangeWorkspaceDeleteStatus")
	}

	var r0 db.Workspace
	if rf, ok := ret.Get(0).(func(string, bool) db.Workspace); ok {
		r0 = rf(workspace_uuid, status)
	} else {
		r0 = ret.Get(0).(db.Workspace)
	}

	return r0
}

// Database_ChangeWorkspaceDeleteStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeWorkspaceDeleteStatus'
type Database_ChangeWorkspaceDeleteStatus_Call struct {
	*mock.Call
}

// ChangeWorkspaceDeleteStatus is a helper method to define mock.On call
//   - workspace_uuid string
//   - status bool
func (_e *Database_Expecter) ChangeWorkspaceDeleteStatus(workspace_uuid interface{}, status interface{}) *Database_ChangeWorkspaceDeleteStatus_Call {
	return &Database_ChangeWorkspaceDeleteStatus_Call{Call: _e.mock.On("ChangeWorkspaceDeleteStatus", workspace_uuid, status)}
}

func (_c *Database_ChangeWorkspaceDeleteStatus_Call) Run(run func(workspace_uuid string, status bool)) *Database_ChangeWorkspaceDeleteStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Database_ChangeWorkspaceDeleteStatus_Call) Return(_a0 db.Workspace) *Database_ChangeWorkspaceDeleteStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_ChangeWorkspaceDeleteStatus_Call) RunAndReturn(run func(string, bool) db.Workspace) *Database_ChangeWorkspaceDeleteStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CloseBountyTiming provides a mock function with given fields: bountyID
func (_m *Database) CloseBountyTiming(bountyID uint) error {
	ret := _m.Called(bountyID)

	if len(ret) == 0 {
		panic("no return value specified for CloseBountyTiming")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(bountyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_CloseBountyTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseBountyTiming'
type Database_CloseBountyTiming_Call struct {
	*mock.Call
}

// CloseBountyTiming is a helper method to define mock.On call
//   - bountyID uint
func (_e *Database_Expecter) CloseBountyTiming(bountyID interface{}) *Database_CloseBountyTiming_Call {
	return &Database_CloseBountyTiming_Call{Call: _e.mock.On("CloseBountyTiming", bountyID)}
}

func (_c *Database_CloseBountyTiming_Call) Run(run func(bountyID uint)) *Database_CloseBountyTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_CloseBountyTiming_Call) Return(_a0 error) *Database_CloseBountyTiming_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CloseBountyTiming_Call) RunAndReturn(run func(uint) error) *Database_CloseBountyTiming_Call {
	_c.Call.Return(run)
	return _c
}

// CountBounties provides a mock function with no fields
func (_m *Database) CountBounties() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountBounties")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Database_CountBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountBounties'
type Database_CountBounties_Call struct {
	*mock.Call
}

// CountBounties is a helper method to define mock.On call
func (_e *Database_Expecter) CountBounties() *Database_CountBounties_Call {
	return &Database_CountBounties_Call{Call: _e.mock.On("CountBounties")}
}

func (_c *Database_CountBounties_Call) Run(run func()) *Database_CountBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_CountBounties_Call) Return(_a0 uint64) *Database_CountBounties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CountBounties_Call) RunAndReturn(run func() uint64) *Database_CountBounties_Call {
	_c.Call.Return(run)
	return _c
}

// CountDevelopers provides a mock function with no fields
func (_m *Database) CountDevelopers() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountDevelopers")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_CountDevelopers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDevelopers'
type Database_CountDevelopers_Call struct {
	*mock.Call
}

// CountDevelopers is a helper method to define mock.On call
func (_e *Database_Expecter) CountDevelopers() *Database_CountDevelopers_Call {
	return &Database_CountDevelopers_Call{Call: _e.mock.On("CountDevelopers")}
}

func (_c *Database_CountDevelopers_Call) Run(run func()) *Database_CountDevelopers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_CountDevelopers_Call) Return(_a0 int64) *Database_CountDevelopers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CountDevelopers_Call) RunAndReturn(run func() int64) *Database_CountDevelopers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBountyFromTicket provides a mock function with given fields: ticket, pubkey
func (_m *Database) CreateBountyFromTicket(ticket db.Tickets, pubkey string) (*db.NewBounty, error) {
	ret := _m.Called(ticket, pubkey)

	if len(ret) == 0 {
		panic("no return value specified for CreateBountyFromTicket")
	}

	var r0 *db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Tickets, string) (*db.NewBounty, error)); ok {
		return rf(ticket, pubkey)
	}
	if rf, ok := ret.Get(0).(func(db.Tickets, string) *db.NewBounty); ok {
		r0 = rf(ticket, pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.NewBounty)
		}
	}

	if rf, ok := ret.Get(1).(func(db.Tickets, string) error); ok {
		r1 = rf(ticket, pubkey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateBountyFromTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBountyFromTicket'
type Database_CreateBountyFromTicket_Call struct {
	*mock.Call
}

// CreateBountyFromTicket is a helper method to define mock.On call
//   - ticket db.Tickets
//   - pubkey string
func (_e *Database_Expecter) CreateBountyFromTicket(ticket interface{}, pubkey interface{}) *Database_CreateBountyFromTicket_Call {
	return &Database_CreateBountyFromTicket_Call{Call: _e.mock.On("CreateBountyFromTicket", ticket, pubkey)}
}

func (_c *Database_CreateBountyFromTicket_Call) Run(run func(ticket db.Tickets, pubkey string)) *Database_CreateBountyFromTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Tickets), args[1].(string))
	})
	return _c
}

func (_c *Database_CreateBountyFromTicket_Call) Return(_a0 *db.NewBounty, _a1 error) *Database_CreateBountyFromTicket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateBountyFromTicket_Call) RunAndReturn(run func(db.Tickets, string) (*db.NewBounty, error)) *Database_CreateBountyFromTicket_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBountyTiming provides a mock function with given fields: bountyID
func (_m *Database) CreateBountyTiming(bountyID uint) (*db.BountyTiming, error) {
	ret := _m.Called(bountyID)

	if len(ret) == 0 {
		panic("no return value specified for CreateBountyTiming")
	}

	var r0 *db.BountyTiming
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*db.BountyTiming, error)); ok {
		return rf(bountyID)
	}
	if rf, ok := ret.Get(0).(func(uint) *db.BountyTiming); ok {
		r0 = rf(bountyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.BountyTiming)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(bountyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateBountyTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBountyTiming'
type Database_CreateBountyTiming_Call struct {
	*mock.Call
}

// CreateBountyTiming is a helper method to define mock.On call
//   - bountyID uint
func (_e *Database_Expecter) CreateBountyTiming(bountyID interface{}) *Database_CreateBountyTiming_Call {
	return &Database_CreateBountyTiming_Call{Call: _e.mock.On("CreateBountyTiming", bountyID)}
}

func (_c *Database_CreateBountyTiming_Call) Run(run func(bountyID uint)) *Database_CreateBountyTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_CreateBountyTiming_Call) Return(_a0 *db.BountyTiming, _a1 error) *Database_CreateBountyTiming_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateBountyTiming_Call) RunAndReturn(run func(uint) (*db.BountyTiming, error)) *Database_CreateBountyTiming_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChannel provides a mock function with given fields: c
func (_m *Database) CreateChannel(c db.Channel) (db.Channel, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 db.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Channel) (db.Channel, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(db.Channel) db.Channel); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(db.Channel)
	}

	if rf, ok := ret.Get(1).(func(db.Channel) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChannel'
type Database_CreateChannel_Call struct {
	*mock.Call
}

// CreateChannel is a helper method to define mock.On call
//   - c db.Channel
func (_e *Database_Expecter) CreateChannel(c interface{}) *Database_CreateChannel_Call {
	return &Database_CreateChannel_Call{Call: _e.mock.On("CreateChannel", c)}
}

func (_c *Database_CreateChannel_Call) Run(run func(c db.Channel)) *Database_CreateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Channel))
	})
	return _c
}

func (_c *Database_CreateChannel_Call) Return(_a0 db.Channel, _a1 error) *Database_CreateChannel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateChannel_Call) RunAndReturn(run func(db.Channel) (db.Channel, error)) *Database_CreateChannel_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConnectionCode provides a mock function with given fields: c
func (_m *Database) CreateConnectionCode(c []db.ConnectionCodes) ([]db.ConnectionCodes, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnectionCode")
	}

	var r0 []db.ConnectionCodes
	var r1 error
	if rf, ok := ret.Get(0).(func([]db.ConnectionCodes) ([]db.ConnectionCodes, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func([]db.ConnectionCodes) []db.ConnectionCodes); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.ConnectionCodes)
		}
	}

	if rf, ok := ret.Get(1).(func([]db.ConnectionCodes) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateConnectionCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConnectionCode'
type Database_CreateConnectionCode_Call struct {
	*mock.Call
}

// CreateConnectionCode is a helper method to define mock.On call
//   - c []db.ConnectionCodes
func (_e *Database_Expecter) CreateConnectionCode(c interface{}) *Database_CreateConnectionCode_Call {
	return &Database_CreateConnectionCode_Call{Call: _e.mock.On("CreateConnectionCode", c)}
}

func (_c *Database_CreateConnectionCode_Call) Run(run func(c []db.ConnectionCodes)) *Database_CreateConnectionCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]db.ConnectionCodes))
	})
	return _c
}

func (_c *Database_CreateConnectionCode_Call) Return(_a0 []db.ConnectionCodes, _a1 error) *Database_CreateConnectionCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateConnectionCode_Call) RunAndReturn(run func([]db.ConnectionCodes) ([]db.ConnectionCodes, error)) *Database_CreateConnectionCode_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFeaturedBounty provides a mock function with given fields: bounty
func (_m *Database) CreateFeaturedBounty(bounty db.FeaturedBounty) error {
	ret := _m.Called(bounty)

	if len(ret) == 0 {
		panic("no return value specified for CreateFeaturedBounty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(db.FeaturedBounty) error); ok {
		r0 = rf(bounty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_CreateFeaturedBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFeaturedBounty'
type Database_CreateFeaturedBounty_Call struct {
	*mock.Call
}

// CreateFeaturedBounty is a helper method to define mock.On call
//   - bounty db.FeaturedBounty
func (_e *Database_Expecter) CreateFeaturedBounty(bounty interface{}) *Database_CreateFeaturedBounty_Call {
	return &Database_CreateFeaturedBounty_Call{Call: _e.mock.On("CreateFeaturedBounty", bounty)}
}

func (_c *Database_CreateFeaturedBounty_Call) Run(run func(bounty db.FeaturedBounty)) *Database_CreateFeaturedBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.FeaturedBounty))
	})
	return _c
}

func (_c *Database_CreateFeaturedBounty_Call) Return(_a0 error) *Database_CreateFeaturedBounty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateFeaturedBounty_Call) RunAndReturn(run func(db.FeaturedBounty) error) *Database_CreateFeaturedBounty_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLeaderBoard provides a mock function with given fields: _a0, leaderboards
func (_m *Database) CreateLeaderBoard(_a0 string, leaderboards []db.LeaderBoard) ([]db.LeaderBoard, error) {
	ret := _m.Called(_a0, leaderboards)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeaderBoard")
	}

	var r0 []db.LeaderBoard
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []db.LeaderBoard) ([]db.LeaderBoard, error)); ok {
		return rf(_a0, leaderboards)
	}
	if rf, ok := ret.Get(0).(func(string, []db.LeaderBoard) []db.LeaderBoard); ok {
		r0 = rf(_a0, leaderboards)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.LeaderBoard)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []db.LeaderBoard) error); ok {
		r1 = rf(_a0, leaderboards)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateLeaderBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLeaderBoard'
type Database_CreateLeaderBoard_Call struct {
	*mock.Call
}

// CreateLeaderBoard is a helper method to define mock.On call
//   - _a0 string
//   - leaderboards []db.LeaderBoard
func (_e *Database_Expecter) CreateLeaderBoard(_a0 interface{}, leaderboards interface{}) *Database_CreateLeaderBoard_Call {
	return &Database_CreateLeaderBoard_Call{Call: _e.mock.On("CreateLeaderBoard", _a0, leaderboards)}
}

func (_c *Database_CreateLeaderBoard_Call) Run(run func(_a0 string, leaderboards []db.LeaderBoard)) *Database_CreateLeaderBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]db.LeaderBoard))
	})
	return _c
}

func (_c *Database_CreateLeaderBoard_Call) Return(_a0 []db.LeaderBoard, _a1 error) *Database_CreateLeaderBoard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateLeaderBoard_Call) RunAndReturn(run func(string, []db.LeaderBoard) ([]db.LeaderBoard, error)) *Database_CreateLeaderBoard_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLnUser provides a mock function with given fields: lnKey
func (_m *Database) CreateLnUser(lnKey string) (db.Person, error) {
	ret := _m.Called(lnKey)

	if len(ret) == 0 {
		panic("no return value specified for CreateLnUser")
	}

	var r0 db.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (db.Person, error)); ok {
		return rf(lnKey)
	}
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(lnKey)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lnKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateLnUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLnUser'
type Database_CreateLnUser_Call struct {
	*mock.Call
}

// CreateLnUser is a helper method to define mock.On call
//   - lnKey string
func (_e *Database_Expecter) CreateLnUser(lnKey interface{}) *Database_CreateLnUser_Call {
	return &Database_CreateLnUser_Call{Call: _e.mock.On("CreateLnUser", lnKey)}
}

func (_c *Database_CreateLnUser_Call) Run(run func(lnKey string)) *Database_CreateLnUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_CreateLnUser_Call) Return(_a0 db.Person, _a1 error) *Database_CreateLnUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateLnUser_Call) RunAndReturn(run func(string) (db.Person, error)) *Database_CreateLnUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNotification provides a mock function with given fields: notification
func (_m *Database) CreateNotification(notification *db.Notification) error {
	ret := _m.Called(notification)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Notification) error); ok {
		r0 = rf(notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_CreateNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotification'
type Database_CreateNotification_Call struct {
	*mock.Call
}

// CreateNotification is a helper method to define mock.On call
//   - notification *db.Notification
func (_e *Database_Expecter) CreateNotification(notification interface{}) *Database_CreateNotification_Call {
	return &Database_CreateNotification_Call{Call: _e.mock.On("CreateNotification", notification)}
}

func (_c *Database_CreateNotification_Call) Run(run func(notification *db.Notification)) *Database_CreateNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.Notification))
	})
	return _c
}

func (_c *Database_CreateNotification_Call) Return(_a0 error) *Database_CreateNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateNotification_Call) RunAndReturn(run func(*db.Notification) error) *Database_CreateNotification_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditBot provides a mock function with given fields: b
func (_m *Database) CreateOrEditBot(b db.Bot) (db.Bot, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditBot")
	}

	var r0 db.Bot
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bot) (db.Bot, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bot) db.Bot); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bot)
	}

	if rf, ok := ret.Get(1).(func(db.Bot) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditBot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditBot'
type Database_CreateOrEditBot_Call struct {
	*mock.Call
}

// CreateOrEditBot is a helper method to define mock.On call
//   - b db.Bot
func (_e *Database_Expecter) CreateOrEditBot(b interface{}) *Database_CreateOrEditBot_Call {
	return &Database_CreateOrEditBot_Call{Call: _e.mock.On("CreateOrEditBot", b)}
}

func (_c *Database_CreateOrEditBot_Call) Run(run func(b db.Bot)) *Database_CreateOrEditBot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Bot))
	})
	return _c
}

func (_c *Database_CreateOrEditBot_Call) Return(_a0 db.Bot, _a1 error) *Database_CreateOrEditBot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditBot_Call) RunAndReturn(run func(db.Bot) (db.Bot, error)) *Database_CreateOrEditBot_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditBounty provides a mock function with given fields: b
func (_m *Database) CreateOrEditBounty(b db.NewBounty) (db.NewBounty, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditBounty")
	}

	var r0 db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.NewBounty) (db.NewBounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.NewBounty) db.NewBounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.NewBounty)
	}

	if rf, ok := ret.Get(1).(func(db.NewBounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditBounty'
type Database_CreateOrEditBounty_Call struct {
	*mock.Call
}

// CreateOrEditBounty is a helper method to define mock.On call
//   - b db.NewBounty
func (_e *Database_Expecter) CreateOrEditBounty(b interface{}) *Database_CreateOrEditBounty_Call {
	return &Database_CreateOrEditBounty_Call{Call: _e.mock.On("CreateOrEditBounty", b)}
}

func (_c *Database_CreateOrEditBounty_Call) Run(run func(b db.NewBounty)) *Database_CreateOrEditBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewBounty))
	})
	return _c
}

func (_c *Database_CreateOrEditBounty_Call) Return(_a0 db.NewBounty, _a1 error) *Database_CreateOrEditBounty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditBounty_Call) RunAndReturn(run func(db.NewBounty) (db.NewBounty, error)) *Database_CreateOrEditBounty_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditCodeGraph provides a mock function with given fields: m
func (_m *Database) CreateOrEditCodeGraph(m db.WorkspaceCodeGraph) (db.WorkspaceCodeGraph, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditCodeGraph")
	}

	var r0 db.WorkspaceCodeGraph
	var r1 error
	if rf, ok := ret.Get(0).(func(db.WorkspaceCodeGraph) (db.WorkspaceCodeGraph, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.WorkspaceCodeGraph) db.WorkspaceCodeGraph); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.WorkspaceCodeGraph)
	}

	if rf, ok := ret.Get(1).(func(db.WorkspaceCodeGraph) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditCodeGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditCodeGraph'
type Database_CreateOrEditCodeGraph_Call struct {
	*mock.Call
}

// CreateOrEditCodeGraph is a helper method to define mock.On call
//   - m db.WorkspaceCodeGraph
func (_e *Database_Expecter) CreateOrEditCodeGraph(m interface{}) *Database_CreateOrEditCodeGraph_Call {
	return &Database_CreateOrEditCodeGraph_Call{Call: _e.mock.On("CreateOrEditCodeGraph", m)}
}

func (_c *Database_CreateOrEditCodeGraph_Call) Run(run func(m db.WorkspaceCodeGraph)) *Database_CreateOrEditCodeGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.WorkspaceCodeGraph))
	})
	return _c
}

func (_c *Database_CreateOrEditCodeGraph_Call) Return(_a0 db.WorkspaceCodeGraph, _a1 error) *Database_CreateOrEditCodeGraph_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditCodeGraph_Call) RunAndReturn(run func(db.WorkspaceCodeGraph) (db.WorkspaceCodeGraph, error)) *Database_CreateOrEditCodeGraph_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditFeature provides a mock function with given fields: m
func (_m *Database) CreateOrEditFeature(m db.WorkspaceFeatures) (db.WorkspaceFeatures, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditFeature")
	}

	var r0 db.WorkspaceFeatures
	var r1 error
	if rf, ok := ret.Get(0).(func(db.WorkspaceFeatures) (db.WorkspaceFeatures, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.WorkspaceFeatures) db.WorkspaceFeatures); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.WorkspaceFeatures)
	}

	if rf, ok := ret.Get(1).(func(db.WorkspaceFeatures) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditFeature'
type Database_CreateOrEditFeature_Call struct {
	*mock.Call
}

// CreateOrEditFeature is a helper method to define mock.On call
//   - m db.WorkspaceFeatures
func (_e *Database_Expecter) CreateOrEditFeature(m interface{}) *Database_CreateOrEditFeature_Call {
	return &Database_CreateOrEditFeature_Call{Call: _e.mock.On("CreateOrEditFeature", m)}
}

func (_c *Database_CreateOrEditFeature_Call) Run(run func(m db.WorkspaceFeatures)) *Database_CreateOrEditFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.WorkspaceFeatures))
	})
	return _c
}

func (_c *Database_CreateOrEditFeature_Call) Return(_a0 db.WorkspaceFeatures, _a1 error) *Database_CreateOrEditFeature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditFeature_Call) RunAndReturn(run func(db.WorkspaceFeatures) (db.WorkspaceFeatures, error)) *Database_CreateOrEditFeature_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditFeaturePhase provides a mock function with given fields: phase
func (_m *Database) CreateOrEditFeaturePhase(phase db.FeaturePhase) (db.FeaturePhase, error) {
	ret := _m.Called(phase)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditFeaturePhase")
	}

	var r0 db.FeaturePhase
	var r1 error
	if rf, ok := ret.Get(0).(func(db.FeaturePhase) (db.FeaturePhase, error)); ok {
		return rf(phase)
	}
	if rf, ok := ret.Get(0).(func(db.FeaturePhase) db.FeaturePhase); ok {
		r0 = rf(phase)
	} else {
		r0 = ret.Get(0).(db.FeaturePhase)
	}

	if rf, ok := ret.Get(1).(func(db.FeaturePhase) error); ok {
		r1 = rf(phase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditFeaturePhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditFeaturePhase'
type Database_CreateOrEditFeaturePhase_Call struct {
	*mock.Call
}

// CreateOrEditFeaturePhase is a helper method to define mock.On call
//   - phase db.FeaturePhase
func (_e *Database_Expecter) CreateOrEditFeaturePhase(phase interface{}) *Database_CreateOrEditFeaturePhase_Call {
	return &Database_CreateOrEditFeaturePhase_Call{Call: _e.mock.On("CreateOrEditFeaturePhase", phase)}
}

func (_c *Database_CreateOrEditFeaturePhase_Call) Run(run func(phase db.FeaturePhase)) *Database_CreateOrEditFeaturePhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.FeaturePhase))
	})
	return _c
}

func (_c *Database_CreateOrEditFeaturePhase_Call) Return(_a0 db.FeaturePhase, _a1 error) *Database_CreateOrEditFeaturePhase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditFeaturePhase_Call) RunAndReturn(run func(db.FeaturePhase) (db.FeaturePhase, error)) *Database_CreateOrEditFeaturePhase_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditFeatureStory provides a mock function with given fields: story
func (_m *Database) CreateOrEditFeatureStory(story db.FeatureStory) (db.FeatureStory, error) {
	ret := _m.Called(story)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditFeatureStory")
	}

	var r0 db.FeatureStory
	var r1 error
	if rf, ok := ret.Get(0).(func(db.FeatureStory) (db.FeatureStory, error)); ok {
		return rf(story)
	}
	if rf, ok := ret.Get(0).(func(db.FeatureStory) db.FeatureStory); ok {
		r0 = rf(story)
	} else {
		r0 = ret.Get(0).(db.FeatureStory)
	}

	if rf, ok := ret.Get(1).(func(db.FeatureStory) error); ok {
		r1 = rf(story)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditFeatureStory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditFeatureStory'
type Database_CreateOrEditFeatureStory_Call struct {
	*mock.Call
}

// CreateOrEditFeatureStory is a helper method to define mock.On call
//   - story db.FeatureStory
func (_e *Database_Expecter) CreateOrEditFeatureStory(story interface{}) *Database_CreateOrEditFeatureStory_Call {
	return &Database_CreateOrEditFeatureStory_Call{Call: _e.mock.On("CreateOrEditFeatureStory", story)}
}

func (_c *Database_CreateOrEditFeatureStory_Call) Run(run func(story db.FeatureStory)) *Database_CreateOrEditFeatureStory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.FeatureStory))
	})
	return _c
}

func (_c *Database_CreateOrEditFeatureStory_Call) Return(_a0 db.FeatureStory, _a1 error) *Database_CreateOrEditFeatureStory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditFeatureStory_Call) RunAndReturn(run func(db.FeatureStory) (db.FeatureStory, error)) *Database_CreateOrEditFeatureStory_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditPerson provides a mock function with given fields: m
func (_m *Database) CreateOrEditPerson(m db.Person) (db.Person, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditPerson")
	}

	var r0 db.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Person) (db.Person, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.Person) db.Person); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	if rf, ok := ret.Get(1).(func(db.Person) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditPerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditPerson'
type Database_CreateOrEditPerson_Call struct {
	*mock.Call
}

// CreateOrEditPerson is a helper method to define mock.On call
//   - m db.Person
func (_e *Database_Expecter) CreateOrEditPerson(m interface{}) *Database_CreateOrEditPerson_Call {
	return &Database_CreateOrEditPerson_Call{Call: _e.mock.On("CreateOrEditPerson", m)}
}

func (_c *Database_CreateOrEditPerson_Call) Run(run func(m db.Person)) *Database_CreateOrEditPerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Person))
	})
	return _c
}

func (_c *Database_CreateOrEditPerson_Call) Return(_a0 db.Person, _a1 error) *Database_CreateOrEditPerson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditPerson_Call) RunAndReturn(run func(db.Person) (db.Person, error)) *Database_CreateOrEditPerson_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditTicket provides a mock function with given fields: ticket
func (_m *Database) CreateOrEditTicket(ticket *db.Tickets) (db.Tickets, error) {
	ret := _m.Called(ticket)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditTicket")
	}

	var r0 db.Tickets
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.Tickets) (db.Tickets, error)); ok {
		return rf(ticket)
	}
	if rf, ok := ret.Get(0).(func(*db.Tickets) db.Tickets); ok {
		r0 = rf(ticket)
	} else {
		r0 = ret.Get(0).(db.Tickets)
	}

	if rf, ok := ret.Get(1).(func(*db.Tickets) error); ok {
		r1 = rf(ticket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditTicket'
type Database_CreateOrEditTicket_Call struct {
	*mock.Call
}

// CreateOrEditTicket is a helper method to define mock.On call
//   - ticket *db.Tickets
func (_e *Database_Expecter) CreateOrEditTicket(ticket interface{}) *Database_CreateOrEditTicket_Call {
	return &Database_CreateOrEditTicket_Call{Call: _e.mock.On("CreateOrEditTicket", ticket)}
}

func (_c *Database_CreateOrEditTicket_Call) Run(run func(ticket *db.Tickets)) *Database_CreateOrEditTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.Tickets))
	})
	return _c
}

func (_c *Database_CreateOrEditTicket_Call) Return(_a0 db.Tickets, _a1 error) *Database_CreateOrEditTicket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditTicket_Call) RunAndReturn(run func(*db.Tickets) (db.Tickets, error)) *Database_CreateOrEditTicket_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditTribe provides a mock function with given fields: m
func (_m *Database) CreateOrEditTribe(m db.Tribe) (db.Tribe, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditTribe")
	}

	var r0 db.Tribe
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Tribe) (db.Tribe, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.Tribe) db.Tribe); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	if rf, ok := ret.Get(1).(func(db.Tribe) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditTribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditTribe'
type Database_CreateOrEditTribe_Call struct {
	*mock.Call
}

// CreateOrEditTribe is a helper method to define mock.On call
//   - m db.Tribe
func (_e *Database_Expecter) CreateOrEditTribe(m interface{}) *Database_CreateOrEditTribe_Call {
	return &Database_CreateOrEditTribe_Call{Call: _e.mock.On("CreateOrEditTribe", m)}
}

func (_c *Database_CreateOrEditTribe_Call) Run(run func(m db.Tribe)) *Database_CreateOrEditTribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Tribe))
	})
	return _c
}

func (_c *Database_CreateOrEditTribe_Call) Return(_a0 db.Tribe, _a1 error) *Database_CreateOrEditTribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditTribe_Call) RunAndReturn(run func(db.Tribe) (db.Tribe, error)) *Database_CreateOrEditTribe_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditWorkspace provides a mock function with given fields: m
func (_m *Database) CreateOrEditWorkspace(m db.Workspace) (db.Workspace, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditWorkspace")
	}

	var r0 db.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Workspace) (db.Workspace, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.Workspace) db.Workspace); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.Workspace)
	}

	if rf, ok := ret.Get(1).(func(db.Workspace) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditWorkspace'
type Database_CreateOrEditWorkspace_Call struct {
	*mock.Call
}

// CreateOrEditWorkspace is a helper method to define mock.On call
//   - m db.Workspace
func (_e *Database_Expecter) CreateOrEditWorkspace(m interface{}) *Database_CreateOrEditWorkspace_Call {
	return &Database_CreateOrEditWorkspace_Call{Call: _e.mock.On("CreateOrEditWorkspace", m)}
}

func (_c *Database_CreateOrEditWorkspace_Call) Run(run func(m db.Workspace)) *Database_CreateOrEditWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Workspace))
	})
	return _c
}

func (_c *Database_CreateOrEditWorkspace_Call) Return(_a0 db.Workspace, _a1 error) *Database_CreateOrEditWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditWorkspace_Call) RunAndReturn(run func(db.Workspace) (db.Workspace, error)) *Database_CreateOrEditWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrEditWorkspaceRepository provides a mock function with given fields: m
func (_m *Database) CreateOrEditWorkspaceRepository(m db.WorkspaceRepositories) (db.WorkspaceRepositories, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrEditWorkspaceRepository")
	}

	var r0 db.WorkspaceRepositories
	var r1 error
	if rf, ok := ret.Get(0).(func(db.WorkspaceRepositories) (db.WorkspaceRepositories, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.WorkspaceRepositories) db.WorkspaceRepositories); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.WorkspaceRepositories)
	}

	if rf, ok := ret.Get(1).(func(db.WorkspaceRepositories) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateOrEditWorkspaceRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrEditWorkspaceRepository'
type Database_CreateOrEditWorkspaceRepository_Call struct {
	*mock.Call
}

// CreateOrEditWorkspaceRepository is a helper method to define mock.On call
//   - m db.WorkspaceRepositories
func (_e *Database_Expecter) CreateOrEditWorkspaceRepository(m interface{}) *Database_CreateOrEditWorkspaceRepository_Call {
	return &Database_CreateOrEditWorkspaceRepository_Call{Call: _e.mock.On("CreateOrEditWorkspaceRepository", m)}
}

func (_c *Database_CreateOrEditWorkspaceRepository_Call) Run(run func(m db.WorkspaceRepositories)) *Database_CreateOrEditWorkspaceRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.WorkspaceRepositories))
	})
	return _c
}

func (_c *Database_CreateOrEditWorkspaceRepository_Call) Return(_a0 db.WorkspaceRepositories, _a1 error) *Database_CreateOrEditWorkspaceRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateOrEditWorkspaceRepository_Call) RunAndReturn(run func(db.WorkspaceRepositories) (db.WorkspaceRepositories, error)) *Database_CreateOrEditWorkspaceRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProcessingMap provides a mock function with given fields: pm
func (_m *Database) CreateProcessingMap(pm *db.WfProcessingMap) error {
	ret := _m.Called(pm)

	if len(ret) == 0 {
		panic("no return value specified for CreateProcessingMap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.WfProcessingMap) error); ok {
		r0 = rf(pm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_CreateProcessingMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProcessingMap'
type Database_CreateProcessingMap_Call struct {
	*mock.Call
}

// CreateProcessingMap is a helper method to define mock.On call
//   - pm *db.WfProcessingMap
func (_e *Database_Expecter) CreateProcessingMap(pm interface{}) *Database_CreateProcessingMap_Call {
	return &Database_CreateProcessingMap_Call{Call: _e.mock.On("CreateProcessingMap", pm)}
}

func (_c *Database_CreateProcessingMap_Call) Run(run func(pm *db.WfProcessingMap)) *Database_CreateProcessingMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.WfProcessingMap))
	})
	return _c
}

func (_c *Database_CreateProcessingMap_Call) Return(_a0 error) *Database_CreateProcessingMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateProcessingMap_Call) RunAndReturn(run func(*db.WfProcessingMap) error) *Database_CreateProcessingMap_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProof provides a mock function with given fields: proof
func (_m *Database) CreateProof(proof db.ProofOfWork) error {
	ret := _m.Called(proof)

	if len(ret) == 0 {
		panic("no return value specified for CreateProof")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(db.ProofOfWork) error); ok {
		r0 = rf(proof)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_CreateProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProof'
type Database_CreateProof_Call struct {
	*mock.Call
}

// CreateProof is a helper method to define mock.On call
//   - proof db.ProofOfWork
func (_e *Database_Expecter) CreateProof(proof interface{}) *Database_CreateProof_Call {
	return &Database_CreateProof_Call{Call: _e.mock.On("CreateProof", proof)}
}

func (_c *Database_CreateProof_Call) Run(run func(proof db.ProofOfWork)) *Database_CreateProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.ProofOfWork))
	})
	return _c
}

func (_c *Database_CreateProof_Call) Return(_a0 error) *Database_CreateProof_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateProof_Call) RunAndReturn(run func(db.ProofOfWork) error) *Database_CreateProof_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserRoles provides a mock function with given fields: roles, _a1, pubkey
func (_m *Database) CreateUserRoles(roles []db.WorkspaceUserRoles, _a1 string, pubkey string) []db.WorkspaceUserRoles {
	ret := _m.Called(roles, _a1, pubkey)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserRoles")
	}

	var r0 []db.WorkspaceUserRoles
	if rf, ok := ret.Get(0).(func([]db.WorkspaceUserRoles, string, string) []db.WorkspaceUserRoles); ok {
		r0 = rf(roles, _a1, pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WorkspaceUserRoles)
		}
	}

	return r0
}

// Database_CreateUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserRoles'
type Database_CreateUserRoles_Call struct {
	*mock.Call
}

// CreateUserRoles is a helper method to define mock.On call
//   - roles []db.WorkspaceUserRoles
//   - _a1 string
//   - pubkey string
func (_e *Database_Expecter) CreateUserRoles(roles interface{}, _a1 interface{}, pubkey interface{}) *Database_CreateUserRoles_Call {
	return &Database_CreateUserRoles_Call{Call: _e.mock.On("CreateUserRoles", roles, _a1, pubkey)}
}

func (_c *Database_CreateUserRoles_Call) Run(run func(roles []db.WorkspaceUserRoles, _a1 string, pubkey string)) *Database_CreateUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]db.WorkspaceUserRoles), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Database_CreateUserRoles_Call) Return(_a0 []db.WorkspaceUserRoles) *Database_CreateUserRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateUserRoles_Call) RunAndReturn(run func([]db.WorkspaceUserRoles, string, string) []db.WorkspaceUserRoles) *Database_CreateUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkflowRequest provides a mock function with given fields: req
func (_m *Database) CreateWorkflowRequest(req *db.WfRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkflowRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.WfRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_CreateWorkflowRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkflowRequest'
type Database_CreateWorkflowRequest_Call struct {
	*mock.Call
}

// CreateWorkflowRequest is a helper method to define mock.On call
//   - req *db.WfRequest
func (_e *Database_Expecter) CreateWorkflowRequest(req interface{}) *Database_CreateWorkflowRequest_Call {
	return &Database_CreateWorkflowRequest_Call{Call: _e.mock.On("CreateWorkflowRequest", req)}
}

func (_c *Database_CreateWorkflowRequest_Call) Run(run func(req *db.WfRequest)) *Database_CreateWorkflowRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.WfRequest))
	})
	return _c
}

func (_c *Database_CreateWorkflowRequest_Call) Return(_a0 error) *Database_CreateWorkflowRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateWorkflowRequest_Call) RunAndReturn(run func(*db.WfRequest) error) *Database_CreateWorkflowRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkspaceBudget provides a mock function with given fields: budget
func (_m *Database) CreateWorkspaceBudget(budget db.NewBountyBudget) db.NewBountyBudget {
	ret := _m.Called(budget)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceBudget")
	}

	var r0 db.NewBountyBudget
	if rf, ok := ret.Get(0).(func(db.NewBountyBudget) db.NewBountyBudget); ok {
		r0 = rf(budget)
	} else {
		r0 = ret.Get(0).(db.NewBountyBudget)
	}

	return r0
}

// Database_CreateWorkspaceBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkspaceBudget'
type Database_CreateWorkspaceBudget_Call struct {
	*mock.Call
}

// CreateWorkspaceBudget is a helper method to define mock.On call
//   - budget db.NewBountyBudget
func (_e *Database_Expecter) CreateWorkspaceBudget(budget interface{}) *Database_CreateWorkspaceBudget_Call {
	return &Database_CreateWorkspaceBudget_Call{Call: _e.mock.On("CreateWorkspaceBudget", budget)}
}

func (_c *Database_CreateWorkspaceBudget_Call) Run(run func(budget db.NewBountyBudget)) *Database_CreateWorkspaceBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewBountyBudget))
	})
	return _c
}

func (_c *Database_CreateWorkspaceBudget_Call) Return(_a0 db.NewBountyBudget) *Database_CreateWorkspaceBudget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateWorkspaceBudget_Call) RunAndReturn(run func(db.NewBountyBudget) db.NewBountyBudget) *Database_CreateWorkspaceBudget_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkspaceUser provides a mock function with given fields: orgUser
func (_m *Database) CreateWorkspaceUser(orgUser db.WorkspaceUsers) db.WorkspaceUsers {
	ret := _m.Called(orgUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceUser")
	}

	var r0 db.WorkspaceUsers
	if rf, ok := ret.Get(0).(func(db.WorkspaceUsers) db.WorkspaceUsers); ok {
		r0 = rf(orgUser)
	} else {
		r0 = ret.Get(0).(db.WorkspaceUsers)
	}

	return r0
}

// Database_CreateWorkspaceUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkspaceUser'
type Database_CreateWorkspaceUser_Call struct {
	*mock.Call
}

// CreateWorkspaceUser is a helper method to define mock.On call
//   - orgUser db.WorkspaceUsers
func (_e *Database_Expecter) CreateWorkspaceUser(orgUser interface{}) *Database_CreateWorkspaceUser_Call {
	return &Database_CreateWorkspaceUser_Call{Call: _e.mock.On("CreateWorkspaceUser", orgUser)}
}

func (_c *Database_CreateWorkspaceUser_Call) Run(run func(orgUser db.WorkspaceUsers)) *Database_CreateWorkspaceUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.WorkspaceUsers))
	})
	return _c
}

func (_c *Database_CreateWorkspaceUser_Call) Return(_a0 db.WorkspaceUsers) *Database_CreateWorkspaceUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateWorkspaceUser_Call) RunAndReturn(run func(db.WorkspaceUsers) db.WorkspaceUsers) *Database_CreateWorkspaceUser_Call {
	_c.Call.Return(run)
	return _c
}

// DecrementProofCount provides a mock function with given fields: bountyID
func (_m *Database) DecrementProofCount(bountyID uint) error {
	ret := _m.Called(bountyID)

	if len(ret) == 0 {
		panic("no return value specified for DecrementProofCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(bountyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DecrementProofCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecrementProofCount'
type Database_DecrementProofCount_Call struct {
	*mock.Call
}

// DecrementProofCount is a helper method to define mock.On call
//   - bountyID uint
func (_e *Database_Expecter) DecrementProofCount(bountyID interface{}) *Database_DecrementProofCount_Call {
	return &Database_DecrementProofCount_Call{Call: _e.mock.On("DecrementProofCount", bountyID)}
}

func (_c *Database_DecrementProofCount_Call) Run(run func(bountyID uint)) *Database_DecrementProofCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_DecrementProofCount_Call) Return(_a0 error) *Database_DecrementProofCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DecrementProofCount_Call) RunAndReturn(run func(uint) error) *Database_DecrementProofCount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllUsersFromWorkspace provides a mock function with given fields: _a0
func (_m *Database) DeleteAllUsersFromWorkspace(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllUsersFromWorkspace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteAllUsersFromWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllUsersFromWorkspace'
type Database_DeleteAllUsersFromWorkspace_Call struct {
	*mock.Call
}

// DeleteAllUsersFromWorkspace is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) DeleteAllUsersFromWorkspace(_a0 interface{}) *Database_DeleteAllUsersFromWorkspace_Call {
	return &Database_DeleteAllUsersFromWorkspace_Call{Call: _e.mock.On("DeleteAllUsersFromWorkspace", _a0)}
}

func (_c *Database_DeleteAllUsersFromWorkspace_Call) Run(run func(_a0 string)) *Database_DeleteAllUsersFromWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_DeleteAllUsersFromWorkspace_Call) Return(_a0 error) *Database_DeleteAllUsersFromWorkspace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteAllUsersFromWorkspace_Call) RunAndReturn(run func(string) error) *Database_DeleteAllUsersFromWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBounty provides a mock function with given fields: pubkey, created
func (_m *Database) DeleteBounty(pubkey string, created string) (db.NewBounty, error) {
	ret := _m.Called(pubkey, created)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBounty")
	}

	var r0 db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (db.NewBounty, error)); ok {
		return rf(pubkey, created)
	}
	if rf, ok := ret.Get(0).(func(string, string) db.NewBounty); ok {
		r0 = rf(pubkey, created)
	} else {
		r0 = ret.Get(0).(db.NewBounty)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pubkey, created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_DeleteBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBounty'
type Database_DeleteBounty_Call struct {
	*mock.Call
}

// DeleteBounty is a helper method to define mock.On call
//   - pubkey string
//   - created string
func (_e *Database_Expecter) DeleteBounty(pubkey interface{}, created interface{}) *Database_DeleteBounty_Call {
	return &Database_DeleteBounty_Call{Call: _e.mock.On("DeleteBounty", pubkey, created)}
}

func (_c *Database_DeleteBounty_Call) Run(run func(pubkey string, created string)) *Database_DeleteBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_DeleteBounty_Call) Return(_a0 db.NewBounty, _a1 error) *Database_DeleteBounty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_DeleteBounty_Call) RunAndReturn(run func(string, string) (db.NewBounty, error)) *Database_DeleteBounty_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCodeGraph provides a mock function with given fields: workspace_uuid, _a1
func (_m *Database) DeleteCodeGraph(workspace_uuid string, _a1 string) error {
	ret := _m.Called(workspace_uuid, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCodeGraph")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(workspace_uuid, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteCodeGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCodeGraph'
type Database_DeleteCodeGraph_Call struct {
	*mock.Call
}

// DeleteCodeGraph is a helper method to define mock.On call
//   - workspace_uuid string
//   - _a1 string
func (_e *Database_Expecter) DeleteCodeGraph(workspace_uuid interface{}, _a1 interface{}) *Database_DeleteCodeGraph_Call {
	return &Database_DeleteCodeGraph_Call{Call: _e.mock.On("DeleteCodeGraph", workspace_uuid, _a1)}
}

func (_c *Database_DeleteCodeGraph_Call) Run(run func(workspace_uuid string, _a1 string)) *Database_DeleteCodeGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_DeleteCodeGraph_Call) Return(_a0 error) *Database_DeleteCodeGraph_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteCodeGraph_Call) RunAndReturn(run func(string, string) error) *Database_DeleteCodeGraph_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEndpoint provides a mock function with given fields: endpointUUID
func (_m *Database) DeleteEndpoint(endpointUUID uuid.UUID) error {
	ret := _m.Called(endpointUUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEndpoint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(endpointUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEndpoint'
type Database_DeleteEndpoint_Call struct {
	*mock.Call
}

// DeleteEndpoint is a helper method to define mock.On call
//   - endpointUUID uuid.UUID
func (_e *Database_Expecter) DeleteEndpoint(endpointUUID interface{}) *Database_DeleteEndpoint_Call {
	return &Database_DeleteEndpoint_Call{Call: _e.mock.On("DeleteEndpoint", endpointUUID)}
}

func (_c *Database_DeleteEndpoint_Call) Run(run func(endpointUUID uuid.UUID)) *Database_DeleteEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Database_DeleteEndpoint_Call) Return(_a0 error) *Database_DeleteEndpoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteEndpoint_Call) RunAndReturn(run func(uuid.UUID) error) *Database_DeleteEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFeatureByUuid provides a mock function with given fields: _a0
func (_m *Database) DeleteFeatureByUuid(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeatureByUuid")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteFeatureByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFeatureByUuid'
type Database_DeleteFeatureByUuid_Call struct {
	*mock.Call
}

// DeleteFeatureByUuid is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) DeleteFeatureByUuid(_a0 interface{}) *Database_DeleteFeatureByUuid_Call {
	return &Database_DeleteFeatureByUuid_Call{Call: _e.mock.On("DeleteFeatureByUuid", _a0)}
}

func (_c *Database_DeleteFeatureByUuid_Call) Run(run func(_a0 string)) *Database_DeleteFeatureByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_DeleteFeatureByUuid_Call) Return(_a0 error) *Database_DeleteFeatureByUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteFeatureByUuid_Call) RunAndReturn(run func(string) error) *Database_DeleteFeatureByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFeatureFlag provides a mock function with given fields: flagUUID
func (_m *Database) DeleteFeatureFlag(flagUUID uuid.UUID) error {
	ret := _m.Called(flagUUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeatureFlag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(flagUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteFeatureFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFeatureFlag'
type Database_DeleteFeatureFlag_Call struct {
	*mock.Call
}

// DeleteFeatureFlag is a helper method to define mock.On call
//   - flagUUID uuid.UUID
func (_e *Database_Expecter) DeleteFeatureFlag(flagUUID interface{}) *Database_DeleteFeatureFlag_Call {
	return &Database_DeleteFeatureFlag_Call{Call: _e.mock.On("DeleteFeatureFlag", flagUUID)}
}

func (_c *Database_DeleteFeatureFlag_Call) Run(run func(flagUUID uuid.UUID)) *Database_DeleteFeatureFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Database_DeleteFeatureFlag_Call) Return(_a0 error) *Database_DeleteFeatureFlag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteFeatureFlag_Call) RunAndReturn(run func(uuid.UUID) error) *Database_DeleteFeatureFlag_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFeaturePhase provides a mock function with given fields: featureUuid, phaseUuid
func (_m *Database) DeleteFeaturePhase(featureUuid string, phaseUuid string) error {
	ret := _m.Called(featureUuid, phaseUuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeaturePhase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(featureUuid, phaseUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteFeaturePhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFeaturePhase'
type Database_DeleteFeaturePhase_Call struct {
	*mock.Call
}

// DeleteFeaturePhase is a helper method to define mock.On call
//   - featureUuid string
//   - phaseUuid string
func (_e *Database_Expecter) DeleteFeaturePhase(featureUuid interface{}, phaseUuid interface{}) *Database_DeleteFeaturePhase_Call {
	return &Database_DeleteFeaturePhase_Call{Call: _e.mock.On("DeleteFeaturePhase", featureUuid, phaseUuid)}
}

func (_c *Database_DeleteFeaturePhase_Call) Run(run func(featureUuid string, phaseUuid string)) *Database_DeleteFeaturePhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_DeleteFeaturePhase_Call) Return(_a0 error) *Database_DeleteFeaturePhase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteFeaturePhase_Call) RunAndReturn(run func(string, string) error) *Database_DeleteFeaturePhase_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFeatureStoryByUuid provides a mock function with given fields: featureUuid, storyUuid
func (_m *Database) DeleteFeatureStoryByUuid(featureUuid string, storyUuid string) error {
	ret := _m.Called(featureUuid, storyUuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeatureStoryByUuid")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(featureUuid, storyUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteFeatureStoryByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFeatureStoryByUuid'
type Database_DeleteFeatureStoryByUuid_Call struct {
	*mock.Call
}

// DeleteFeatureStoryByUuid is a helper method to define mock.On call
//   - featureUuid string
//   - storyUuid string
func (_e *Database_Expecter) DeleteFeatureStoryByUuid(featureUuid interface{}, storyUuid interface{}) *Database_DeleteFeatureStoryByUuid_Call {
	return &Database_DeleteFeatureStoryByUuid_Call{Call: _e.mock.On("DeleteFeatureStoryByUuid", featureUuid, storyUuid)}
}

func (_c *Database_DeleteFeatureStoryByUuid_Call) Run(run func(featureUuid string, storyUuid string)) *Database_DeleteFeatureStoryByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_DeleteFeatureStoryByUuid_Call) Return(_a0 error) *Database_DeleteFeatureStoryByUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteFeatureStoryByUuid_Call) RunAndReturn(run func(string, string) error) *Database_DeleteFeatureStoryByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFeaturedBounty provides a mock function with given fields: bountyID
func (_m *Database) DeleteFeaturedBounty(bountyID string) error {
	ret := _m.Called(bountyID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeaturedBounty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(bountyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteFeaturedBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFeaturedBounty'
type Database_DeleteFeaturedBounty_Call struct {
	*mock.Call
}

// DeleteFeaturedBounty is a helper method to define mock.On call
//   - bountyID string
func (_e *Database_Expecter) DeleteFeaturedBounty(bountyID interface{}) *Database_DeleteFeaturedBounty_Call {
	return &Database_DeleteFeaturedBounty_Call{Call: _e.mock.On("DeleteFeaturedBounty", bountyID)}
}

func (_c *Database_DeleteFeaturedBounty_Call) Run(run func(bountyID string)) *Database_DeleteFeaturedBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_DeleteFeaturedBounty_Call) Return(_a0 error) *Database_DeleteFeaturedBounty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteFeaturedBounty_Call) RunAndReturn(run func(string) error) *Database_DeleteFeaturedBounty_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInvoice provides a mock function with given fields: payment_request
func (_m *Database) DeleteInvoice(payment_request string) db.NewInvoiceList {
	ret := _m.Called(payment_request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvoice")
	}

	var r0 db.NewInvoiceList
	if rf, ok := ret.Get(0).(func(string) db.NewInvoiceList); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.NewInvoiceList)
	}

	return r0
}

// Database_DeleteInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInvoice'
type Database_DeleteInvoice_Call struct {
	*mock.Call
}

// DeleteInvoice is a helper method to define mock.On call
//   - payment_request string
func (_e *Database_Expecter) DeleteInvoice(payment_request interface{}) *Database_DeleteInvoice_Call {
	return &Database_DeleteInvoice_Call{Call: _e.mock.On("DeleteInvoice", payment_request)}
}

func (_c *Database_DeleteInvoice_Call) Run(run func(payment_request string)) *Database_DeleteInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_DeleteInvoice_Call) Return(_a0 db.NewInvoiceList) *Database_DeleteInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteInvoice_Call) RunAndReturn(run func(string) db.NewInvoiceList) *Database_DeleteInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotification provides a mock function with given fields: _a0
func (_m *Database) DeleteNotification(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotification'
type Database_DeleteNotification_Call struct {
	*mock.Call
}

// DeleteNotification is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) DeleteNotification(_a0 interface{}) *Database_DeleteNotification_Call {
	return &Database_DeleteNotification_Call{Call: _e.mock.On("DeleteNotification", _a0)}
}

func (_c *Database_DeleteNotification_Call) Run(run func(_a0 string)) *Database_DeleteNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_DeleteNotification_Call) Return(_a0 error) *Database_DeleteNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteNotification_Call) RunAndReturn(run func(string) error) *Database_DeleteNotification_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProcessingMap provides a mock function with given fields: id
func (_m *Database) DeleteProcessingMap(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProcessingMap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteProcessingMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProcessingMap'
type Database_DeleteProcessingMap_Call struct {
	*mock.Call
}

// DeleteProcessingMap is a helper method to define mock.On call
//   - id uint
func (_e *Database_Expecter) DeleteProcessingMap(id interface{}) *Database_DeleteProcessingMap_Call {
	return &Database_DeleteProcessingMap_Call{Call: _e.mock.On("DeleteProcessingMap", id)}
}

func (_c *Database_DeleteProcessingMap_Call) Run(run func(id uint)) *Database_DeleteProcessingMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_DeleteProcessingMap_Call) Return(_a0 error) *Database_DeleteProcessingMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteProcessingMap_Call) RunAndReturn(run func(uint) error) *Database_DeleteProcessingMap_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProcessingMapByKey provides a mock function with given fields: processType, processKey
func (_m *Database) DeleteProcessingMapByKey(processType string, processKey string) error {
	ret := _m.Called(processType, processKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProcessingMapByKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(processType, processKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteProcessingMapByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProcessingMapByKey'
type Database_DeleteProcessingMapByKey_Call struct {
	*mock.Call
}

// DeleteProcessingMapByKey is a helper method to define mock.On call
//   - processType string
//   - processKey string
func (_e *Database_Expecter) DeleteProcessingMapByKey(processType interface{}, processKey interface{}) *Database_DeleteProcessingMapByKey_Call {
	return &Database_DeleteProcessingMapByKey_Call{Call: _e.mock.On("DeleteProcessingMapByKey", processType, processKey)}
}

func (_c *Database_DeleteProcessingMapByKey_Call) Run(run func(processType string, processKey string)) *Database_DeleteProcessingMapByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_DeleteProcessingMapByKey_Call) Return(_a0 error) *Database_DeleteProcessingMapByKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteProcessingMapByKey_Call) RunAndReturn(run func(string, string) error) *Database_DeleteProcessingMapByKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProof provides a mock function with given fields: proofID
func (_m *Database) DeleteProof(proofID string) error {
	ret := _m.Called(proofID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProof")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(proofID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProof'
type Database_DeleteProof_Call struct {
	*mock.Call
}

// DeleteProof is a helper method to define mock.On call
//   - proofID string
func (_e *Database_Expecter) DeleteProof(proofID interface{}) *Database_DeleteProof_Call {
	return &Database_DeleteProof_Call{Call: _e.mock.On("DeleteProof", proofID)}
}

func (_c *Database_DeleteProof_Call) Run(run func(proofID string)) *Database_DeleteProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_DeleteProof_Call) Return(_a0 error) *Database_DeleteProof_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteProof_Call) RunAndReturn(run func(string) error) *Database_DeleteProof_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTicket provides a mock function with given fields: _a0
func (_m *Database) DeleteTicket(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTicket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTicket'
type Database_DeleteTicket_Call struct {
	*mock.Call
}

// DeleteTicket is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) DeleteTicket(_a0 interface{}) *Database_DeleteTicket_Call {
	return &Database_DeleteTicket_Call{Call: _e.mock.On("DeleteTicket", _a0)}
}

func (_c *Database_DeleteTicket_Call) Run(run func(_a0 string)) *Database_DeleteTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_DeleteTicket_Call) Return(_a0 error) *Database_DeleteTicket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteTicket_Call) RunAndReturn(run func(string) error) *Database_DeleteTicket_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserInvoiceData provides a mock function with given fields: payment_request
func (_m *Database) DeleteUserInvoiceData(payment_request string) db.UserInvoiceData {
	ret := _m.Called(payment_request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserInvoiceData")
	}

	var r0 db.UserInvoiceData
	if rf, ok := ret.Get(0).(func(string) db.UserInvoiceData); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.UserInvoiceData)
	}

	return r0
}

// Database_DeleteUserInvoiceData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserInvoiceData'
type Database_DeleteUserInvoiceData_Call struct {
	*mock.Call
}

// DeleteUserInvoiceData is a helper method to define mock.On call
//   - payment_request string
func (_e *Database_Expecter) DeleteUserInvoiceData(payment_request interface{}) *Database_DeleteUserInvoiceData_Call {
	return &Database_DeleteUserInvoiceData_Call{Call: _e.mock.On("DeleteUserInvoiceData", payment_request)}
}

func (_c *Database_DeleteUserInvoiceData_Call) Run(run func(payment_request string)) *Database_DeleteUserInvoiceData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_DeleteUserInvoiceData_Call) Return(_a0 db.UserInvoiceData) *Database_DeleteUserInvoiceData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteUserInvoiceData_Call) RunAndReturn(run func(string) db.UserInvoiceData) *Database_DeleteUserInvoiceData_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkflowRequest provides a mock function with given fields: requestID
func (_m *Database) DeleteWorkflowRequest(requestID string) error {
	ret := _m.Called(requestID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflowRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteWorkflowRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkflowRequest'
type Database_DeleteWorkflowRequest_Call struct {
	*mock.Call
}

// DeleteWorkflowRequest is a helper method to define mock.On call
//   - requestID string
func (_e *Database_Expecter) DeleteWorkflowRequest(requestID interface{}) *Database_DeleteWorkflowRequest_Call {
	return &Database_DeleteWorkflowRequest_Call{Call: _e.mock.On("DeleteWorkflowRequest", requestID)}
}

func (_c *Database_DeleteWorkflowRequest_Call) Run(run func(requestID string)) *Database_DeleteWorkflowRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_DeleteWorkflowRequest_Call) Return(_a0 error) *Database_DeleteWorkflowRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteWorkflowRequest_Call) RunAndReturn(run func(string) error) *Database_DeleteWorkflowRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkspaceRepository provides a mock function with given fields: workspace_uuid, _a1
func (_m *Database) DeleteWorkspaceRepository(workspace_uuid string, _a1 string) bool {
	ret := _m.Called(workspace_uuid, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceRepository")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(workspace_uuid, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_DeleteWorkspaceRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkspaceRepository'
type Database_DeleteWorkspaceRepository_Call struct {
	*mock.Call
}

// DeleteWorkspaceRepository is a helper method to define mock.On call
//   - workspace_uuid string
//   - _a1 string
func (_e *Database_Expecter) DeleteWorkspaceRepository(workspace_uuid interface{}, _a1 interface{}) *Database_DeleteWorkspaceRepository_Call {
	return &Database_DeleteWorkspaceRepository_Call{Call: _e.mock.On("DeleteWorkspaceRepository", workspace_uuid, _a1)}
}

func (_c *Database_DeleteWorkspaceRepository_Call) Run(run func(workspace_uuid string, _a1 string)) *Database_DeleteWorkspaceRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_DeleteWorkspaceRepository_Call) Return(_a0 bool) *Database_DeleteWorkspaceRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteWorkspaceRepository_Call) RunAndReturn(run func(string, string) bool) *Database_DeleteWorkspaceRepository_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkspaceUser provides a mock function with given fields: orgUser, org
func (_m *Database) DeleteWorkspaceUser(orgUser db.WorkspaceUsersData, org string) db.WorkspaceUsersData {
	ret := _m.Called(orgUser, org)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceUser")
	}

	var r0 db.WorkspaceUsersData
	if rf, ok := ret.Get(0).(func(db.WorkspaceUsersData, string) db.WorkspaceUsersData); ok {
		r0 = rf(orgUser, org)
	} else {
		r0 = ret.Get(0).(db.WorkspaceUsersData)
	}

	return r0
}

// Database_DeleteWorkspaceUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkspaceUser'
type Database_DeleteWorkspaceUser_Call struct {
	*mock.Call
}

// DeleteWorkspaceUser is a helper method to define mock.On call
//   - orgUser db.WorkspaceUsersData
//   - org string
func (_e *Database_Expecter) DeleteWorkspaceUser(orgUser interface{}, org interface{}) *Database_DeleteWorkspaceUser_Call {
	return &Database_DeleteWorkspaceUser_Call{Call: _e.mock.On("DeleteWorkspaceUser", orgUser, org)}
}

func (_c *Database_DeleteWorkspaceUser_Call) Run(run func(orgUser db.WorkspaceUsersData, org string)) *Database_DeleteWorkspaceUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.WorkspaceUsersData), args[1].(string))
	})
	return _c
}

func (_c *Database_DeleteWorkspaceUser_Call) Return(_a0 db.WorkspaceUsersData) *Database_DeleteWorkspaceUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteWorkspaceUser_Call) RunAndReturn(run func(db.WorkspaceUsersData, string) db.WorkspaceUsersData) *Database_DeleteWorkspaceUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllBounties provides a mock function with given fields: r
func (_m *Database) GetAllBounties(r *http.Request) []db.NewBounty {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBounties")
	}

	var r0 []db.NewBounty
	if rf, ok := ret.Get(0).(func(*http.Request) []db.NewBounty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewBounty)
		}
	}

	return r0
}

// Database_GetAllBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBounties'
type Database_GetAllBounties_Call struct {
	*mock.Call
}

// GetAllBounties is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetAllBounties(r interface{}) *Database_GetAllBounties_Call {
	return &Database_GetAllBounties_Call{Call: _e.mock.On("GetAllBounties", r)}
}

func (_c *Database_GetAllBounties_Call) Run(run func(r *http.Request)) *Database_GetAllBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetAllBounties_Call) Return(_a0 []db.NewBounty) *Database_GetAllBounties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetAllBounties_Call) RunAndReturn(run func(*http.Request) []db.NewBounty) *Database_GetAllBounties_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEndpoints provides a mock function with no fields
func (_m *Database) GetAllEndpoints() ([]db.Endpoint, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllEndpoints")
	}

	var r0 []db.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Endpoint, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Endpoint); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Endpoint)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetAllEndpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEndpoints'
type Database_GetAllEndpoints_Call struct {
	*mock.Call
}

// GetAllEndpoints is a helper method to define mock.On call
func (_e *Database_Expecter) GetAllEndpoints() *Database_GetAllEndpoints_Call {
	return &Database_GetAllEndpoints_Call{Call: _e.mock.On("GetAllEndpoints")}
}

func (_c *Database_GetAllEndpoints_Call) Run(run func()) *Database_GetAllEndpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetAllEndpoints_Call) Return(_a0 []db.Endpoint, _a1 error) *Database_GetAllEndpoints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetAllEndpoints_Call) RunAndReturn(run func() ([]db.Endpoint, error)) *Database_GetAllEndpoints_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFeaturedBounties provides a mock function with no fields
func (_m *Database) GetAllFeaturedBounties() ([]db.FeaturedBounty, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllFeaturedBounties")
	}

	var r0 []db.FeaturedBounty
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.FeaturedBounty, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.FeaturedBounty); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.FeaturedBounty)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetAllFeaturedBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFeaturedBounties'
type Database_GetAllFeaturedBounties_Call struct {
	*mock.Call
}

// GetAllFeaturedBounties is a helper method to define mock.On call
func (_e *Database_Expecter) GetAllFeaturedBounties() *Database_GetAllFeaturedBounties_Call {
	return &Database_GetAllFeaturedBounties_Call{Call: _e.mock.On("GetAllFeaturedBounties")}
}

func (_c *Database_GetAllFeaturedBounties_Call) Run(run func()) *Database_GetAllFeaturedBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetAllFeaturedBounties_Call) Return(_a0 []db.FeaturedBounty, _a1 error) *Database_GetAllFeaturedBounties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetAllFeaturedBounties_Call) RunAndReturn(run func() ([]db.FeaturedBounty, error)) *Database_GetAllFeaturedBounties_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTicketGroups provides a mock function with no fields
func (_m *Database) GetAllTicketGroups() ([]uuid.UUID, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTicketGroups")
	}

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]uuid.UUID, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetAllTicketGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTicketGroups'
type Database_GetAllTicketGroups_Call struct {
	*mock.Call
}

// GetAllTicketGroups is a helper method to define mock.On call
func (_e *Database_Expecter) GetAllTicketGroups() *Database_GetAllTicketGroups_Call {
	return &Database_GetAllTicketGroups_Call{Call: _e.mock.On("GetAllTicketGroups")}
}

func (_c *Database_GetAllTicketGroups_Call) Run(run func()) *Database_GetAllTicketGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetAllTicketGroups_Call) Return(_a0 []uuid.UUID, _a1 error) *Database_GetAllTicketGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetAllTicketGroups_Call) RunAndReturn(run func() ([]uuid.UUID, error)) *Database_GetAllTicketGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTribes provides a mock function with no fields
func (_m *Database) GetAllTribes() []db.Tribe {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTribes")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func() []db.Tribe); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_GetAllTribes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTribes'
type Database_GetAllTribes_Call struct {
	*mock.Call
}

// GetAllTribes is a helper method to define mock.On call
func (_e *Database_Expecter) GetAllTribes() *Database_GetAllTribes_Call {
	return &Database_GetAllTribes_Call{Call: _e.mock.On("GetAllTribes")}
}

func (_c *Database_GetAllTribes_Call) Run(run func()) *Database_GetAllTribes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetAllTribes_Call) Return(_a0 []db.Tribe) *Database_GetAllTribes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetAllTribes_Call) RunAndReturn(run func() []db.Tribe) *Database_GetAllTribes_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTribesByOwner provides a mock function with given fields: pubkey
func (_m *Database) GetAllTribesByOwner(pubkey string) []db.Tribe {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTribesByOwner")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_GetAllTribesByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTribesByOwner'
type Database_GetAllTribesByOwner_Call struct {
	*mock.Call
}

// GetAllTribesByOwner is a helper method to define mock.On call
//   - pubkey string
func (_e *Database_Expecter) GetAllTribesByOwner(pubkey interface{}) *Database_GetAllTribesByOwner_Call {
	return &Database_GetAllTribesByOwner_Call{Call: _e.mock.On("GetAllTribesByOwner", pubkey)}
}

func (_c *Database_GetAllTribesByOwner_Call) Run(run func(pubkey string)) *Database_GetAllTribesByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetAllTribesByOwner_Call) Return(_a0 []db.Tribe) *Database_GetAllTribesByOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetAllTribesByOwner_Call) RunAndReturn(run func(string) []db.Tribe) *Database_GetAllTribesByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssignedBounties provides a mock function with given fields: r
func (_m *Database) GetAssignedBounties(r *http.Request) ([]db.NewBounty, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAssignedBounties")
	}

	var r0 []db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]db.NewBounty, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []db.NewBounty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewBounty)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetAssignedBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssignedBounties'
type Database_GetAssignedBounties_Call struct {
	*mock.Call
}

// GetAssignedBounties is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetAssignedBounties(r interface{}) *Database_GetAssignedBounties_Call {
	return &Database_GetAssignedBounties_Call{Call: _e.mock.On("GetAssignedBounties", r)}
}

func (_c *Database_GetAssignedBounties_Call) Run(run func(r *http.Request)) *Database_GetAssignedBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetAssignedBounties_Call) Return(_a0 []db.NewBounty, _a1 error) *Database_GetAssignedBounties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetAssignedBounties_Call) RunAndReturn(run func(*http.Request) ([]db.NewBounty, error)) *Database_GetAssignedBounties_Call {
	_c.Call.Return(run)
	return _c
}

// GetBot provides a mock function with given fields: _a0
func (_m *Database) GetBot(_a0 string) db.Bot {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBot")
	}

	var r0 db.Bot
	if rf, ok := ret.Get(0).(func(string) db.Bot); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.Bot)
	}

	return r0
}

// Database_GetBot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBot'
type Database_GetBot_Call struct {
	*mock.Call
}

// GetBot is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetBot(_a0 interface{}) *Database_GetBot_Call {
	return &Database_GetBot_Call{Call: _e.mock.On("GetBot", _a0)}
}

func (_c *Database_GetBot_Call) Run(run func(_a0 string)) *Database_GetBot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBot_Call) Return(_a0 db.Bot) *Database_GetBot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBot_Call) RunAndReturn(run func(string) db.Bot) *Database_GetBot_Call {
	_c.Call.Return(run)
	return _c
}

// GetBotByUniqueName provides a mock function with given fields: un
func (_m *Database) GetBotByUniqueName(un string) db.Bot {
	ret := _m.Called(un)

	if len(ret) == 0 {
		panic("no return value specified for GetBotByUniqueName")
	}

	var r0 db.Bot
	if rf, ok := ret.Get(0).(func(string) db.Bot); ok {
		r0 = rf(un)
	} else {
		r0 = ret.Get(0).(db.Bot)
	}

	return r0
}

// Database_GetBotByUniqueName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBotByUniqueName'
type Database_GetBotByUniqueName_Call struct {
	*mock.Call
}

// GetBotByUniqueName is a helper method to define mock.On call
//   - un string
func (_e *Database_Expecter) GetBotByUniqueName(un interface{}) *Database_GetBotByUniqueName_Call {
	return &Database_GetBotByUniqueName_Call{Call: _e.mock.On("GetBotByUniqueName", un)}
}

func (_c *Database_GetBotByUniqueName_Call) Run(run func(un string)) *Database_GetBotByUniqueName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBotByUniqueName_Call) Return(_a0 db.Bot) *Database_GetBotByUniqueName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBotByUniqueName_Call) RunAndReturn(run func(string) db.Bot) *Database_GetBotByUniqueName_Call {
	_c.Call.Return(run)
	return _c
}

// GetBotsByOwner provides a mock function with given fields: pubkey
func (_m *Database) GetBotsByOwner(pubkey string) []db.Bot {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetBotsByOwner")
	}

	var r0 []db.Bot
	if rf, ok := ret.Get(0).(func(string) []db.Bot); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bot)
		}
	}

	return r0
}

// Database_GetBotsByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBotsByOwner'
type Database_GetBotsByOwner_Call struct {
	*mock.Call
}

// GetBotsByOwner is a helper method to define mock.On call
//   - pubkey string
func (_e *Database_Expecter) GetBotsByOwner(pubkey interface{}) *Database_GetBotsByOwner_Call {
	return &Database_GetBotsByOwner_Call{Call: _e.mock.On("GetBotsByOwner", pubkey)}
}

func (_c *Database_GetBotsByOwner_Call) Run(run func(pubkey string)) *Database_GetBotsByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBotsByOwner_Call) Return(_a0 []db.Bot) *Database_GetBotsByOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBotsByOwner_Call) RunAndReturn(run func(string) []db.Bot) *Database_GetBotsByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountiesByDateRange provides a mock function with given fields: r, re
func (_m *Database) GetBountiesByDateRange(r db.PaymentDateRange, re *http.Request) []db.NewBounty {
	ret := _m.Called(r, re)

	if len(ret) == 0 {
		panic("no return value specified for GetBountiesByDateRange")
	}

	var r0 []db.NewBounty
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, *http.Request) []db.NewBounty); ok {
		r0 = rf(r, re)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewBounty)
		}
	}

	return r0
}

// Database_GetBountiesByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountiesByDateRange'
type Database_GetBountiesByDateRange_Call struct {
	*mock.Call
}

// GetBountiesByDateRange is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - re *http.Request
func (_e *Database_Expecter) GetBountiesByDateRange(r interface{}, re interface{}) *Database_GetBountiesByDateRange_Call {
	return &Database_GetBountiesByDateRange_Call{Call: _e.mock.On("GetBountiesByDateRange", r, re)}
}

func (_c *Database_GetBountiesByDateRange_Call) Run(run func(r db.PaymentDateRange, re *http.Request)) *Database_GetBountiesByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(*http.Request))
	})
	return _c
}

func (_c *Database_GetBountiesByDateRange_Call) Return(_a0 []db.NewBounty) *Database_GetBountiesByDateRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountiesByDateRange_Call) RunAndReturn(run func(db.PaymentDateRange, *http.Request) []db.NewBounty) *Database_GetBountiesByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountiesByDateRangeCount provides a mock function with given fields: r, re
func (_m *Database) GetBountiesByDateRangeCount(r db.PaymentDateRange, re *http.Request) int64 {
	ret := _m.Called(r, re)

	if len(ret) == 0 {
		panic("no return value specified for GetBountiesByDateRangeCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, *http.Request) int64); ok {
		r0 = rf(r, re)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetBountiesByDateRangeCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountiesByDateRangeCount'
type Database_GetBountiesByDateRangeCount_Call struct {
	*mock.Call
}

// GetBountiesByDateRangeCount is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - re *http.Request
func (_e *Database_Expecter) GetBountiesByDateRangeCount(r interface{}, re interface{}) *Database_GetBountiesByDateRangeCount_Call {
	return &Database_GetBountiesByDateRangeCount_Call{Call: _e.mock.On("GetBountiesByDateRangeCount", r, re)}
}

func (_c *Database_GetBountiesByDateRangeCount_Call) Run(run func(r db.PaymentDateRange, re *http.Request)) *Database_GetBountiesByDateRangeCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(*http.Request))
	})
	return _c
}

func (_c *Database_GetBountiesByDateRangeCount_Call) Return(_a0 int64) *Database_GetBountiesByDateRangeCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountiesByDateRangeCount_Call) RunAndReturn(run func(db.PaymentDateRange, *http.Request) int64) *Database_GetBountiesByDateRangeCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountiesByFeatureAndPhaseUuid provides a mock function with given fields: featureUuid, phaseUuid, r
func (_m *Database) GetBountiesByFeatureAndPhaseUuid(featureUuid string, phaseUuid string, r *http.Request) ([]db.NewBounty, error) {
	ret := _m.Called(featureUuid, phaseUuid, r)

	if len(ret) == 0 {
		panic("no return value specified for GetBountiesByFeatureAndPhaseUuid")
	}

	var r0 []db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *http.Request) ([]db.NewBounty, error)); ok {
		return rf(featureUuid, phaseUuid, r)
	}
	if rf, ok := ret.Get(0).(func(string, string, *http.Request) []db.NewBounty); ok {
		r0 = rf(featureUuid, phaseUuid, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewBounty)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *http.Request) error); ok {
		r1 = rf(featureUuid, phaseUuid, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetBountiesByFeatureAndPhaseUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountiesByFeatureAndPhaseUuid'
type Database_GetBountiesByFeatureAndPhaseUuid_Call struct {
	*mock.Call
}

// GetBountiesByFeatureAndPhaseUuid is a helper method to define mock.On call
//   - featureUuid string
//   - phaseUuid string
//   - r *http.Request
func (_e *Database_Expecter) GetBountiesByFeatureAndPhaseUuid(featureUuid interface{}, phaseUuid interface{}, r interface{}) *Database_GetBountiesByFeatureAndPhaseUuid_Call {
	return &Database_GetBountiesByFeatureAndPhaseUuid_Call{Call: _e.mock.On("GetBountiesByFeatureAndPhaseUuid", featureUuid, phaseUuid, r)}
}

func (_c *Database_GetBountiesByFeatureAndPhaseUuid_Call) Run(run func(featureUuid string, phaseUuid string, r *http.Request)) *Database_GetBountiesByFeatureAndPhaseUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*http.Request))
	})
	return _c
}

func (_c *Database_GetBountiesByFeatureAndPhaseUuid_Call) Return(_a0 []db.NewBounty, _a1 error) *Database_GetBountiesByFeatureAndPhaseUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetBountiesByFeatureAndPhaseUuid_Call) RunAndReturn(run func(string, string, *http.Request) ([]db.NewBounty, error)) *Database_GetBountiesByFeatureAndPhaseUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountiesByPhaseUuid provides a mock function with given fields: phaseUuid
func (_m *Database) GetBountiesByPhaseUuid(phaseUuid string) []db.Bounty {
	ret := _m.Called(phaseUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetBountiesByPhaseUuid")
	}

	var r0 []db.Bounty
	if rf, ok := ret.Get(0).(func(string) []db.Bounty); ok {
		r0 = rf(phaseUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	return r0
}

// Database_GetBountiesByPhaseUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountiesByPhaseUuid'
type Database_GetBountiesByPhaseUuid_Call struct {
	*mock.Call
}

// GetBountiesByPhaseUuid is a helper method to define mock.On call
//   - phaseUuid string
func (_e *Database_Expecter) GetBountiesByPhaseUuid(phaseUuid interface{}) *Database_GetBountiesByPhaseUuid_Call {
	return &Database_GetBountiesByPhaseUuid_Call{Call: _e.mock.On("GetBountiesByPhaseUuid", phaseUuid)}
}

func (_c *Database_GetBountiesByPhaseUuid_Call) Run(run func(phaseUuid string)) *Database_GetBountiesByPhaseUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBountiesByPhaseUuid_Call) Return(_a0 []db.Bounty) *Database_GetBountiesByPhaseUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountiesByPhaseUuid_Call) RunAndReturn(run func(string) []db.Bounty) *Database_GetBountiesByPhaseUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountiesCount provides a mock function with given fields: r
func (_m *Database) GetBountiesCount(r *http.Request) int64 {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetBountiesCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(*http.Request) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetBountiesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountiesCount'
type Database_GetBountiesCount_Call struct {
	*mock.Call
}

// GetBountiesCount is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetBountiesCount(r interface{}) *Database_GetBountiesCount_Call {
	return &Database_GetBountiesCount_Call{Call: _e.mock.On("GetBountiesCount", r)}
}

func (_c *Database_GetBountiesCount_Call) Run(run func(r *http.Request)) *Database_GetBountiesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetBountiesCount_Call) Return(_a0 int64) *Database_GetBountiesCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountiesCount_Call) RunAndReturn(run func(*http.Request) int64) *Database_GetBountiesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountiesCountByFeatureAndPhaseUuid provides a mock function with given fields: featureUuid, phaseUuid, r
func (_m *Database) GetBountiesCountByFeatureAndPhaseUuid(featureUuid string, phaseUuid string, r *http.Request) int64 {
	ret := _m.Called(featureUuid, phaseUuid, r)

	if len(ret) == 0 {
		panic("no return value specified for GetBountiesCountByFeatureAndPhaseUuid")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string, *http.Request) int64); ok {
		r0 = rf(featureUuid, phaseUuid, r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetBountiesCountByFeatureAndPhaseUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountiesCountByFeatureAndPhaseUuid'
type Database_GetBountiesCountByFeatureAndPhaseUuid_Call struct {
	*mock.Call
}

// GetBountiesCountByFeatureAndPhaseUuid is a helper method to define mock.On call
//   - featureUuid string
//   - phaseUuid string
//   - r *http.Request
func (_e *Database_Expecter) GetBountiesCountByFeatureAndPhaseUuid(featureUuid interface{}, phaseUuid interface{}, r interface{}) *Database_GetBountiesCountByFeatureAndPhaseUuid_Call {
	return &Database_GetBountiesCountByFeatureAndPhaseUuid_Call{Call: _e.mock.On("GetBountiesCountByFeatureAndPhaseUuid", featureUuid, phaseUuid, r)}
}

func (_c *Database_GetBountiesCountByFeatureAndPhaseUuid_Call) Run(run func(featureUuid string, phaseUuid string, r *http.Request)) *Database_GetBountiesCountByFeatureAndPhaseUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*http.Request))
	})
	return _c
}

func (_c *Database_GetBountiesCountByFeatureAndPhaseUuid_Call) Return(_a0 int64) *Database_GetBountiesCountByFeatureAndPhaseUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountiesCountByFeatureAndPhaseUuid_Call) RunAndReturn(run func(string, string, *http.Request) int64) *Database_GetBountiesCountByFeatureAndPhaseUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountiesLeaderboard provides a mock function with no fields
func (_m *Database) GetBountiesLeaderboard() []db.LeaderData {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBountiesLeaderboard")
	}

	var r0 []db.LeaderData
	if rf, ok := ret.Get(0).(func() []db.LeaderData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.LeaderData)
		}
	}

	return r0
}

// Database_GetBountiesLeaderboard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountiesLeaderboard'
type Database_GetBountiesLeaderboard_Call struct {
	*mock.Call
}

// GetBountiesLeaderboard is a helper method to define mock.On call
func (_e *Database_Expecter) GetBountiesLeaderboard() *Database_GetBountiesLeaderboard_Call {
	return &Database_GetBountiesLeaderboard_Call{Call: _e.mock.On("GetBountiesLeaderboard")}
}

func (_c *Database_GetBountiesLeaderboard_Call) Run(run func()) *Database_GetBountiesLeaderboard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetBountiesLeaderboard_Call) Return(_a0 []db.LeaderData) *Database_GetBountiesLeaderboard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountiesLeaderboard_Call) RunAndReturn(run func() []db.LeaderData) *Database_GetBountiesLeaderboard_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountiesProviders provides a mock function with given fields: r, re
func (_m *Database) GetBountiesProviders(r db.PaymentDateRange, re *http.Request) []db.Person {
	ret := _m.Called(r, re)

	if len(ret) == 0 {
		panic("no return value specified for GetBountiesProviders")
	}

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, *http.Request) []db.Person); ok {
		r0 = rf(r, re)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// Database_GetBountiesProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountiesProviders'
type Database_GetBountiesProviders_Call struct {
	*mock.Call
}

// GetBountiesProviders is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - re *http.Request
func (_e *Database_Expecter) GetBountiesProviders(r interface{}, re interface{}) *Database_GetBountiesProviders_Call {
	return &Database_GetBountiesProviders_Call{Call: _e.mock.On("GetBountiesProviders", r, re)}
}

func (_c *Database_GetBountiesProviders_Call) Run(run func(r db.PaymentDateRange, re *http.Request)) *Database_GetBountiesProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(*http.Request))
	})
	return _c
}

func (_c *Database_GetBountiesProviders_Call) Return(_a0 []db.Person) *Database_GetBountiesProviders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountiesProviders_Call) RunAndReturn(run func(db.PaymentDateRange, *http.Request) []db.Person) *Database_GetBountiesProviders_Call {
	_c.Call.Return(run)
	return _c
}

// GetBounty provides a mock function with given fields: id
func (_m *Database) GetBounty(id uint) db.NewBounty {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBounty")
	}

	var r0 db.NewBounty
	if rf, ok := ret.Get(0).(func(uint) db.NewBounty); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(db.NewBounty)
	}

	return r0
}

// Database_GetBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBounty'
type Database_GetBounty_Call struct {
	*mock.Call
}

// GetBounty is a helper method to define mock.On call
//   - id uint
func (_e *Database_Expecter) GetBounty(id interface{}) *Database_GetBounty_Call {
	return &Database_GetBounty_Call{Call: _e.mock.On("GetBounty", id)}
}

func (_c *Database_GetBounty_Call) Run(run func(id uint)) *Database_GetBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_GetBounty_Call) Return(_a0 db.NewBounty) *Database_GetBounty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBounty_Call) RunAndReturn(run func(uint) db.NewBounty) *Database_GetBounty_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountyByCreated provides a mock function with given fields: created
func (_m *Database) GetBountyByCreated(created uint) (db.NewBounty, error) {
	ret := _m.Called(created)

	if len(ret) == 0 {
		panic("no return value specified for GetBountyByCreated")
	}

	var r0 db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (db.NewBounty, error)); ok {
		return rf(created)
	}
	if rf, ok := ret.Get(0).(func(uint) db.NewBounty); ok {
		r0 = rf(created)
	} else {
		r0 = ret.Get(0).(db.NewBounty)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetBountyByCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountyByCreated'
type Database_GetBountyByCreated_Call struct {
	*mock.Call
}

// GetBountyByCreated is a helper method to define mock.On call
//   - created uint
func (_e *Database_Expecter) GetBountyByCreated(created interface{}) *Database_GetBountyByCreated_Call {
	return &Database_GetBountyByCreated_Call{Call: _e.mock.On("GetBountyByCreated", created)}
}

func (_c *Database_GetBountyByCreated_Call) Run(run func(created uint)) *Database_GetBountyByCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_GetBountyByCreated_Call) Return(_a0 db.NewBounty, _a1 error) *Database_GetBountyByCreated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetBountyByCreated_Call) RunAndReturn(run func(uint) (db.NewBounty, error)) *Database_GetBountyByCreated_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountyById provides a mock function with given fields: id
func (_m *Database) GetBountyById(id string) ([]db.NewBounty, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBountyById")
	}

	var r0 []db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.NewBounty, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []db.NewBounty); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewBounty)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetBountyById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountyById'
type Database_GetBountyById_Call struct {
	*mock.Call
}

// GetBountyById is a helper method to define mock.On call
//   - id string
func (_e *Database_Expecter) GetBountyById(id interface{}) *Database_GetBountyById_Call {
	return &Database_GetBountyById_Call{Call: _e.mock.On("GetBountyById", id)}
}

func (_c *Database_GetBountyById_Call) Run(run func(id string)) *Database_GetBountyById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBountyById_Call) Return(_a0 []db.NewBounty, _a1 error) *Database_GetBountyById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetBountyById_Call) RunAndReturn(run func(string) ([]db.NewBounty, error)) *Database_GetBountyById_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountyDataByCreated provides a mock function with given fields: created
func (_m *Database) GetBountyDataByCreated(created string) ([]db.NewBounty, error) {
	ret := _m.Called(created)

	if len(ret) == 0 {
		panic("no return value specified for GetBountyDataByCreated")
	}

	var r0 []db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.NewBounty, error)); ok {
		return rf(created)
	}
	if rf, ok := ret.Get(0).(func(string) []db.NewBounty); ok {
		r0 = rf(created)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewBounty)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetBountyDataByCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountyDataByCreated'
type Database_GetBountyDataByCreated_Call struct {
	*mock.Call
}

// GetBountyDataByCreated is a helper method to define mock.On call
//   - created string
func (_e *Database_Expecter) GetBountyDataByCreated(created interface{}) *Database_GetBountyDataByCreated_Call {
	return &Database_GetBountyDataByCreated_Call{Call: _e.mock.On("GetBountyDataByCreated", created)}
}

func (_c *Database_GetBountyDataByCreated_Call) Run(run func(created string)) *Database_GetBountyDataByCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBountyDataByCreated_Call) Return(_a0 []db.NewBounty, _a1 error) *Database_GetBountyDataByCreated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetBountyDataByCreated_Call) RunAndReturn(run func(string) ([]db.NewBounty, error)) *Database_GetBountyDataByCreated_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountyIndexById provides a mock function with given fields: id
func (_m *Database) GetBountyIndexById(id string) int64 {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBountyIndexById")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetBountyIndexById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountyIndexById'
type Database_GetBountyIndexById_Call struct {
	*mock.Call
}

// GetBountyIndexById is a helper method to define mock.On call
//   - id string
func (_e *Database_Expecter) GetBountyIndexById(id interface{}) *Database_GetBountyIndexById_Call {
	return &Database_GetBountyIndexById_Call{Call: _e.mock.On("GetBountyIndexById", id)}
}

func (_c *Database_GetBountyIndexById_Call) Run(run func(id string)) *Database_GetBountyIndexById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetBountyIndexById_Call) Return(_a0 int64) *Database_GetBountyIndexById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountyIndexById_Call) RunAndReturn(run func(string) int64) *Database_GetBountyIndexById_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountyRoles provides a mock function with no fields
func (_m *Database) GetBountyRoles() []db.BountyRoles {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBountyRoles")
	}

	var r0 []db.BountyRoles
	if rf, ok := ret.Get(0).(func() []db.BountyRoles); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BountyRoles)
		}
	}

	return r0
}

// Database_GetBountyRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountyRoles'
type Database_GetBountyRoles_Call struct {
	*mock.Call
}

// GetBountyRoles is a helper method to define mock.On call
func (_e *Database_Expecter) GetBountyRoles() *Database_GetBountyRoles_Call {
	return &Database_GetBountyRoles_Call{Call: _e.mock.On("GetBountyRoles")}
}

func (_c *Database_GetBountyRoles_Call) Run(run func()) *Database_GetBountyRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetBountyRoles_Call) Return(_a0 []db.BountyRoles) *Database_GetBountyRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetBountyRoles_Call) RunAndReturn(run func() []db.BountyRoles) *Database_GetBountyRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetBountyTiming provides a mock function with given fields: bountyID
func (_m *Database) GetBountyTiming(bountyID uint) (*db.BountyTiming, error) {
	ret := _m.Called(bountyID)

	if len(ret) == 0 {
		panic("no return value specified for GetBountyTiming")
	}

	var r0 *db.BountyTiming
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*db.BountyTiming, error)); ok {
		return rf(bountyID)
	}
	if rf, ok := ret.Get(0).(func(uint) *db.BountyTiming); ok {
		r0 = rf(bountyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.BountyTiming)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(bountyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetBountyTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBountyTiming'
type Database_GetBountyTiming_Call struct {
	*mock.Call
}

// GetBountyTiming is a helper method to define mock.On call
//   - bountyID uint
func (_e *Database_Expecter) GetBountyTiming(bountyID interface{}) *Database_GetBountyTiming_Call {
	return &Database_GetBountyTiming_Call{Call: _e.mock.On("GetBountyTiming", bountyID)}
}

func (_c *Database_GetBountyTiming_Call) Run(run func(bountyID uint)) *Database_GetBountyTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_GetBountyTiming_Call) Return(_a0 *db.BountyTiming, _a1 error) *Database_GetBountyTiming_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetBountyTiming_Call) RunAndReturn(run func(uint) (*db.BountyTiming, error)) *Database_GetBountyTiming_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannel provides a mock function with given fields: id
func (_m *Database) GetChannel(id uint) db.Channel {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetChannel")
	}

	var r0 db.Channel
	if rf, ok := ret.Get(0).(func(uint) db.Channel); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(db.Channel)
	}

	return r0
}

// Database_GetChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannel'
type Database_GetChannel_Call struct {
	*mock.Call
}

// GetChannel is a helper method to define mock.On call
//   - id uint
func (_e *Database_Expecter) GetChannel(id interface{}) *Database_GetChannel_Call {
	return &Database_GetChannel_Call{Call: _e.mock.On("GetChannel", id)}
}

func (_c *Database_GetChannel_Call) Run(run func(id uint)) *Database_GetChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_GetChannel_Call) Return(_a0 db.Channel) *Database_GetChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetChannel_Call) RunAndReturn(run func(uint) db.Channel) *Database_GetChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelsByTribe provides a mock function with given fields: tribe_uuid
func (_m *Database) GetChannelsByTribe(tribe_uuid string) []db.Channel {
	ret := _m.Called(tribe_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelsByTribe")
	}

	var r0 []db.Channel
	if rf, ok := ret.Get(0).(func(string) []db.Channel); ok {
		r0 = rf(tribe_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Channel)
		}
	}

	return r0
}

// Database_GetChannelsByTribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelsByTribe'
type Database_GetChannelsByTribe_Call struct {
	*mock.Call
}

// GetChannelsByTribe is a helper method to define mock.On call
//   - tribe_uuid string
func (_e *Database_Expecter) GetChannelsByTribe(tribe_uuid interface{}) *Database_GetChannelsByTribe_Call {
	return &Database_GetChannelsByTribe_Call{Call: _e.mock.On("GetChannelsByTribe", tribe_uuid)}
}

func (_c *Database_GetChannelsByTribe_Call) Run(run func(tribe_uuid string)) *Database_GetChannelsByTribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetChannelsByTribe_Call) Return(_a0 []db.Channel) *Database_GetChannelsByTribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetChannelsByTribe_Call) RunAndReturn(run func(string) []db.Channel) *Database_GetChannelsByTribe_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatByChatID provides a mock function with given fields: chatID
func (_m *Database) GetChatByChatID(chatID string) (db.Chat, error) {
	ret := _m.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatByChatID")
	}

	var r0 db.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (db.Chat, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(string) db.Chat); ok {
		r0 = rf(chatID)
	} else {
		r0 = ret.Get(0).(db.Chat)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetChatByChatID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatByChatID'
type Database_GetChatByChatID_Call struct {
	*mock.Call
}

// GetChatByChatID is a helper method to define mock.On call
//   - chatID string
func (_e *Database_Expecter) GetChatByChatID(chatID interface{}) *Database_GetChatByChatID_Call {
	return &Database_GetChatByChatID_Call{Call: _e.mock.On("GetChatByChatID", chatID)}
}

func (_c *Database_GetChatByChatID_Call) Run(run func(chatID string)) *Database_GetChatByChatID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetChatByChatID_Call) Return(_a0 db.Chat, _a1 error) *Database_GetChatByChatID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetChatByChatID_Call) RunAndReturn(run func(string) (db.Chat, error)) *Database_GetChatByChatID_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatMessagesForChatID provides a mock function with given fields: chatID
func (_m *Database) GetChatMessagesForChatID(chatID string) ([]db.ChatMessage, error) {
	ret := _m.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatMessagesForChatID")
	}

	var r0 []db.ChatMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.ChatMessage, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(string) []db.ChatMessage); ok {
		r0 = rf(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.ChatMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetChatMessagesForChatID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatMessagesForChatID'
type Database_GetChatMessagesForChatID_Call struct {
	*mock.Call
}

// GetChatMessagesForChatID is a helper method to define mock.On call
//   - chatID string
func (_e *Database_Expecter) GetChatMessagesForChatID(chatID interface{}) *Database_GetChatMessagesForChatID_Call {
	return &Database_GetChatMessagesForChatID_Call{Call: _e.mock.On("GetChatMessagesForChatID", chatID)}
}

func (_c *Database_GetChatMessagesForChatID_Call) Run(run func(chatID string)) *Database_GetChatMessagesForChatID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetChatMessagesForChatID_Call) Return(_a0 []db.ChatMessage, _a1 error) *Database_GetChatMessagesForChatID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetChatMessagesForChatID_Call) RunAndReturn(run func(string) ([]db.ChatMessage, error)) *Database_GetChatMessagesForChatID_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatsForWorkspace provides a mock function with given fields: workspaceID, chatStatus
func (_m *Database) GetChatsForWorkspace(workspaceID string, chatStatus string) ([]db.Chat, error) {
	ret := _m.Called(workspaceID, chatStatus)

	if len(ret) == 0 {
		panic("no return value specified for GetChatsForWorkspace")
	}

	var r0 []db.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]db.Chat, error)); ok {
		return rf(workspaceID, chatStatus)
	}
	if rf, ok := ret.Get(0).(func(string, string) []db.Chat); ok {
		r0 = rf(workspaceID, chatStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(workspaceID, chatStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetChatsForWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatsForWorkspace'
type Database_GetChatsForWorkspace_Call struct {
	*mock.Call
}

// GetChatsForWorkspace is a helper method to define mock.On call
//   - workspaceID string
//   - chatStatus string
func (_e *Database_Expecter) GetChatsForWorkspace(workspaceID interface{}, chatStatus interface{}) *Database_GetChatsForWorkspace_Call {
	return &Database_GetChatsForWorkspace_Call{Call: _e.mock.On("GetChatsForWorkspace", workspaceID, chatStatus)}
}

func (_c *Database_GetChatsForWorkspace_Call) Run(run func(workspaceID string, chatStatus string)) *Database_GetChatsForWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetChatsForWorkspace_Call) Return(_a0 []db.Chat, _a1 error) *Database_GetChatsForWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetChatsForWorkspace_Call) RunAndReturn(run func(string, string) ([]db.Chat, error)) *Database_GetChatsForWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeGraphByUUID provides a mock function with given fields: _a0
func (_m *Database) GetCodeGraphByUUID(_a0 string) (db.WorkspaceCodeGraph, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeGraphByUUID")
	}

	var r0 db.WorkspaceCodeGraph
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (db.WorkspaceCodeGraph, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) db.WorkspaceCodeGraph); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.WorkspaceCodeGraph)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetCodeGraphByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeGraphByUUID'
type Database_GetCodeGraphByUUID_Call struct {
	*mock.Call
}

// GetCodeGraphByUUID is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetCodeGraphByUUID(_a0 interface{}) *Database_GetCodeGraphByUUID_Call {
	return &Database_GetCodeGraphByUUID_Call{Call: _e.mock.On("GetCodeGraphByUUID", _a0)}
}

func (_c *Database_GetCodeGraphByUUID_Call) Run(run func(_a0 string)) *Database_GetCodeGraphByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetCodeGraphByUUID_Call) Return(_a0 db.WorkspaceCodeGraph, _a1 error) *Database_GetCodeGraphByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetCodeGraphByUUID_Call) RunAndReturn(run func(string) (db.WorkspaceCodeGraph, error)) *Database_GetCodeGraphByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeGraphsByWorkspaceUuid provides a mock function with given fields: workspace_uuid
func (_m *Database) GetCodeGraphsByWorkspaceUuid(workspace_uuid string) ([]db.WorkspaceCodeGraph, error) {
	ret := _m.Called(workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeGraphsByWorkspaceUuid")
	}

	var r0 []db.WorkspaceCodeGraph
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.WorkspaceCodeGraph, error)); ok {
		return rf(workspace_uuid)
	}
	if rf, ok := ret.Get(0).(func(string) []db.WorkspaceCodeGraph); ok {
		r0 = rf(workspace_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WorkspaceCodeGraph)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(workspace_uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetCodeGraphsByWorkspaceUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeGraphsByWorkspaceUuid'
type Database_GetCodeGraphsByWorkspaceUuid_Call struct {
	*mock.Call
}

// GetCodeGraphsByWorkspaceUuid is a helper method to define mock.On call
//   - workspace_uuid string
func (_e *Database_Expecter) GetCodeGraphsByWorkspaceUuid(workspace_uuid interface{}) *Database_GetCodeGraphsByWorkspaceUuid_Call {
	return &Database_GetCodeGraphsByWorkspaceUuid_Call{Call: _e.mock.On("GetCodeGraphsByWorkspaceUuid", workspace_uuid)}
}

func (_c *Database_GetCodeGraphsByWorkspaceUuid_Call) Run(run func(workspace_uuid string)) *Database_GetCodeGraphsByWorkspaceUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetCodeGraphsByWorkspaceUuid_Call) Return(_a0 []db.WorkspaceCodeGraph, _a1 error) *Database_GetCodeGraphsByWorkspaceUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetCodeGraphsByWorkspaceUuid_Call) RunAndReturn(run func(string) ([]db.WorkspaceCodeGraph, error)) *Database_GetCodeGraphsByWorkspaceUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionCode provides a mock function with no fields
func (_m *Database) GetConnectionCode() db.ConnectionCodesShort {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionCode")
	}

	var r0 db.ConnectionCodesShort
	if rf, ok := ret.Get(0).(func() db.ConnectionCodesShort); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(db.ConnectionCodesShort)
	}

	return r0
}

// Database_GetConnectionCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionCode'
type Database_GetConnectionCode_Call struct {
	*mock.Call
}

// GetConnectionCode is a helper method to define mock.On call
func (_e *Database_Expecter) GetConnectionCode() *Database_GetConnectionCode_Call {
	return &Database_GetConnectionCode_Call{Call: _e.mock.On("GetConnectionCode")}
}

func (_c *Database_GetConnectionCode_Call) Run(run func()) *Database_GetConnectionCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetConnectionCode_Call) Return(_a0 db.ConnectionCodesShort) *Database_GetConnectionCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetConnectionCode_Call) RunAndReturn(run func() db.ConnectionCodesShort) *Database_GetConnectionCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatedBounties provides a mock function with given fields: r
func (_m *Database) GetCreatedBounties(r *http.Request) ([]db.NewBounty, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatedBounties")
	}

	var r0 []db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]db.NewBounty, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []db.NewBounty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewBounty)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetCreatedBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatedBounties'
type Database_GetCreatedBounties_Call struct {
	*mock.Call
}

// GetCreatedBounties is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetCreatedBounties(r interface{}) *Database_GetCreatedBounties_Call {
	return &Database_GetCreatedBounties_Call{Call: _e.mock.On("GetCreatedBounties", r)}
}

func (_c *Database_GetCreatedBounties_Call) Run(run func(r *http.Request)) *Database_GetCreatedBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetCreatedBounties_Call) Return(_a0 []db.NewBounty, _a1 error) *Database_GetCreatedBounties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetCreatedBounties_Call) RunAndReturn(run func(*http.Request) ([]db.NewBounty, error)) *Database_GetCreatedBounties_Call {
	_c.Call.Return(run)
	return _c
}

// GetEndpointByPath provides a mock function with given fields: path
func (_m *Database) GetEndpointByPath(path string) (db.Endpoint, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetEndpointByPath")
	}

	var r0 db.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (db.Endpoint, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) db.Endpoint); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(db.Endpoint)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetEndpointByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEndpointByPath'
type Database_GetEndpointByPath_Call struct {
	*mock.Call
}

// GetEndpointByPath is a helper method to define mock.On call
//   - path string
func (_e *Database_Expecter) GetEndpointByPath(path interface{}) *Database_GetEndpointByPath_Call {
	return &Database_GetEndpointByPath_Call{Call: _e.mock.On("GetEndpointByPath", path)}
}

func (_c *Database_GetEndpointByPath_Call) Run(run func(path string)) *Database_GetEndpointByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetEndpointByPath_Call) Return(_a0 db.Endpoint, _a1 error) *Database_GetEndpointByPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetEndpointByPath_Call) RunAndReturn(run func(string) (db.Endpoint, error)) *Database_GetEndpointByPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetEndpointByUUID provides a mock function with given fields: _a0
func (_m *Database) GetEndpointByUUID(_a0 uuid.UUID) (db.Endpoint, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetEndpointByUUID")
	}

	var r0 db.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (db.Endpoint, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) db.Endpoint); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.Endpoint)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetEndpointByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEndpointByUUID'
type Database_GetEndpointByUUID_Call struct {
	*mock.Call
}

// GetEndpointByUUID is a helper method to define mock.On call
//   - _a0 uuid.UUID
func (_e *Database_Expecter) GetEndpointByUUID(_a0 interface{}) *Database_GetEndpointByUUID_Call {
	return &Database_GetEndpointByUUID_Call{Call: _e.mock.On("GetEndpointByUUID", _a0)}
}

func (_c *Database_GetEndpointByUUID_Call) Run(run func(_a0 uuid.UUID)) *Database_GetEndpointByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Database_GetEndpointByUUID_Call) Return(_a0 db.Endpoint, _a1 error) *Database_GetEndpointByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetEndpointByUUID_Call) RunAndReturn(run func(uuid.UUID) (db.Endpoint, error)) *Database_GetEndpointByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEndpointsByFeatureFlag provides a mock function with given fields: flagUUID
func (_m *Database) GetEndpointsByFeatureFlag(flagUUID uuid.UUID) ([]db.Endpoint, error) {
	ret := _m.Called(flagUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetEndpointsByFeatureFlag")
	}

	var r0 []db.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]db.Endpoint, error)); ok {
		return rf(flagUUID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Endpoint); ok {
		r0 = rf(flagUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Endpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(flagUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetEndpointsByFeatureFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEndpointsByFeatureFlag'
type Database_GetEndpointsByFeatureFlag_Call struct {
	*mock.Call
}

// GetEndpointsByFeatureFlag is a helper method to define mock.On call
//   - flagUUID uuid.UUID
func (_e *Database_Expecter) GetEndpointsByFeatureFlag(flagUUID interface{}) *Database_GetEndpointsByFeatureFlag_Call {
	return &Database_GetEndpointsByFeatureFlag_Call{Call: _e.mock.On("GetEndpointsByFeatureFlag", flagUUID)}
}

func (_c *Database_GetEndpointsByFeatureFlag_Call) Run(run func(flagUUID uuid.UUID)) *Database_GetEndpointsByFeatureFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Database_GetEndpointsByFeatureFlag_Call) Return(_a0 []db.Endpoint, _a1 error) *Database_GetEndpointsByFeatureFlag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetEndpointsByFeatureFlag_Call) RunAndReturn(run func(uuid.UUID) ([]db.Endpoint, error)) *Database_GetEndpointsByFeatureFlag_Call {
	_c.Call.Return(run)
	return _c
}

// GetFailedNotifications provides a mock function with given fields: maxRetries
func (_m *Database) GetFailedNotifications(maxRetries int) ([]db.Notification, error) {
	ret := _m.Called(maxRetries)

	if len(ret) == 0 {
		panic("no return value specified for GetFailedNotifications")
	}

	var r0 []db.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]db.Notification, error)); ok {
		return rf(maxRetries)
	}
	if rf, ok := ret.Get(0).(func(int) []db.Notification); ok {
		r0 = rf(maxRetries)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(maxRetries)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetFailedNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFailedNotifications'
type Database_GetFailedNotifications_Call struct {
	*mock.Call
}

// GetFailedNotifications is a helper method to define mock.On call
//   - maxRetries int
func (_e *Database_Expecter) GetFailedNotifications(maxRetries interface{}) *Database_GetFailedNotifications_Call {
	return &Database_GetFailedNotifications_Call{Call: _e.mock.On("GetFailedNotifications", maxRetries)}
}

func (_c *Database_GetFailedNotifications_Call) Run(run func(maxRetries int)) *Database_GetFailedNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Database_GetFailedNotifications_Call) Return(_a0 []db.Notification, _a1 error) *Database_GetFailedNotifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetFailedNotifications_Call) RunAndReturn(run func(int) ([]db.Notification, error)) *Database_GetFailedNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureBrief provides a mock function with given fields: featureUuid
func (_m *Database) GetFeatureBrief(featureUuid string) (string, error) {
	ret := _m.Called(featureUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureBrief")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(featureUuid)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(featureUuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(featureUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetFeatureBrief_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureBrief'
type Database_GetFeatureBrief_Call struct {
	*mock.Call
}

// GetFeatureBrief is a helper method to define mock.On call
//   - featureUuid string
func (_e *Database_Expecter) GetFeatureBrief(featureUuid interface{}) *Database_GetFeatureBrief_Call {
	return &Database_GetFeatureBrief_Call{Call: _e.mock.On("GetFeatureBrief", featureUuid)}
}

func (_c *Database_GetFeatureBrief_Call) Run(run func(featureUuid string)) *Database_GetFeatureBrief_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetFeatureBrief_Call) Return(_a0 string, _a1 error) *Database_GetFeatureBrief_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetFeatureBrief_Call) RunAndReturn(run func(string) (string, error)) *Database_GetFeatureBrief_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureByUuid provides a mock function with given fields: _a0
func (_m *Database) GetFeatureByUuid(_a0 string) db.WorkspaceFeatures {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureByUuid")
	}

	var r0 db.WorkspaceFeatures
	if rf, ok := ret.Get(0).(func(string) db.WorkspaceFeatures); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.WorkspaceFeatures)
	}

	return r0
}

// Database_GetFeatureByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureByUuid'
type Database_GetFeatureByUuid_Call struct {
	*mock.Call
}

// GetFeatureByUuid is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetFeatureByUuid(_a0 interface{}) *Database_GetFeatureByUuid_Call {
	return &Database_GetFeatureByUuid_Call{Call: _e.mock.On("GetFeatureByUuid", _a0)}
}

func (_c *Database_GetFeatureByUuid_Call) Run(run func(_a0 string)) *Database_GetFeatureByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetFeatureByUuid_Call) Return(_a0 db.WorkspaceFeatures) *Database_GetFeatureByUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetFeatureByUuid_Call) RunAndReturn(run func(string) db.WorkspaceFeatures) *Database_GetFeatureByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureFlagByUUID provides a mock function with given fields: flagUUID
func (_m *Database) GetFeatureFlagByUUID(flagUUID uuid.UUID) (db.FeatureFlag, error) {
	ret := _m.Called(flagUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureFlagByUUID")
	}

	var r0 db.FeatureFlag
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (db.FeatureFlag, error)); ok {
		return rf(flagUUID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) db.FeatureFlag); ok {
		r0 = rf(flagUUID)
	} else {
		r0 = ret.Get(0).(db.FeatureFlag)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(flagUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetFeatureFlagByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureFlagByUUID'
type Database_GetFeatureFlagByUUID_Call struct {
	*mock.Call
}

// GetFeatureFlagByUUID is a helper method to define mock.On call
//   - flagUUID uuid.UUID
func (_e *Database_Expecter) GetFeatureFlagByUUID(flagUUID interface{}) *Database_GetFeatureFlagByUUID_Call {
	return &Database_GetFeatureFlagByUUID_Call{Call: _e.mock.On("GetFeatureFlagByUUID", flagUUID)}
}

func (_c *Database_GetFeatureFlagByUUID_Call) Run(run func(flagUUID uuid.UUID)) *Database_GetFeatureFlagByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Database_GetFeatureFlagByUUID_Call) Return(_a0 db.FeatureFlag, _a1 error) *Database_GetFeatureFlagByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetFeatureFlagByUUID_Call) RunAndReturn(run func(uuid.UUID) (db.FeatureFlag, error)) *Database_GetFeatureFlagByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureFlags provides a mock function with no fields
func (_m *Database) GetFeatureFlags() ([]db.FeatureFlag, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureFlags")
	}

	var r0 []db.FeatureFlag
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.FeatureFlag, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.FeatureFlag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.FeatureFlag)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetFeatureFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureFlags'
type Database_GetFeatureFlags_Call struct {
	*mock.Call
}

// GetFeatureFlags is a helper method to define mock.On call
func (_e *Database_Expecter) GetFeatureFlags() *Database_GetFeatureFlags_Call {
	return &Database_GetFeatureFlags_Call{Call: _e.mock.On("GetFeatureFlags")}
}

func (_c *Database_GetFeatureFlags_Call) Run(run func()) *Database_GetFeatureFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetFeatureFlags_Call) Return(_a0 []db.FeatureFlag, _a1 error) *Database_GetFeatureFlags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetFeatureFlags_Call) RunAndReturn(run func() ([]db.FeatureFlag, error)) *Database_GetFeatureFlags_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeaturePhaseByUuid provides a mock function with given fields: featureUuid, phaseUuid
func (_m *Database) GetFeaturePhaseByUuid(featureUuid string, phaseUuid string) (db.FeaturePhase, error) {
	ret := _m.Called(featureUuid, phaseUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetFeaturePhaseByUuid")
	}

	var r0 db.FeaturePhase
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (db.FeaturePhase, error)); ok {
		return rf(featureUuid, phaseUuid)
	}
	if rf, ok := ret.Get(0).(func(string, string) db.FeaturePhase); ok {
		r0 = rf(featureUuid, phaseUuid)
	} else {
		r0 = ret.Get(0).(db.FeaturePhase)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(featureUuid, phaseUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetFeaturePhaseByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeaturePhaseByUuid'
type Database_GetFeaturePhaseByUuid_Call struct {
	*mock.Call
}

// GetFeaturePhaseByUuid is a helper method to define mock.On call
//   - featureUuid string
//   - phaseUuid string
func (_e *Database_Expecter) GetFeaturePhaseByUuid(featureUuid interface{}, phaseUuid interface{}) *Database_GetFeaturePhaseByUuid_Call {
	return &Database_GetFeaturePhaseByUuid_Call{Call: _e.mock.On("GetFeaturePhaseByUuid", featureUuid, phaseUuid)}
}

func (_c *Database_GetFeaturePhaseByUuid_Call) Run(run func(featureUuid string, phaseUuid string)) *Database_GetFeaturePhaseByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetFeaturePhaseByUuid_Call) Return(_a0 db.FeaturePhase, _a1 error) *Database_GetFeaturePhaseByUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetFeaturePhaseByUuid_Call) RunAndReturn(run func(string, string) (db.FeaturePhase, error)) *Database_GetFeaturePhaseByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeaturePhasesBountiesCount provides a mock function with given fields: bountyType, phaseUuid
func (_m *Database) GetFeaturePhasesBountiesCount(bountyType string, phaseUuid string) int64 {
	ret := _m.Called(bountyType, phaseUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetFeaturePhasesBountiesCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(bountyType, phaseUuid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetFeaturePhasesBountiesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeaturePhasesBountiesCount'
type Database_GetFeaturePhasesBountiesCount_Call struct {
	*mock.Call
}

// GetFeaturePhasesBountiesCount is a helper method to define mock.On call
//   - bountyType string
//   - phaseUuid string
func (_e *Database_Expecter) GetFeaturePhasesBountiesCount(bountyType interface{}, phaseUuid interface{}) *Database_GetFeaturePhasesBountiesCount_Call {
	return &Database_GetFeaturePhasesBountiesCount_Call{Call: _e.mock.On("GetFeaturePhasesBountiesCount", bountyType, phaseUuid)}
}

func (_c *Database_GetFeaturePhasesBountiesCount_Call) Run(run func(bountyType string, phaseUuid string)) *Database_GetFeaturePhasesBountiesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetFeaturePhasesBountiesCount_Call) Return(_a0 int64) *Database_GetFeaturePhasesBountiesCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetFeaturePhasesBountiesCount_Call) RunAndReturn(run func(string, string) int64) *Database_GetFeaturePhasesBountiesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureStoriesByFeatureUuid provides a mock function with given fields: featureUuid
func (_m *Database) GetFeatureStoriesByFeatureUuid(featureUuid string) ([]db.FeatureStory, error) {
	ret := _m.Called(featureUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureStoriesByFeatureUuid")
	}

	var r0 []db.FeatureStory
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.FeatureStory, error)); ok {
		return rf(featureUuid)
	}
	if rf, ok := ret.Get(0).(func(string) []db.FeatureStory); ok {
		r0 = rf(featureUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.FeatureStory)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(featureUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetFeatureStoriesByFeatureUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureStoriesByFeatureUuid'
type Database_GetFeatureStoriesByFeatureUuid_Call struct {
	*mock.Call
}

// GetFeatureStoriesByFeatureUuid is a helper method to define mock.On call
//   - featureUuid string
func (_e *Database_Expecter) GetFeatureStoriesByFeatureUuid(featureUuid interface{}) *Database_GetFeatureStoriesByFeatureUuid_Call {
	return &Database_GetFeatureStoriesByFeatureUuid_Call{Call: _e.mock.On("GetFeatureStoriesByFeatureUuid", featureUuid)}
}

func (_c *Database_GetFeatureStoriesByFeatureUuid_Call) Run(run func(featureUuid string)) *Database_GetFeatureStoriesByFeatureUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetFeatureStoriesByFeatureUuid_Call) Return(_a0 []db.FeatureStory, _a1 error) *Database_GetFeatureStoriesByFeatureUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetFeatureStoriesByFeatureUuid_Call) RunAndReturn(run func(string) ([]db.FeatureStory, error)) *Database_GetFeatureStoriesByFeatureUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureStoryByUuid provides a mock function with given fields: featureUuid, storyUuid
func (_m *Database) GetFeatureStoryByUuid(featureUuid string, storyUuid string) (db.FeatureStory, error) {
	ret := _m.Called(featureUuid, storyUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureStoryByUuid")
	}

	var r0 db.FeatureStory
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (db.FeatureStory, error)); ok {
		return rf(featureUuid, storyUuid)
	}
	if rf, ok := ret.Get(0).(func(string, string) db.FeatureStory); ok {
		r0 = rf(featureUuid, storyUuid)
	} else {
		r0 = ret.Get(0).(db.FeatureStory)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(featureUuid, storyUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetFeatureStoryByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureStoryByUuid'
type Database_GetFeatureStoryByUuid_Call struct {
	*mock.Call
}

// GetFeatureStoryByUuid is a helper method to define mock.On call
//   - featureUuid string
//   - storyUuid string
func (_e *Database_Expecter) GetFeatureStoryByUuid(featureUuid interface{}, storyUuid interface{}) *Database_GetFeatureStoryByUuid_Call {
	return &Database_GetFeatureStoryByUuid_Call{Call: _e.mock.On("GetFeatureStoryByUuid", featureUuid, storyUuid)}
}

func (_c *Database_GetFeatureStoryByUuid_Call) Run(run func(featureUuid string, storyUuid string)) *Database_GetFeatureStoryByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetFeatureStoryByUuid_Call) Return(_a0 db.FeatureStory, _a1 error) *Database_GetFeatureStoryByUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetFeatureStoryByUuid_Call) RunAndReturn(run func(string, string) (db.FeatureStory, error)) *Database_GetFeatureStoryByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeaturedBountyById provides a mock function with given fields: id
func (_m *Database) GetFeaturedBountyById(id string) (db.FeaturedBounty, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetFeaturedBountyById")
	}

	var r0 db.FeaturedBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (db.FeaturedBounty, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) db.FeaturedBounty); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(db.FeaturedBounty)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetFeaturedBountyById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeaturedBountyById'
type Database_GetFeaturedBountyById_Call struct {
	*mock.Call
}

// GetFeaturedBountyById is a helper method to define mock.On call
//   - id string
func (_e *Database_Expecter) GetFeaturedBountyById(id interface{}) *Database_GetFeaturedBountyById_Call {
	return &Database_GetFeaturedBountyById_Call{Call: _e.mock.On("GetFeaturedBountyById", id)}
}

func (_c *Database_GetFeaturedBountyById_Call) Run(run func(id string)) *Database_GetFeaturedBountyById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetFeaturedBountyById_Call) Return(_a0 db.FeaturedBounty, _a1 error) *Database_GetFeaturedBountyById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetFeaturedBountyById_Call) RunAndReturn(run func(string) (db.FeaturedBounty, error)) *Database_GetFeaturedBountyById_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeaturesByWorkspaceUuid provides a mock function with given fields: _a0, r
func (_m *Database) GetFeaturesByWorkspaceUuid(_a0 string, r *http.Request) []db.WorkspaceFeatures {
	ret := _m.Called(_a0, r)

	if len(ret) == 0 {
		panic("no return value specified for GetFeaturesByWorkspaceUuid")
	}

	var r0 []db.WorkspaceFeatures
	if rf, ok := ret.Get(0).(func(string, *http.Request) []db.WorkspaceFeatures); ok {
		r0 = rf(_a0, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WorkspaceFeatures)
		}
	}

	return r0
}

// Database_GetFeaturesByWorkspaceUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeaturesByWorkspaceUuid'
type Database_GetFeaturesByWorkspaceUuid_Call struct {
	*mock.Call
}

// GetFeaturesByWorkspaceUuid is a helper method to define mock.On call
//   - _a0 string
//   - r *http.Request
func (_e *Database_Expecter) GetFeaturesByWorkspaceUuid(_a0 interface{}, r interface{}) *Database_GetFeaturesByWorkspaceUuid_Call {
	return &Database_GetFeaturesByWorkspaceUuid_Call{Call: _e.mock.On("GetFeaturesByWorkspaceUuid", _a0, r)}
}

func (_c *Database_GetFeaturesByWorkspaceUuid_Call) Run(run func(_a0 string, r *http.Request)) *Database_GetFeaturesByWorkspaceUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*http.Request))
	})
	return _c
}

func (_c *Database_GetFeaturesByWorkspaceUuid_Call) Return(_a0 []db.WorkspaceFeatures) *Database_GetFeaturesByWorkspaceUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetFeaturesByWorkspaceUuid_Call) RunAndReturn(run func(string, *http.Request) []db.WorkspaceFeatures) *Database_GetFeaturesByWorkspaceUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilterStatusCount provides a mock function with no fields
func (_m *Database) GetFilterStatusCount() db.FilterStattuCount {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFilterStatusCount")
	}

	var r0 db.FilterStattuCount
	if rf, ok := ret.Get(0).(func() db.FilterStattuCount); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(db.FilterStattuCount)
	}

	return r0
}

// Database_GetFilterStatusCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilterStatusCount'
type Database_GetFilterStatusCount_Call struct {
	*mock.Call
}

// GetFilterStatusCount is a helper method to define mock.On call
func (_e *Database_Expecter) GetFilterStatusCount() *Database_GetFilterStatusCount_Call {
	return &Database_GetFilterStatusCount_Call{Call: _e.mock.On("GetFilterStatusCount")}
}

func (_c *Database_GetFilterStatusCount_Call) Run(run func()) *Database_GetFilterStatusCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetFilterStatusCount_Call) Return(_a0 db.FilterStattuCount) *Database_GetFilterStatusCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetFilterStatusCount_Call) RunAndReturn(run func() db.FilterStattuCount) *Database_GetFilterStatusCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstTribeByFeedURL provides a mock function with given fields: feedURL
func (_m *Database) GetFirstTribeByFeedURL(feedURL string) db.Tribe {
	ret := _m.Called(feedURL)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstTribeByFeedURL")
	}

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string) db.Tribe); ok {
		r0 = rf(feedURL)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// Database_GetFirstTribeByFeedURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstTribeByFeedURL'
type Database_GetFirstTribeByFeedURL_Call struct {
	*mock.Call
}

// GetFirstTribeByFeedURL is a helper method to define mock.On call
//   - feedURL string
func (_e *Database_Expecter) GetFirstTribeByFeedURL(feedURL interface{}) *Database_GetFirstTribeByFeedURL_Call {
	return &Database_GetFirstTribeByFeedURL_Call{Call: _e.mock.On("GetFirstTribeByFeedURL", feedURL)}
}

func (_c *Database_GetFirstTribeByFeedURL_Call) Run(run func(feedURL string)) *Database_GetFirstTribeByFeedURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetFirstTribeByFeedURL_Call) Return(_a0 db.Tribe) *Database_GetFirstTribeByFeedURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetFirstTribeByFeedURL_Call) RunAndReturn(run func(string) db.Tribe) *Database_GetFirstTribeByFeedURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoice provides a mock function with given fields: payment_request
func (_m *Database) GetInvoice(payment_request string) db.NewInvoiceList {
	ret := _m.Called(payment_request)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoice")
	}

	var r0 db.NewInvoiceList
	if rf, ok := ret.Get(0).(func(string) db.NewInvoiceList); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.NewInvoiceList)
	}

	return r0
}

// Database_GetInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoice'
type Database_GetInvoice_Call struct {
	*mock.Call
}

// GetInvoice is a helper method to define mock.On call
//   - payment_request string
func (_e *Database_Expecter) GetInvoice(payment_request interface{}) *Database_GetInvoice_Call {
	return &Database_GetInvoice_Call{Call: _e.mock.On("GetInvoice", payment_request)}
}

func (_c *Database_GetInvoice_Call) Run(run func(payment_request string)) *Database_GetInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetInvoice_Call) Return(_a0 db.NewInvoiceList) *Database_GetInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetInvoice_Call) RunAndReturn(run func(string) db.NewInvoiceList) *Database_GetInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastWithdrawal provides a mock function with given fields: workspace_uuid
func (_m *Database) GetLastWithdrawal(workspace_uuid string) db.NewPaymentHistory {
	ret := _m.Called(workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetLastWithdrawal")
	}

	var r0 db.NewPaymentHistory
	if rf, ok := ret.Get(0).(func(string) db.NewPaymentHistory); ok {
		r0 = rf(workspace_uuid)
	} else {
		r0 = ret.Get(0).(db.NewPaymentHistory)
	}

	return r0
}

// Database_GetLastWithdrawal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastWithdrawal'
type Database_GetLastWithdrawal_Call struct {
	*mock.Call
}

// GetLastWithdrawal is a helper method to define mock.On call
//   - workspace_uuid string
func (_e *Database_Expecter) GetLastWithdrawal(workspace_uuid interface{}) *Database_GetLastWithdrawal_Call {
	return &Database_GetLastWithdrawal_Call{Call: _e.mock.On("GetLastWithdrawal", workspace_uuid)}
}

func (_c *Database_GetLastWithdrawal_Call) Run(run func(workspace_uuid string)) *Database_GetLastWithdrawal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetLastWithdrawal_Call) Return(_a0 db.NewPaymentHistory) *Database_GetLastWithdrawal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetLastWithdrawal_Call) RunAndReturn(run func(string) db.NewPaymentHistory) *Database_GetLastWithdrawal_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestTicketByGroup provides a mock function with given fields: ticketGroup
func (_m *Database) GetLatestTicketByGroup(ticketGroup uuid.UUID) (db.Tickets, error) {
	ret := _m.Called(ticketGroup)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestTicketByGroup")
	}

	var r0 db.Tickets
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (db.Tickets, error)); ok {
		return rf(ticketGroup)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) db.Tickets); ok {
		r0 = rf(ticketGroup)
	} else {
		r0 = ret.Get(0).(db.Tickets)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(ticketGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetLatestTicketByGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestTicketByGroup'
type Database_GetLatestTicketByGroup_Call struct {
	*mock.Call
}

// GetLatestTicketByGroup is a helper method to define mock.On call
//   - ticketGroup uuid.UUID
func (_e *Database_Expecter) GetLatestTicketByGroup(ticketGroup interface{}) *Database_GetLatestTicketByGroup_Call {
	return &Database_GetLatestTicketByGroup_Call{Call: _e.mock.On("GetLatestTicketByGroup", ticketGroup)}
}

func (_c *Database_GetLatestTicketByGroup_Call) Run(run func(ticketGroup uuid.UUID)) *Database_GetLatestTicketByGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *Database_GetLatestTicketByGroup_Call) Return(_a0 db.Tickets, _a1 error) *Database_GetLatestTicketByGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetLatestTicketByGroup_Call) RunAndReturn(run func(uuid.UUID) (db.Tickets, error)) *Database_GetLatestTicketByGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaderBoard provides a mock function with given fields: _a0
func (_m *Database) GetLeaderBoard(_a0 string) []db.LeaderBoard {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaderBoard")
	}

	var r0 []db.LeaderBoard
	if rf, ok := ret.Get(0).(func(string) []db.LeaderBoard); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.LeaderBoard)
		}
	}

	return r0
}

// Database_GetLeaderBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaderBoard'
type Database_GetLeaderBoard_Call struct {
	*mock.Call
}

// GetLeaderBoard is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetLeaderBoard(_a0 interface{}) *Database_GetLeaderBoard_Call {
	return &Database_GetLeaderBoard_Call{Call: _e.mock.On("GetLeaderBoard", _a0)}
}

func (_c *Database_GetLeaderBoard_Call) Run(run func(_a0 string)) *Database_GetLeaderBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetLeaderBoard_Call) Return(_a0 []db.LeaderBoard) *Database_GetLeaderBoard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetLeaderBoard_Call) RunAndReturn(run func(string) []db.LeaderBoard) *Database_GetLeaderBoard_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaderBoardByUuidAndAlias provides a mock function with given fields: _a0, alias
func (_m *Database) GetLeaderBoardByUuidAndAlias(_a0 string, alias string) db.LeaderBoard {
	ret := _m.Called(_a0, alias)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaderBoardByUuidAndAlias")
	}

	var r0 db.LeaderBoard
	if rf, ok := ret.Get(0).(func(string, string) db.LeaderBoard); ok {
		r0 = rf(_a0, alias)
	} else {
		r0 = ret.Get(0).(db.LeaderBoard)
	}

	return r0
}

// Database_GetLeaderBoardByUuidAndAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaderBoardByUuidAndAlias'
type Database_GetLeaderBoardByUuidAndAlias_Call struct {
	*mock.Call
}

// GetLeaderBoardByUuidAndAlias is a helper method to define mock.On call
//   - _a0 string
//   - alias string
func (_e *Database_Expecter) GetLeaderBoardByUuidAndAlias(_a0 interface{}, alias interface{}) *Database_GetLeaderBoardByUuidAndAlias_Call {
	return &Database_GetLeaderBoardByUuidAndAlias_Call{Call: _e.mock.On("GetLeaderBoardByUuidAndAlias", _a0, alias)}
}

func (_c *Database_GetLeaderBoardByUuidAndAlias_Call) Run(run func(_a0 string, alias string)) *Database_GetLeaderBoardByUuidAndAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetLeaderBoardByUuidAndAlias_Call) Return(_a0 db.LeaderBoard) *Database_GetLeaderBoardByUuidAndAlias_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetLeaderBoardByUuidAndAlias_Call) RunAndReturn(run func(string, string) db.LeaderBoard) *Database_GetLeaderBoardByUuidAndAlias_Call {
	_c.Call.Return(run)
	return _c
}

// GetListedBots provides a mock function with given fields: r
func (_m *Database) GetListedBots(r *http.Request) []db.Bot {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetListedBots")
	}

	var r0 []db.Bot
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Bot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bot)
		}
	}

	return r0
}

// Database_GetListedBots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListedBots'
type Database_GetListedBots_Call struct {
	*mock.Call
}

// GetListedBots is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetListedBots(r interface{}) *Database_GetListedBots_Call {
	return &Database_GetListedBots_Call{Call: _e.mock.On("GetListedBots", r)}
}

func (_c *Database_GetListedBots_Call) Run(run func(r *http.Request)) *Database_GetListedBots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetListedBots_Call) Return(_a0 []db.Bot) *Database_GetListedBots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetListedBots_Call) RunAndReturn(run func(*http.Request) []db.Bot) *Database_GetListedBots_Call {
	_c.Call.Return(run)
	return _c
}

// GetListedOffers provides a mock function with given fields: r
func (_m *Database) GetListedOffers(r *http.Request) ([]db.PeopleExtra, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetListedOffers")
	}

	var r0 []db.PeopleExtra
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]db.PeopleExtra, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []db.PeopleExtra); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.PeopleExtra)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetListedOffers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListedOffers'
type Database_GetListedOffers_Call struct {
	*mock.Call
}

// GetListedOffers is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetListedOffers(r interface{}) *Database_GetListedOffers_Call {
	return &Database_GetListedOffers_Call{Call: _e.mock.On("GetListedOffers", r)}
}

func (_c *Database_GetListedOffers_Call) Run(run func(r *http.Request)) *Database_GetListedOffers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetListedOffers_Call) Return(_a0 []db.PeopleExtra, _a1 error) *Database_GetListedOffers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetListedOffers_Call) RunAndReturn(run func(*http.Request) ([]db.PeopleExtra, error)) *Database_GetListedOffers_Call {
	_c.Call.Return(run)
	return _c
}

// GetListedPeople provides a mock function with given fields: r
func (_m *Database) GetListedPeople(r *http.Request) []db.Person {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetListedPeople")
	}

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Person); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// Database_GetListedPeople_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListedPeople'
type Database_GetListedPeople_Call struct {
	*mock.Call
}

// GetListedPeople is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetListedPeople(r interface{}) *Database_GetListedPeople_Call {
	return &Database_GetListedPeople_Call{Call: _e.mock.On("GetListedPeople", r)}
}

func (_c *Database_GetListedPeople_Call) Run(run func(r *http.Request)) *Database_GetListedPeople_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetListedPeople_Call) Return(_a0 []db.Person) *Database_GetListedPeople_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetListedPeople_Call) RunAndReturn(run func(*http.Request) []db.Person) *Database_GetListedPeople_Call {
	_c.Call.Return(run)
	return _c
}

// GetListedPosts provides a mock function with given fields: r
func (_m *Database) GetListedPosts(r *http.Request) ([]db.PeopleExtra, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetListedPosts")
	}

	var r0 []db.PeopleExtra
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]db.PeopleExtra, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []db.PeopleExtra); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.PeopleExtra)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetListedPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListedPosts'
type Database_GetListedPosts_Call struct {
	*mock.Call
}

// GetListedPosts is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetListedPosts(r interface{}) *Database_GetListedPosts_Call {
	return &Database_GetListedPosts_Call{Call: _e.mock.On("GetListedPosts", r)}
}

func (_c *Database_GetListedPosts_Call) Run(run func(r *http.Request)) *Database_GetListedPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetListedPosts_Call) Return(_a0 []db.PeopleExtra, _a1 error) *Database_GetListedPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetListedPosts_Call) RunAndReturn(run func(*http.Request) ([]db.PeopleExtra, error)) *Database_GetListedPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetListedTribes provides a mock function with given fields: r
func (_m *Database) GetListedTribes(r *http.Request) []db.Tribe {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetListedTribes")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Tribe); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_GetListedTribes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListedTribes'
type Database_GetListedTribes_Call struct {
	*mock.Call
}

// GetListedTribes is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetListedTribes(r interface{}) *Database_GetListedTribes_Call {
	return &Database_GetListedTribes_Call{Call: _e.mock.On("GetListedTribes", r)}
}

func (_c *Database_GetListedTribes_Call) Run(run func(r *http.Request)) *Database_GetListedTribes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetListedTribes_Call) Return(_a0 []db.Tribe) *Database_GetListedTribes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetListedTribes_Call) RunAndReturn(run func(*http.Request) []db.Tribe) *Database_GetListedTribes_Call {
	_c.Call.Return(run)
	return _c
}

// GetLnUser provides a mock function with given fields: lnKey
func (_m *Database) GetLnUser(lnKey string) int64 {
	ret := _m.Called(lnKey)

	if len(ret) == 0 {
		panic("no return value specified for GetLnUser")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(lnKey)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetLnUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLnUser'
type Database_GetLnUser_Call struct {
	*mock.Call
}

// GetLnUser is a helper method to define mock.On call
//   - lnKey string
func (_e *Database_Expecter) GetLnUser(lnKey interface{}) *Database_GetLnUser_Call {
	return &Database_GetLnUser_Call{Call: _e.mock.On("GetLnUser", lnKey)}
}

func (_c *Database_GetLnUser_Call) Run(run func(lnKey string)) *Database_GetLnUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetLnUser_Call) Return(_a0 int64) *Database_GetLnUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetLnUser_Call) RunAndReturn(run func(string) int64) *Database_GetLnUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewHunters provides a mock function with given fields: r
func (_m *Database) GetNewHunters(r db.PaymentDateRange) int64 {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetNewHunters")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetNewHunters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewHunters'
type Database_GetNewHunters_Call struct {
	*mock.Call
}

// GetNewHunters is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) GetNewHunters(r interface{}) *Database_GetNewHunters_Call {
	return &Database_GetNewHunters_Call{Call: _e.mock.On("GetNewHunters", r)}
}

func (_c *Database_GetNewHunters_Call) Run(run func(r db.PaymentDateRange)) *Database_GetNewHunters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_GetNewHunters_Call) Return(_a0 int64) *Database_GetNewHunters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetNewHunters_Call) RunAndReturn(run func(db.PaymentDateRange) int64) *Database_GetNewHunters_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextBountyByCreated provides a mock function with given fields: r
func (_m *Database) GetNextBountyByCreated(r *http.Request) (uint, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetNextBountyByCreated")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (uint, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) uint); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetNextBountyByCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextBountyByCreated'
type Database_GetNextBountyByCreated_Call struct {
	*mock.Call
}

// GetNextBountyByCreated is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetNextBountyByCreated(r interface{}) *Database_GetNextBountyByCreated_Call {
	return &Database_GetNextBountyByCreated_Call{Call: _e.mock.On("GetNextBountyByCreated", r)}
}

func (_c *Database_GetNextBountyByCreated_Call) Run(run func(r *http.Request)) *Database_GetNextBountyByCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetNextBountyByCreated_Call) Return(_a0 uint, _a1 error) *Database_GetNextBountyByCreated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetNextBountyByCreated_Call) RunAndReturn(run func(*http.Request) (uint, error)) *Database_GetNextBountyByCreated_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextWorkspaceBountyByCreated provides a mock function with given fields: r
func (_m *Database) GetNextWorkspaceBountyByCreated(r *http.Request) (uint, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetNextWorkspaceBountyByCreated")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (uint, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) uint); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetNextWorkspaceBountyByCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWorkspaceBountyByCreated'
type Database_GetNextWorkspaceBountyByCreated_Call struct {
	*mock.Call
}

// GetNextWorkspaceBountyByCreated is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetNextWorkspaceBountyByCreated(r interface{}) *Database_GetNextWorkspaceBountyByCreated_Call {
	return &Database_GetNextWorkspaceBountyByCreated_Call{Call: _e.mock.On("GetNextWorkspaceBountyByCreated", r)}
}

func (_c *Database_GetNextWorkspaceBountyByCreated_Call) Run(run func(r *http.Request)) *Database_GetNextWorkspaceBountyByCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetNextWorkspaceBountyByCreated_Call) Return(_a0 uint, _a1 error) *Database_GetNextWorkspaceBountyByCreated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetNextWorkspaceBountyByCreated_Call) RunAndReturn(run func(*http.Request) (uint, error)) *Database_GetNextWorkspaceBountyByCreated_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotification provides a mock function with given fields: _a0
func (_m *Database) GetNotification(_a0 string) (*db.Notification, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetNotification")
	}

	var r0 *db.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.Notification, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *db.Notification); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotification'
type Database_GetNotification_Call struct {
	*mock.Call
}

// GetNotification is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetNotification(_a0 interface{}) *Database_GetNotification_Call {
	return &Database_GetNotification_Call{Call: _e.mock.On("GetNotification", _a0)}
}

func (_c *Database_GetNotification_Call) Run(run func(_a0 string)) *Database_GetNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetNotification_Call) Return(_a0 *db.Notification, _a1 error) *Database_GetNotification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetNotification_Call) RunAndReturn(run func(string) (*db.Notification, error)) *Database_GetNotification_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationCount provides a mock function with given fields: pubKey
func (_m *Database) GetNotificationCount(pubKey string) (int64, error) {
	ret := _m.Called(pubKey)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(pubKey)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(pubKey)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pubKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetNotificationCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationCount'
type Database_GetNotificationCount_Call struct {
	*mock.Call
}

// GetNotificationCount is a helper method to define mock.On call
//   - pubKey string
func (_e *Database_Expecter) GetNotificationCount(pubKey interface{}) *Database_GetNotificationCount_Call {
	return &Database_GetNotificationCount_Call{Call: _e.mock.On("GetNotificationCount", pubKey)}
}

func (_c *Database_GetNotificationCount_Call) Run(run func(pubKey string)) *Database_GetNotificationCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetNotificationCount_Call) Return(_a0 int64, _a1 error) *Database_GetNotificationCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetNotificationCount_Call) RunAndReturn(run func(string) (int64, error)) *Database_GetNotificationCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationsByPubKey provides a mock function with given fields: pubKey, limit, offset
func (_m *Database) GetNotificationsByPubKey(pubKey string, limit int, offset int) ([]db.Notification, error) {
	ret := _m.Called(pubKey, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsByPubKey")
	}

	var r0 []db.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]db.Notification, error)); ok {
		return rf(pubKey, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []db.Notification); ok {
		r0 = rf(pubKey, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(pubKey, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetNotificationsByPubKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationsByPubKey'
type Database_GetNotificationsByPubKey_Call struct {
	*mock.Call
}

// GetNotificationsByPubKey is a helper method to define mock.On call
//   - pubKey string
//   - limit int
//   - offset int
func (_e *Database_Expecter) GetNotificationsByPubKey(pubKey interface{}, limit interface{}, offset interface{}) *Database_GetNotificationsByPubKey_Call {
	return &Database_GetNotificationsByPubKey_Call{Call: _e.mock.On("GetNotificationsByPubKey", pubKey, limit, offset)}
}

func (_c *Database_GetNotificationsByPubKey_Call) Run(run func(pubKey string, limit int, offset int)) *Database_GetNotificationsByPubKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *Database_GetNotificationsByPubKey_Call) Return(_a0 []db.Notification, _a1 error) *Database_GetNotificationsByPubKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetNotificationsByPubKey_Call) RunAndReturn(run func(string, int, int) ([]db.Notification, error)) *Database_GetNotificationsByPubKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenGithubIssues provides a mock function with given fields: r
func (_m *Database) GetOpenGithubIssues(r *http.Request) (int64, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenGithubIssues")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (int64, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetOpenGithubIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenGithubIssues'
type Database_GetOpenGithubIssues_Call struct {
	*mock.Call
}

// GetOpenGithubIssues is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetOpenGithubIssues(r interface{}) *Database_GetOpenGithubIssues_Call {
	return &Database_GetOpenGithubIssues_Call{Call: _e.mock.On("GetOpenGithubIssues", r)}
}

func (_c *Database_GetOpenGithubIssues_Call) Run(run func(r *http.Request)) *Database_GetOpenGithubIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetOpenGithubIssues_Call) Return(_a0 int64, _a1 error) *Database_GetOpenGithubIssues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetOpenGithubIssues_Call) RunAndReturn(run func(*http.Request) (int64, error)) *Database_GetOpenGithubIssues_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentByBountyId provides a mock function with given fields: bountyId
func (_m *Database) GetPaymentByBountyId(bountyId uint) db.NewPaymentHistory {
	ret := _m.Called(bountyId)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByBountyId")
	}

	var r0 db.NewPaymentHistory
	if rf, ok := ret.Get(0).(func(uint) db.NewPaymentHistory); ok {
		r0 = rf(bountyId)
	} else {
		r0 = ret.Get(0).(db.NewPaymentHistory)
	}

	return r0
}

// Database_GetPaymentByBountyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentByBountyId'
type Database_GetPaymentByBountyId_Call struct {
	*mock.Call
}

// GetPaymentByBountyId is a helper method to define mock.On call
//   - bountyId uint
func (_e *Database_Expecter) GetPaymentByBountyId(bountyId interface{}) *Database_GetPaymentByBountyId_Call {
	return &Database_GetPaymentByBountyId_Call{Call: _e.mock.On("GetPaymentByBountyId", bountyId)}
}

func (_c *Database_GetPaymentByBountyId_Call) Run(run func(bountyId uint)) *Database_GetPaymentByBountyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_GetPaymentByBountyId_Call) Return(_a0 db.NewPaymentHistory) *Database_GetPaymentByBountyId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPaymentByBountyId_Call) RunAndReturn(run func(uint) db.NewPaymentHistory) *Database_GetPaymentByBountyId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentHistory provides a mock function with given fields: workspace_uuid, r
func (_m *Database) GetPaymentHistory(workspace_uuid string, r *http.Request) []db.NewPaymentHistory {
	ret := _m.Called(workspace_uuid, r)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentHistory")
	}

	var r0 []db.NewPaymentHistory
	if rf, ok := ret.Get(0).(func(string, *http.Request) []db.NewPaymentHistory); ok {
		r0 = rf(workspace_uuid, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewPaymentHistory)
		}
	}

	return r0
}

// Database_GetPaymentHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentHistory'
type Database_GetPaymentHistory_Call struct {
	*mock.Call
}

// GetPaymentHistory is a helper method to define mock.On call
//   - workspace_uuid string
//   - r *http.Request
func (_e *Database_Expecter) GetPaymentHistory(workspace_uuid interface{}, r interface{}) *Database_GetPaymentHistory_Call {
	return &Database_GetPaymentHistory_Call{Call: _e.mock.On("GetPaymentHistory", workspace_uuid, r)}
}

func (_c *Database_GetPaymentHistory_Call) Run(run func(workspace_uuid string, r *http.Request)) *Database_GetPaymentHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*http.Request))
	})
	return _c
}

func (_c *Database_GetPaymentHistory_Call) Return(_a0 []db.NewPaymentHistory) *Database_GetPaymentHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPaymentHistory_Call) RunAndReturn(run func(string, *http.Request) []db.NewPaymentHistory) *Database_GetPaymentHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentHistoryByCreated provides a mock function with given fields: created, workspace_uuid
func (_m *Database) GetPaymentHistoryByCreated(created *time.Time, workspace_uuid string) db.NewPaymentHistory {
	ret := _m.Called(created, workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentHistoryByCreated")
	}

	var r0 db.NewPaymentHistory
	if rf, ok := ret.Get(0).(func(*time.Time, string) db.NewPaymentHistory); ok {
		r0 = rf(created, workspace_uuid)
	} else {
		r0 = ret.Get(0).(db.NewPaymentHistory)
	}

	return r0
}

// Database_GetPaymentHistoryByCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentHistoryByCreated'
type Database_GetPaymentHistoryByCreated_Call struct {
	*mock.Call
}

// GetPaymentHistoryByCreated is a helper method to define mock.On call
//   - created *time.Time
//   - workspace_uuid string
func (_e *Database_Expecter) GetPaymentHistoryByCreated(created interface{}, workspace_uuid interface{}) *Database_GetPaymentHistoryByCreated_Call {
	return &Database_GetPaymentHistoryByCreated_Call{Call: _e.mock.On("GetPaymentHistoryByCreated", created, workspace_uuid)}
}

func (_c *Database_GetPaymentHistoryByCreated_Call) Run(run func(created *time.Time, workspace_uuid string)) *Database_GetPaymentHistoryByCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*time.Time), args[1].(string))
	})
	return _c
}

func (_c *Database_GetPaymentHistoryByCreated_Call) Return(_a0 db.NewPaymentHistory) *Database_GetPaymentHistoryByCreated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPaymentHistoryByCreated_Call) RunAndReturn(run func(*time.Time, string) db.NewPaymentHistory) *Database_GetPaymentHistoryByCreated_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingNotifications provides a mock function with no fields
func (_m *Database) GetPendingNotifications() ([]db.Notification, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPendingNotifications")
	}

	var r0 []db.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Notification, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Notification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetPendingNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingNotifications'
type Database_GetPendingNotifications_Call struct {
	*mock.Call
}

// GetPendingNotifications is a helper method to define mock.On call
func (_e *Database_Expecter) GetPendingNotifications() *Database_GetPendingNotifications_Call {
	return &Database_GetPendingNotifications_Call{Call: _e.mock.On("GetPendingNotifications")}
}

func (_c *Database_GetPendingNotifications_Call) Run(run func()) *Database_GetPendingNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetPendingNotifications_Call) Return(_a0 []db.Notification, _a1 error) *Database_GetPendingNotifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetPendingNotifications_Call) RunAndReturn(run func() ([]db.Notification, error)) *Database_GetPendingNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingPaymentHistory provides a mock function with no fields
func (_m *Database) GetPendingPaymentHistory() []db.NewPaymentHistory {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPendingPaymentHistory")
	}

	var r0 []db.NewPaymentHistory
	if rf, ok := ret.Get(0).(func() []db.NewPaymentHistory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewPaymentHistory)
		}
	}

	return r0
}

// Database_GetPendingPaymentHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingPaymentHistory'
type Database_GetPendingPaymentHistory_Call struct {
	*mock.Call
}

// GetPendingPaymentHistory is a helper method to define mock.On call
func (_e *Database_Expecter) GetPendingPaymentHistory() *Database_GetPendingPaymentHistory_Call {
	return &Database_GetPendingPaymentHistory_Call{Call: _e.mock.On("GetPendingPaymentHistory")}
}

func (_c *Database_GetPendingPaymentHistory_Call) Run(run func()) *Database_GetPendingPaymentHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetPendingPaymentHistory_Call) Return(_a0 []db.NewPaymentHistory) *Database_GetPendingPaymentHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPendingPaymentHistory_Call) RunAndReturn(run func() []db.NewPaymentHistory) *Database_GetPendingPaymentHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingWorkflowRequests provides a mock function with given fields: limit
func (_m *Database) GetPendingWorkflowRequests(limit int) ([]db.WfRequest, error) {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingWorkflowRequests")
	}

	var r0 []db.WfRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]db.WfRequest, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []db.WfRequest); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WfRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetPendingWorkflowRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingWorkflowRequests'
type Database_GetPendingWorkflowRequests_Call struct {
	*mock.Call
}

// GetPendingWorkflowRequests is a helper method to define mock.On call
//   - limit int
func (_e *Database_Expecter) GetPendingWorkflowRequests(limit interface{}) *Database_GetPendingWorkflowRequests_Call {
	return &Database_GetPendingWorkflowRequests_Call{Call: _e.mock.On("GetPendingWorkflowRequests", limit)}
}

func (_c *Database_GetPendingWorkflowRequests_Call) Run(run func(limit int)) *Database_GetPendingWorkflowRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Database_GetPendingWorkflowRequests_Call) Return(_a0 []db.WfRequest, _a1 error) *Database_GetPendingWorkflowRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetPendingWorkflowRequests_Call) RunAndReturn(run func(int) ([]db.WfRequest, error)) *Database_GetPendingWorkflowRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeopleBySearch provides a mock function with given fields: r
func (_m *Database) GetPeopleBySearch(r *http.Request) []db.Person {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPeopleBySearch")
	}

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Person); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// Database_GetPeopleBySearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeopleBySearch'
type Database_GetPeopleBySearch_Call struct {
	*mock.Call
}

// GetPeopleBySearch is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetPeopleBySearch(r interface{}) *Database_GetPeopleBySearch_Call {
	return &Database_GetPeopleBySearch_Call{Call: _e.mock.On("GetPeopleBySearch", r)}
}

func (_c *Database_GetPeopleBySearch_Call) Run(run func(r *http.Request)) *Database_GetPeopleBySearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetPeopleBySearch_Call) Return(_a0 []db.Person) *Database_GetPeopleBySearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPeopleBySearch_Call) RunAndReturn(run func(*http.Request) []db.Person) *Database_GetPeopleBySearch_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeopleListShort provides a mock function with given fields: count
func (_m *Database) GetPeopleListShort(count uint32) *[]db.PersonInShort {
	ret := _m.Called(count)

	if len(ret) == 0 {
		panic("no return value specified for GetPeopleListShort")
	}

	var r0 *[]db.PersonInShort
	if rf, ok := ret.Get(0).(func(uint32) *[]db.PersonInShort); ok {
		r0 = rf(count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.PersonInShort)
		}
	}

	return r0
}

// Database_GetPeopleListShort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeopleListShort'
type Database_GetPeopleListShort_Call struct {
	*mock.Call
}

// GetPeopleListShort is a helper method to define mock.On call
//   - count uint32
func (_e *Database_Expecter) GetPeopleListShort(count interface{}) *Database_GetPeopleListShort_Call {
	return &Database_GetPeopleListShort_Call{Call: _e.mock.On("GetPeopleListShort", count)}
}

func (_c *Database_GetPeopleListShort_Call) Run(run func(count uint32)) *Database_GetPeopleListShort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *Database_GetPeopleListShort_Call) Return(_a0 *[]db.PersonInShort) *Database_GetPeopleListShort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPeopleListShort_Call) RunAndReturn(run func(uint32) *[]db.PersonInShort) *Database_GetPeopleListShort_Call {
	_c.Call.Return(run)
	return _c
}

// GetPerson provides a mock function with given fields: id
func (_m *Database) GetPerson(id uint) db.Person {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPerson")
	}

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(uint) db.Person); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// Database_GetPerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPerson'
type Database_GetPerson_Call struct {
	*mock.Call
}

// GetPerson is a helper method to define mock.On call
//   - id uint
func (_e *Database_Expecter) GetPerson(id interface{}) *Database_GetPerson_Call {
	return &Database_GetPerson_Call{Call: _e.mock.On("GetPerson", id)}
}

func (_c *Database_GetPerson_Call) Run(run func(id uint)) *Database_GetPerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_GetPerson_Call) Return(_a0 db.Person) *Database_GetPerson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPerson_Call) RunAndReturn(run func(uint) db.Person) *Database_GetPerson_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonByGithubName provides a mock function with given fields: github_name
func (_m *Database) GetPersonByGithubName(github_name string) db.Person {
	ret := _m.Called(github_name)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonByGithubName")
	}

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(github_name)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// Database_GetPersonByGithubName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonByGithubName'
type Database_GetPersonByGithubName_Call struct {
	*mock.Call
}

// GetPersonByGithubName is a helper method to define mock.On call
//   - github_name string
func (_e *Database_Expecter) GetPersonByGithubName(github_name interface{}) *Database_GetPersonByGithubName_Call {
	return &Database_GetPersonByGithubName_Call{Call: _e.mock.On("GetPersonByGithubName", github_name)}
}

func (_c *Database_GetPersonByGithubName_Call) Run(run func(github_name string)) *Database_GetPersonByGithubName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetPersonByGithubName_Call) Return(_a0 db.Person) *Database_GetPersonByGithubName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPersonByGithubName_Call) RunAndReturn(run func(string) db.Person) *Database_GetPersonByGithubName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonByPubkey provides a mock function with given fields: pubkey
func (_m *Database) GetPersonByPubkey(pubkey string) db.Person {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonByPubkey")
	}

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(pubkey)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// Database_GetPersonByPubkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonByPubkey'
type Database_GetPersonByPubkey_Call struct {
	*mock.Call
}

// GetPersonByPubkey is a helper method to define mock.On call
//   - pubkey string
func (_e *Database_Expecter) GetPersonByPubkey(pubkey interface{}) *Database_GetPersonByPubkey_Call {
	return &Database_GetPersonByPubkey_Call{Call: _e.mock.On("GetPersonByPubkey", pubkey)}
}

func (_c *Database_GetPersonByPubkey_Call) Run(run func(pubkey string)) *Database_GetPersonByPubkey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetPersonByPubkey_Call) Return(_a0 db.Person) *Database_GetPersonByPubkey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPersonByPubkey_Call) RunAndReturn(run func(string) db.Person) *Database_GetPersonByPubkey_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonByUniqueName provides a mock function with given fields: un
func (_m *Database) GetPersonByUniqueName(un string) db.Person {
	ret := _m.Called(un)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonByUniqueName")
	}

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(un)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// Database_GetPersonByUniqueName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonByUniqueName'
type Database_GetPersonByUniqueName_Call struct {
	*mock.Call
}

// GetPersonByUniqueName is a helper method to define mock.On call
//   - un string
func (_e *Database_Expecter) GetPersonByUniqueName(un interface{}) *Database_GetPersonByUniqueName_Call {
	return &Database_GetPersonByUniqueName_Call{Call: _e.mock.On("GetPersonByUniqueName", un)}
}

func (_c *Database_GetPersonByUniqueName_Call) Run(run func(un string)) *Database_GetPersonByUniqueName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetPersonByUniqueName_Call) Return(_a0 db.Person) *Database_GetPersonByUniqueName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPersonByUniqueName_Call) RunAndReturn(run func(string) db.Person) *Database_GetPersonByUniqueName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonByUuid provides a mock function with given fields: _a0
func (_m *Database) GetPersonByUuid(_a0 string) db.Person {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonByUuid")
	}

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// Database_GetPersonByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonByUuid'
type Database_GetPersonByUuid_Call struct {
	*mock.Call
}

// GetPersonByUuid is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetPersonByUuid(_a0 interface{}) *Database_GetPersonByUuid_Call {
	return &Database_GetPersonByUuid_Call{Call: _e.mock.On("GetPersonByUuid", _a0)}
}

func (_c *Database_GetPersonByUuid_Call) Run(run func(_a0 string)) *Database_GetPersonByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetPersonByUuid_Call) Return(_a0 db.Person) *Database_GetPersonByUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPersonByUuid_Call) RunAndReturn(run func(string) db.Person) *Database_GetPersonByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhaseByUuid provides a mock function with given fields: phaseUuid
func (_m *Database) GetPhaseByUuid(phaseUuid string) (db.FeaturePhase, error) {
	ret := _m.Called(phaseUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetPhaseByUuid")
	}

	var r0 db.FeaturePhase
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (db.FeaturePhase, error)); ok {
		return rf(phaseUuid)
	}
	if rf, ok := ret.Get(0).(func(string) db.FeaturePhase); ok {
		r0 = rf(phaseUuid)
	} else {
		r0 = ret.Get(0).(db.FeaturePhase)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(phaseUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetPhaseByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhaseByUuid'
type Database_GetPhaseByUuid_Call struct {
	*mock.Call
}

// GetPhaseByUuid is a helper method to define mock.On call
//   - phaseUuid string
func (_e *Database_Expecter) GetPhaseByUuid(phaseUuid interface{}) *Database_GetPhaseByUuid_Call {
	return &Database_GetPhaseByUuid_Call{Call: _e.mock.On("GetPhaseByUuid", phaseUuid)}
}

func (_c *Database_GetPhaseByUuid_Call) Run(run func(phaseUuid string)) *Database_GetPhaseByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetPhaseByUuid_Call) Return(_a0 db.FeaturePhase, _a1 error) *Database_GetPhaseByUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetPhaseByUuid_Call) RunAndReturn(run func(string) (db.FeaturePhase, error)) *Database_GetPhaseByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhasesByFeatureUuid provides a mock function with given fields: featureUuid
func (_m *Database) GetPhasesByFeatureUuid(featureUuid string) []db.FeaturePhase {
	ret := _m.Called(featureUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetPhasesByFeatureUuid")
	}

	var r0 []db.FeaturePhase
	if rf, ok := ret.Get(0).(func(string) []db.FeaturePhase); ok {
		r0 = rf(featureUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.FeaturePhase)
		}
	}

	return r0
}

// Database_GetPhasesByFeatureUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhasesByFeatureUuid'
type Database_GetPhasesByFeatureUuid_Call struct {
	*mock.Call
}

// GetPhasesByFeatureUuid is a helper method to define mock.On call
//   - featureUuid string
func (_e *Database_Expecter) GetPhasesByFeatureUuid(featureUuid interface{}) *Database_GetPhasesByFeatureUuid_Call {
	return &Database_GetPhasesByFeatureUuid_Call{Call: _e.mock.On("GetPhasesByFeatureUuid", featureUuid)}
}

func (_c *Database_GetPhasesByFeatureUuid_Call) Run(run func(featureUuid string)) *Database_GetPhasesByFeatureUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetPhasesByFeatureUuid_Call) Return(_a0 []db.FeaturePhase) *Database_GetPhasesByFeatureUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetPhasesByFeatureUuid_Call) RunAndReturn(run func(string) []db.FeaturePhase) *Database_GetPhasesByFeatureUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreviousBountyByCreated provides a mock function with given fields: r
func (_m *Database) GetPreviousBountyByCreated(r *http.Request) (uint, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPreviousBountyByCreated")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (uint, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) uint); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetPreviousBountyByCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreviousBountyByCreated'
type Database_GetPreviousBountyByCreated_Call struct {
	*mock.Call
}

// GetPreviousBountyByCreated is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetPreviousBountyByCreated(r interface{}) *Database_GetPreviousBountyByCreated_Call {
	return &Database_GetPreviousBountyByCreated_Call{Call: _e.mock.On("GetPreviousBountyByCreated", r)}
}

func (_c *Database_GetPreviousBountyByCreated_Call) Run(run func(r *http.Request)) *Database_GetPreviousBountyByCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetPreviousBountyByCreated_Call) Return(_a0 uint, _a1 error) *Database_GetPreviousBountyByCreated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetPreviousBountyByCreated_Call) RunAndReturn(run func(*http.Request) (uint, error)) *Database_GetPreviousBountyByCreated_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreviousWorkspaceBountyByCreated provides a mock function with given fields: r
func (_m *Database) GetPreviousWorkspaceBountyByCreated(r *http.Request) (uint, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPreviousWorkspaceBountyByCreated")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (uint, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) uint); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetPreviousWorkspaceBountyByCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreviousWorkspaceBountyByCreated'
type Database_GetPreviousWorkspaceBountyByCreated_Call struct {
	*mock.Call
}

// GetPreviousWorkspaceBountyByCreated is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetPreviousWorkspaceBountyByCreated(r interface{}) *Database_GetPreviousWorkspaceBountyByCreated_Call {
	return &Database_GetPreviousWorkspaceBountyByCreated_Call{Call: _e.mock.On("GetPreviousWorkspaceBountyByCreated", r)}
}

func (_c *Database_GetPreviousWorkspaceBountyByCreated_Call) Run(run func(r *http.Request)) *Database_GetPreviousWorkspaceBountyByCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetPreviousWorkspaceBountyByCreated_Call) Return(_a0 uint, _a1 error) *Database_GetPreviousWorkspaceBountyByCreated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetPreviousWorkspaceBountyByCreated_Call) RunAndReturn(run func(*http.Request) (uint, error)) *Database_GetPreviousWorkspaceBountyByCreated_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessingMapByKey provides a mock function with given fields: processType, processKey
func (_m *Database) GetProcessingMapByKey(processType string, processKey string) (*db.WfProcessingMap, error) {
	ret := _m.Called(processType, processKey)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessingMapByKey")
	}

	var r0 *db.WfProcessingMap
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*db.WfProcessingMap, error)); ok {
		return rf(processType, processKey)
	}
	if rf, ok := ret.Get(0).(func(string, string) *db.WfProcessingMap); ok {
		r0 = rf(processType, processKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.WfProcessingMap)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(processType, processKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetProcessingMapByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessingMapByKey'
type Database_GetProcessingMapByKey_Call struct {
	*mock.Call
}

// GetProcessingMapByKey is a helper method to define mock.On call
//   - processType string
//   - processKey string
func (_e *Database_Expecter) GetProcessingMapByKey(processType interface{}, processKey interface{}) *Database_GetProcessingMapByKey_Call {
	return &Database_GetProcessingMapByKey_Call{Call: _e.mock.On("GetProcessingMapByKey", processType, processKey)}
}

func (_c *Database_GetProcessingMapByKey_Call) Run(run func(processType string, processKey string)) *Database_GetProcessingMapByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetProcessingMapByKey_Call) Return(_a0 *db.WfProcessingMap, _a1 error) *Database_GetProcessingMapByKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetProcessingMapByKey_Call) RunAndReturn(run func(string, string) (*db.WfProcessingMap, error)) *Database_GetProcessingMapByKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessingMapsByType provides a mock function with given fields: processType
func (_m *Database) GetProcessingMapsByType(processType string) ([]db.WfProcessingMap, error) {
	ret := _m.Called(processType)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessingMapsByType")
	}

	var r0 []db.WfProcessingMap
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.WfProcessingMap, error)); ok {
		return rf(processType)
	}
	if rf, ok := ret.Get(0).(func(string) []db.WfProcessingMap); ok {
		r0 = rf(processType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WfProcessingMap)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(processType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetProcessingMapsByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessingMapsByType'
type Database_GetProcessingMapsByType_Call struct {
	*mock.Call
}

// GetProcessingMapsByType is a helper method to define mock.On call
//   - processType string
func (_e *Database_Expecter) GetProcessingMapsByType(processType interface{}) *Database_GetProcessingMapsByType_Call {
	return &Database_GetProcessingMapsByType_Call{Call: _e.mock.On("GetProcessingMapsByType", processType)}
}

func (_c *Database_GetProcessingMapsByType_Call) Run(run func(processType string)) *Database_GetProcessingMapsByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetProcessingMapsByType_Call) Return(_a0 []db.WfProcessingMap, _a1 error) *Database_GetProcessingMapsByType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetProcessingMapsByType_Call) RunAndReturn(run func(string) ([]db.WfProcessingMap, error)) *Database_GetProcessingMapsByType_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductBrief provides a mock function with given fields: workspaceUuid
func (_m *Database) GetProductBrief(workspaceUuid string) (string, error) {
	ret := _m.Called(workspaceUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProductBrief")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(workspaceUuid)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(workspaceUuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(workspaceUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetProductBrief_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductBrief'
type Database_GetProductBrief_Call struct {
	*mock.Call
}

// GetProductBrief is a helper method to define mock.On call
//   - workspaceUuid string
func (_e *Database_Expecter) GetProductBrief(workspaceUuid interface{}) *Database_GetProductBrief_Call {
	return &Database_GetProductBrief_Call{Call: _e.mock.On("GetProductBrief", workspaceUuid)}
}

func (_c *Database_GetProductBrief_Call) Run(run func(workspaceUuid string)) *Database_GetProductBrief_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetProductBrief_Call) Return(_a0 string, _a1 error) *Database_GetProductBrief_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetProductBrief_Call) RunAndReturn(run func(string) (string, error)) *Database_GetProductBrief_Call {
	_c.Call.Return(run)
	return _c
}

// GetProofsByBountyID provides a mock function with given fields: bountyID
func (_m *Database) GetProofsByBountyID(bountyID uint) []db.ProofOfWork {
	ret := _m.Called(bountyID)

	if len(ret) == 0 {
		panic("no return value specified for GetProofsByBountyID")
	}

	var r0 []db.ProofOfWork
	if rf, ok := ret.Get(0).(func(uint) []db.ProofOfWork); ok {
		r0 = rf(bountyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.ProofOfWork)
		}
	}

	return r0
}

// Database_GetProofsByBountyID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProofsByBountyID'
type Database_GetProofsByBountyID_Call struct {
	*mock.Call
}

// GetProofsByBountyID is a helper method to define mock.On call
//   - bountyID uint
func (_e *Database_Expecter) GetProofsByBountyID(bountyID interface{}) *Database_GetProofsByBountyID_Call {
	return &Database_GetProofsByBountyID_Call{Call: _e.mock.On("GetProofsByBountyID", bountyID)}
}

func (_c *Database_GetProofsByBountyID_Call) Run(run func(bountyID uint)) *Database_GetProofsByBountyID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_GetProofsByBountyID_Call) Return(_a0 []db.ProofOfWork) *Database_GetProofsByBountyID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetProofsByBountyID_Call) RunAndReturn(run func(uint) []db.ProofOfWork) *Database_GetProofsByBountyID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSumOfDeposits provides a mock function with given fields: workspace_uuid
func (_m *Database) GetSumOfDeposits(workspace_uuid string) uint {
	ret := _m.Called(workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetSumOfDeposits")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(string) uint); ok {
		r0 = rf(workspace_uuid)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_GetSumOfDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSumOfDeposits'
type Database_GetSumOfDeposits_Call struct {
	*mock.Call
}

// GetSumOfDeposits is a helper method to define mock.On call
//   - workspace_uuid string
func (_e *Database_Expecter) GetSumOfDeposits(workspace_uuid interface{}) *Database_GetSumOfDeposits_Call {
	return &Database_GetSumOfDeposits_Call{Call: _e.mock.On("GetSumOfDeposits", workspace_uuid)}
}

func (_c *Database_GetSumOfDeposits_Call) Run(run func(workspace_uuid string)) *Database_GetSumOfDeposits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetSumOfDeposits_Call) Return(_a0 uint) *Database_GetSumOfDeposits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetSumOfDeposits_Call) RunAndReturn(run func(string) uint) *Database_GetSumOfDeposits_Call {
	_c.Call.Return(run)
	return _c
}

// GetSumOfWithdrawal provides a mock function with given fields: workspace_uuid
func (_m *Database) GetSumOfWithdrawal(workspace_uuid string) uint {
	ret := _m.Called(workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetSumOfWithdrawal")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(string) uint); ok {
		r0 = rf(workspace_uuid)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_GetSumOfWithdrawal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSumOfWithdrawal'
type Database_GetSumOfWithdrawal_Call struct {
	*mock.Call
}

// GetSumOfWithdrawal is a helper method to define mock.On call
//   - workspace_uuid string
func (_e *Database_Expecter) GetSumOfWithdrawal(workspace_uuid interface{}) *Database_GetSumOfWithdrawal_Call {
	return &Database_GetSumOfWithdrawal_Call{Call: _e.mock.On("GetSumOfWithdrawal", workspace_uuid)}
}

func (_c *Database_GetSumOfWithdrawal_Call) Run(run func(workspace_uuid string)) *Database_GetSumOfWithdrawal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetSumOfWithdrawal_Call) Return(_a0 uint) *Database_GetSumOfWithdrawal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetSumOfWithdrawal_Call) RunAndReturn(run func(string) uint) *Database_GetSumOfWithdrawal_Call {
	_c.Call.Return(run)
	return _c
}

// GetTicket provides a mock function with given fields: _a0
func (_m *Database) GetTicket(_a0 string) (db.Tickets, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTicket")
	}

	var r0 db.Tickets
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (db.Tickets, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) db.Tickets); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.Tickets)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTicket'
type Database_GetTicket_Call struct {
	*mock.Call
}

// GetTicket is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetTicket(_a0 interface{}) *Database_GetTicket_Call {
	return &Database_GetTicket_Call{Call: _e.mock.On("GetTicket", _a0)}
}

func (_c *Database_GetTicket_Call) Run(run func(_a0 string)) *Database_GetTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetTicket_Call) Return(_a0 db.Tickets, _a1 error) *Database_GetTicket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetTicket_Call) RunAndReturn(run func(string) (db.Tickets, error)) *Database_GetTicket_Call {
	_c.Call.Return(run)
	return _c
}

// GetTicketsByGroup provides a mock function with given fields: ticketGroupUUID
func (_m *Database) GetTicketsByGroup(ticketGroupUUID string) ([]db.Tickets, error) {
	ret := _m.Called(ticketGroupUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetTicketsByGroup")
	}

	var r0 []db.Tickets
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.Tickets, error)); ok {
		return rf(ticketGroupUUID)
	}
	if rf, ok := ret.Get(0).(func(string) []db.Tickets); ok {
		r0 = rf(ticketGroupUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tickets)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ticketGroupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetTicketsByGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTicketsByGroup'
type Database_GetTicketsByGroup_Call struct {
	*mock.Call
}

// GetTicketsByGroup is a helper method to define mock.On call
//   - ticketGroupUUID string
func (_e *Database_Expecter) GetTicketsByGroup(ticketGroupUUID interface{}) *Database_GetTicketsByGroup_Call {
	return &Database_GetTicketsByGroup_Call{Call: _e.mock.On("GetTicketsByGroup", ticketGroupUUID)}
}

func (_c *Database_GetTicketsByGroup_Call) Run(run func(ticketGroupUUID string)) *Database_GetTicketsByGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetTicketsByGroup_Call) Return(_a0 []db.Tickets, _a1 error) *Database_GetTicketsByGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetTicketsByGroup_Call) RunAndReturn(run func(string) ([]db.Tickets, error)) *Database_GetTicketsByGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetTicketsByPhaseUUID provides a mock function with given fields: featureUUID, phaseUUID
func (_m *Database) GetTicketsByPhaseUUID(featureUUID string, phaseUUID string) ([]db.Tickets, error) {
	ret := _m.Called(featureUUID, phaseUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetTicketsByPhaseUUID")
	}

	var r0 []db.Tickets
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]db.Tickets, error)); ok {
		return rf(featureUUID, phaseUUID)
	}
	if rf, ok := ret.Get(0).(func(string, string) []db.Tickets); ok {
		r0 = rf(featureUUID, phaseUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tickets)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(featureUUID, phaseUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetTicketsByPhaseUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTicketsByPhaseUUID'
type Database_GetTicketsByPhaseUUID_Call struct {
	*mock.Call
}

// GetTicketsByPhaseUUID is a helper method to define mock.On call
//   - featureUUID string
//   - phaseUUID string
func (_e *Database_Expecter) GetTicketsByPhaseUUID(featureUUID interface{}, phaseUUID interface{}) *Database_GetTicketsByPhaseUUID_Call {
	return &Database_GetTicketsByPhaseUUID_Call{Call: _e.mock.On("GetTicketsByPhaseUUID", featureUUID, phaseUUID)}
}

func (_c *Database_GetTicketsByPhaseUUID_Call) Run(run func(featureUUID string, phaseUUID string)) *Database_GetTicketsByPhaseUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetTicketsByPhaseUUID_Call) Return(_a0 []db.Tickets, _a1 error) *Database_GetTicketsByPhaseUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetTicketsByPhaseUUID_Call) RunAndReturn(run func(string, string) ([]db.Tickets, error)) *Database_GetTicketsByPhaseUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTicketsWithoutGroup provides a mock function with no fields
func (_m *Database) GetTicketsWithoutGroup() ([]db.Tickets, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTicketsWithoutGroup")
	}

	var r0 []db.Tickets
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Tickets, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Tickets); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tickets)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetTicketsWithoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTicketsWithoutGroup'
type Database_GetTicketsWithoutGroup_Call struct {
	*mock.Call
}

// GetTicketsWithoutGroup is a helper method to define mock.On call
func (_e *Database_Expecter) GetTicketsWithoutGroup() *Database_GetTicketsWithoutGroup_Call {
	return &Database_GetTicketsWithoutGroup_Call{Call: _e.mock.On("GetTicketsWithoutGroup")}
}

func (_c *Database_GetTicketsWithoutGroup_Call) Run(run func()) *Database_GetTicketsWithoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetTicketsWithoutGroup_Call) Return(_a0 []db.Tickets, _a1 error) *Database_GetTicketsWithoutGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetTicketsWithoutGroup_Call) RunAndReturn(run func() ([]db.Tickets, error)) *Database_GetTicketsWithoutGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribe provides a mock function with given fields: _a0
func (_m *Database) GetTribe(_a0 string) db.Tribe {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTribe")
	}

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string) db.Tribe); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// Database_GetTribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribe'
type Database_GetTribe_Call struct {
	*mock.Call
}

// GetTribe is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetTribe(_a0 interface{}) *Database_GetTribe_Call {
	return &Database_GetTribe_Call{Call: _e.mock.On("GetTribe", _a0)}
}

func (_c *Database_GetTribe_Call) Run(run func(_a0 string)) *Database_GetTribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetTribe_Call) Return(_a0 db.Tribe) *Database_GetTribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribe_Call) RunAndReturn(run func(string) db.Tribe) *Database_GetTribe_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribeByIdAndPubkey provides a mock function with given fields: _a0, pubkey
func (_m *Database) GetTribeByIdAndPubkey(_a0 string, pubkey string) db.Tribe {
	ret := _m.Called(_a0, pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetTribeByIdAndPubkey")
	}

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string, string) db.Tribe); ok {
		r0 = rf(_a0, pubkey)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// Database_GetTribeByIdAndPubkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribeByIdAndPubkey'
type Database_GetTribeByIdAndPubkey_Call struct {
	*mock.Call
}

// GetTribeByIdAndPubkey is a helper method to define mock.On call
//   - _a0 string
//   - pubkey string
func (_e *Database_Expecter) GetTribeByIdAndPubkey(_a0 interface{}, pubkey interface{}) *Database_GetTribeByIdAndPubkey_Call {
	return &Database_GetTribeByIdAndPubkey_Call{Call: _e.mock.On("GetTribeByIdAndPubkey", _a0, pubkey)}
}

func (_c *Database_GetTribeByIdAndPubkey_Call) Run(run func(_a0 string, pubkey string)) *Database_GetTribeByIdAndPubkey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetTribeByIdAndPubkey_Call) Return(_a0 db.Tribe) *Database_GetTribeByIdAndPubkey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribeByIdAndPubkey_Call) RunAndReturn(run func(string, string) db.Tribe) *Database_GetTribeByIdAndPubkey_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribeByUniqueName provides a mock function with given fields: un
func (_m *Database) GetTribeByUniqueName(un string) db.Tribe {
	ret := _m.Called(un)

	if len(ret) == 0 {
		panic("no return value specified for GetTribeByUniqueName")
	}

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string) db.Tribe); ok {
		r0 = rf(un)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// Database_GetTribeByUniqueName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribeByUniqueName'
type Database_GetTribeByUniqueName_Call struct {
	*mock.Call
}

// GetTribeByUniqueName is a helper method to define mock.On call
//   - un string
func (_e *Database_Expecter) GetTribeByUniqueName(un interface{}) *Database_GetTribeByUniqueName_Call {
	return &Database_GetTribeByUniqueName_Call{Call: _e.mock.On("GetTribeByUniqueName", un)}
}

func (_c *Database_GetTribeByUniqueName_Call) Run(run func(un string)) *Database_GetTribeByUniqueName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetTribeByUniqueName_Call) Return(_a0 db.Tribe) *Database_GetTribeByUniqueName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribeByUniqueName_Call) RunAndReturn(run func(string) db.Tribe) *Database_GetTribeByUniqueName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribesByAppUrl provides a mock function with given fields: aurl
func (_m *Database) GetTribesByAppUrl(aurl string) []db.Tribe {
	ret := _m.Called(aurl)

	if len(ret) == 0 {
		panic("no return value specified for GetTribesByAppUrl")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(aurl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_GetTribesByAppUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribesByAppUrl'
type Database_GetTribesByAppUrl_Call struct {
	*mock.Call
}

// GetTribesByAppUrl is a helper method to define mock.On call
//   - aurl string
func (_e *Database_Expecter) GetTribesByAppUrl(aurl interface{}) *Database_GetTribesByAppUrl_Call {
	return &Database_GetTribesByAppUrl_Call{Call: _e.mock.On("GetTribesByAppUrl", aurl)}
}

func (_c *Database_GetTribesByAppUrl_Call) Run(run func(aurl string)) *Database_GetTribesByAppUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetTribesByAppUrl_Call) Return(_a0 []db.Tribe) *Database_GetTribesByAppUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribesByAppUrl_Call) RunAndReturn(run func(string) []db.Tribe) *Database_GetTribesByAppUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribesByOwner provides a mock function with given fields: pubkey
func (_m *Database) GetTribesByOwner(pubkey string) []db.Tribe {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetTribesByOwner")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_GetTribesByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribesByOwner'
type Database_GetTribesByOwner_Call struct {
	*mock.Call
}

// GetTribesByOwner is a helper method to define mock.On call
//   - pubkey string
func (_e *Database_Expecter) GetTribesByOwner(pubkey interface{}) *Database_GetTribesByOwner_Call {
	return &Database_GetTribesByOwner_Call{Call: _e.mock.On("GetTribesByOwner", pubkey)}
}

func (_c *Database_GetTribesByOwner_Call) Run(run func(pubkey string)) *Database_GetTribesByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetTribesByOwner_Call) Return(_a0 []db.Tribe) *Database_GetTribesByOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribesByOwner_Call) RunAndReturn(run func(string) []db.Tribe) *Database_GetTribesByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// GetTribesTotal provides a mock function with no fields
func (_m *Database) GetTribesTotal() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTribesTotal")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetTribesTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTribesTotal'
type Database_GetTribesTotal_Call struct {
	*mock.Call
}

// GetTribesTotal is a helper method to define mock.On call
func (_e *Database_Expecter) GetTribesTotal() *Database_GetTribesTotal_Call {
	return &Database_GetTribesTotal_Call{Call: _e.mock.On("GetTribesTotal")}
}

func (_c *Database_GetTribesTotal_Call) Run(run func()) *Database_GetTribesTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetTribesTotal_Call) Return(_a0 int64) *Database_GetTribesTotal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetTribesTotal_Call) RunAndReturn(run func() int64) *Database_GetTribesTotal_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnconfirmedGithub provides a mock function with no fields
func (_m *Database) GetUnconfirmedGithub() []db.Person {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUnconfirmedGithub")
	}

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func() []db.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// Database_GetUnconfirmedGithub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnconfirmedGithub'
type Database_GetUnconfirmedGithub_Call struct {
	*mock.Call
}

// GetUnconfirmedGithub is a helper method to define mock.On call
func (_e *Database_Expecter) GetUnconfirmedGithub() *Database_GetUnconfirmedGithub_Call {
	return &Database_GetUnconfirmedGithub_Call{Call: _e.mock.On("GetUnconfirmedGithub")}
}

func (_c *Database_GetUnconfirmedGithub_Call) Run(run func()) *Database_GetUnconfirmedGithub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetUnconfirmedGithub_Call) Return(_a0 []db.Person) *Database_GetUnconfirmedGithub_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUnconfirmedGithub_Call) RunAndReturn(run func() []db.Person) *Database_GetUnconfirmedGithub_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnconfirmedTwitter provides a mock function with no fields
func (_m *Database) GetUnconfirmedTwitter() []db.Person {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUnconfirmedTwitter")
	}

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func() []db.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// Database_GetUnconfirmedTwitter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnconfirmedTwitter'
type Database_GetUnconfirmedTwitter_Call struct {
	*mock.Call
}

// GetUnconfirmedTwitter is a helper method to define mock.On call
func (_e *Database_Expecter) GetUnconfirmedTwitter() *Database_GetUnconfirmedTwitter_Call {
	return &Database_GetUnconfirmedTwitter_Call{Call: _e.mock.On("GetUnconfirmedTwitter")}
}

func (_c *Database_GetUnconfirmedTwitter_Call) Run(run func()) *Database_GetUnconfirmedTwitter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetUnconfirmedTwitter_Call) Return(_a0 []db.Person) *Database_GetUnconfirmedTwitter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUnconfirmedTwitter_Call) RunAndReturn(run func() []db.Person) *Database_GetUnconfirmedTwitter_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAssignedWorkspaces provides a mock function with given fields: pubkey
func (_m *Database) GetUserAssignedWorkspaces(pubkey string) []db.WorkspaceUsers {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAssignedWorkspaces")
	}

	var r0 []db.WorkspaceUsers
	if rf, ok := ret.Get(0).(func(string) []db.WorkspaceUsers); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WorkspaceUsers)
		}
	}

	return r0
}

// Database_GetUserAssignedWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAssignedWorkspaces'
type Database_GetUserAssignedWorkspaces_Call struct {
	*mock.Call
}

// GetUserAssignedWorkspaces is a helper method to define mock.On call
//   - pubkey string
func (_e *Database_Expecter) GetUserAssignedWorkspaces(pubkey interface{}) *Database_GetUserAssignedWorkspaces_Call {
	return &Database_GetUserAssignedWorkspaces_Call{Call: _e.mock.On("GetUserAssignedWorkspaces", pubkey)}
}

func (_c *Database_GetUserAssignedWorkspaces_Call) Run(run func(pubkey string)) *Database_GetUserAssignedWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetUserAssignedWorkspaces_Call) Return(_a0 []db.WorkspaceUsers) *Database_GetUserAssignedWorkspaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUserAssignedWorkspaces_Call) RunAndReturn(run func(string) []db.WorkspaceUsers) *Database_GetUserAssignedWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserBountiesCount provides a mock function with given fields: personKey, tabType
func (_m *Database) GetUserBountiesCount(personKey string, tabType string) int64 {
	ret := _m.Called(personKey, tabType)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBountiesCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(personKey, tabType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetUserBountiesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserBountiesCount'
type Database_GetUserBountiesCount_Call struct {
	*mock.Call
}

// GetUserBountiesCount is a helper method to define mock.On call
//   - personKey string
//   - tabType string
func (_e *Database_Expecter) GetUserBountiesCount(personKey interface{}, tabType interface{}) *Database_GetUserBountiesCount_Call {
	return &Database_GetUserBountiesCount_Call{Call: _e.mock.On("GetUserBountiesCount", personKey, tabType)}
}

func (_c *Database_GetUserBountiesCount_Call) Run(run func(personKey string, tabType string)) *Database_GetUserBountiesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetUserBountiesCount_Call) Return(_a0 int64) *Database_GetUserBountiesCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUserBountiesCount_Call) RunAndReturn(run func(string, string) int64) *Database_GetUserBountiesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserCreatedWorkspaces provides a mock function with given fields: pubkey
func (_m *Database) GetUserCreatedWorkspaces(pubkey string) []db.Workspace {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCreatedWorkspaces")
	}

	var r0 []db.Workspace
	if rf, ok := ret.Get(0).(func(string) []db.Workspace); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Workspace)
		}
	}

	return r0
}

// Database_GetUserCreatedWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserCreatedWorkspaces'
type Database_GetUserCreatedWorkspaces_Call struct {
	*mock.Call
}

// GetUserCreatedWorkspaces is a helper method to define mock.On call
//   - pubkey string
func (_e *Database_Expecter) GetUserCreatedWorkspaces(pubkey interface{}) *Database_GetUserCreatedWorkspaces_Call {
	return &Database_GetUserCreatedWorkspaces_Call{Call: _e.mock.On("GetUserCreatedWorkspaces", pubkey)}
}

func (_c *Database_GetUserCreatedWorkspaces_Call) Run(run func(pubkey string)) *Database_GetUserCreatedWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetUserCreatedWorkspaces_Call) Return(_a0 []db.Workspace) *Database_GetUserCreatedWorkspaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUserCreatedWorkspaces_Call) RunAndReturn(run func(string) []db.Workspace) *Database_GetUserCreatedWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInvoiceData provides a mock function with given fields: payment_request
func (_m *Database) GetUserInvoiceData(payment_request string) db.UserInvoiceData {
	ret := _m.Called(payment_request)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInvoiceData")
	}

	var r0 db.UserInvoiceData
	if rf, ok := ret.Get(0).(func(string) db.UserInvoiceData); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.UserInvoiceData)
	}

	return r0
}

// Database_GetUserInvoiceData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInvoiceData'
type Database_GetUserInvoiceData_Call struct {
	*mock.Call
}

// GetUserInvoiceData is a helper method to define mock.On call
//   - payment_request string
func (_e *Database_Expecter) GetUserInvoiceData(payment_request interface{}) *Database_GetUserInvoiceData_Call {
	return &Database_GetUserInvoiceData_Call{Call: _e.mock.On("GetUserInvoiceData", payment_request)}
}

func (_c *Database_GetUserInvoiceData_Call) Run(run func(payment_request string)) *Database_GetUserInvoiceData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetUserInvoiceData_Call) Return(_a0 db.UserInvoiceData) *Database_GetUserInvoiceData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUserInvoiceData_Call) RunAndReturn(run func(string) db.UserInvoiceData) *Database_GetUserInvoiceData_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function with given fields: _a0, pubkey
func (_m *Database) GetUserRoles(_a0 string, pubkey string) []db.WorkspaceUserRoles {
	ret := _m.Called(_a0, pubkey)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []db.WorkspaceUserRoles
	if rf, ok := ret.Get(0).(func(string, string) []db.WorkspaceUserRoles); ok {
		r0 = rf(_a0, pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WorkspaceUserRoles)
		}
	}

	return r0
}

// Database_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type Database_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - _a0 string
//   - pubkey string
func (_e *Database_Expecter) GetUserRoles(_a0 interface{}, pubkey interface{}) *Database_GetUserRoles_Call {
	return &Database_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", _a0, pubkey)}
}

func (_c *Database_GetUserRoles_Call) Run(run func(_a0 string, pubkey string)) *Database_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetUserRoles_Call) Return(_a0 []db.WorkspaceUserRoles) *Database_GetUserRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetUserRoles_Call) RunAndReturn(run func(string, string) []db.WorkspaceUserRoles) *Database_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowRequest provides a mock function with given fields: requestID
func (_m *Database) GetWorkflowRequest(requestID string) (*db.WfRequest, error) {
	ret := _m.Called(requestID)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowRequest")
	}

	var r0 *db.WfRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.WfRequest, error)); ok {
		return rf(requestID)
	}
	if rf, ok := ret.Get(0).(func(string) *db.WfRequest); ok {
		r0 = rf(requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.WfRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetWorkflowRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowRequest'
type Database_GetWorkflowRequest_Call struct {
	*mock.Call
}

// GetWorkflowRequest is a helper method to define mock.On call
//   - requestID string
func (_e *Database_Expecter) GetWorkflowRequest(requestID interface{}) *Database_GetWorkflowRequest_Call {
	return &Database_GetWorkflowRequest_Call{Call: _e.mock.On("GetWorkflowRequest", requestID)}
}

func (_c *Database_GetWorkflowRequest_Call) Run(run func(requestID string)) *Database_GetWorkflowRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkflowRequest_Call) Return(_a0 *db.WfRequest, _a1 error) *Database_GetWorkflowRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetWorkflowRequest_Call) RunAndReturn(run func(string) (*db.WfRequest, error)) *Database_GetWorkflowRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowRequestByID provides a mock function with given fields: requestID
func (_m *Database) GetWorkflowRequestByID(requestID string) (*db.WfRequest, error) {
	ret := _m.Called(requestID)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowRequestByID")
	}

	var r0 *db.WfRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*db.WfRequest, error)); ok {
		return rf(requestID)
	}
	if rf, ok := ret.Get(0).(func(string) *db.WfRequest); ok {
		r0 = rf(requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.WfRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetWorkflowRequestByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowRequestByID'
type Database_GetWorkflowRequestByID_Call struct {
	*mock.Call
}

// GetWorkflowRequestByID is a helper method to define mock.On call
//   - requestID string
func (_e *Database_Expecter) GetWorkflowRequestByID(requestID interface{}) *Database_GetWorkflowRequestByID_Call {
	return &Database_GetWorkflowRequestByID_Call{Call: _e.mock.On("GetWorkflowRequestByID", requestID)}
}

func (_c *Database_GetWorkflowRequestByID_Call) Run(run func(requestID string)) *Database_GetWorkflowRequestByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkflowRequestByID_Call) Return(_a0 *db.WfRequest, _a1 error) *Database_GetWorkflowRequestByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetWorkflowRequestByID_Call) RunAndReturn(run func(string) (*db.WfRequest, error)) *Database_GetWorkflowRequestByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowRequestsByStatus provides a mock function with given fields: status
func (_m *Database) GetWorkflowRequestsByStatus(status db.WfRequestStatus) ([]db.WfRequest, error) {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowRequestsByStatus")
	}

	var r0 []db.WfRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(db.WfRequestStatus) ([]db.WfRequest, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(db.WfRequestStatus) []db.WfRequest); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WfRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(db.WfRequestStatus) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetWorkflowRequestsByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowRequestsByStatus'
type Database_GetWorkflowRequestsByStatus_Call struct {
	*mock.Call
}

// GetWorkflowRequestsByStatus is a helper method to define mock.On call
//   - status db.WfRequestStatus
func (_e *Database_Expecter) GetWorkflowRequestsByStatus(status interface{}) *Database_GetWorkflowRequestsByStatus_Call {
	return &Database_GetWorkflowRequestsByStatus_Call{Call: _e.mock.On("GetWorkflowRequestsByStatus", status)}
}

func (_c *Database_GetWorkflowRequestsByStatus_Call) Run(run func(status db.WfRequestStatus)) *Database_GetWorkflowRequestsByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.WfRequestStatus))
	})
	return _c
}

func (_c *Database_GetWorkflowRequestsByStatus_Call) Return(_a0 []db.WfRequest, _a1 error) *Database_GetWorkflowRequestsByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetWorkflowRequestsByStatus_Call) RunAndReturn(run func(db.WfRequestStatus) ([]db.WfRequest, error)) *Database_GetWorkflowRequestsByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowRequestsByWorkflowID provides a mock function with given fields: workflowID
func (_m *Database) GetWorkflowRequestsByWorkflowID(workflowID string) ([]db.WfRequest, error) {
	ret := _m.Called(workflowID)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowRequestsByWorkflowID")
	}

	var r0 []db.WfRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.WfRequest, error)); ok {
		return rf(workflowID)
	}
	if rf, ok := ret.Get(0).(func(string) []db.WfRequest); ok {
		r0 = rf(workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WfRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(workflowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetWorkflowRequestsByWorkflowID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowRequestsByWorkflowID'
type Database_GetWorkflowRequestsByWorkflowID_Call struct {
	*mock.Call
}

// GetWorkflowRequestsByWorkflowID is a helper method to define mock.On call
//   - workflowID string
func (_e *Database_Expecter) GetWorkflowRequestsByWorkflowID(workflowID interface{}) *Database_GetWorkflowRequestsByWorkflowID_Call {
	return &Database_GetWorkflowRequestsByWorkflowID_Call{Call: _e.mock.On("GetWorkflowRequestsByWorkflowID", workflowID)}
}

func (_c *Database_GetWorkflowRequestsByWorkflowID_Call) Run(run func(workflowID string)) *Database_GetWorkflowRequestsByWorkflowID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkflowRequestsByWorkflowID_Call) Return(_a0 []db.WfRequest, _a1 error) *Database_GetWorkflowRequestsByWorkflowID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetWorkflowRequestsByWorkflowID_Call) RunAndReturn(run func(string) ([]db.WfRequest, error)) *Database_GetWorkflowRequestsByWorkflowID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceBounties provides a mock function with given fields: r, workspace_uuid
func (_m *Database) GetWorkspaceBounties(r *http.Request, workspace_uuid string) []db.NewBounty {
	ret := _m.Called(r, workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceBounties")
	}

	var r0 []db.NewBounty
	if rf, ok := ret.Get(0).(func(*http.Request, string) []db.NewBounty); ok {
		r0 = rf(r, workspace_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewBounty)
		}
	}

	return r0
}

// Database_GetWorkspaceBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceBounties'
type Database_GetWorkspaceBounties_Call struct {
	*mock.Call
}

// GetWorkspaceBounties is a helper method to define mock.On call
//   - r *http.Request
//   - workspace_uuid string
func (_e *Database_Expecter) GetWorkspaceBounties(r interface{}, workspace_uuid interface{}) *Database_GetWorkspaceBounties_Call {
	return &Database_GetWorkspaceBounties_Call{Call: _e.mock.On("GetWorkspaceBounties", r, workspace_uuid)}
}

func (_c *Database_GetWorkspaceBounties_Call) Run(run func(r *http.Request, workspace_uuid string)) *Database_GetWorkspaceBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceBounties_Call) Return(_a0 []db.NewBounty) *Database_GetWorkspaceBounties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceBounties_Call) RunAndReturn(run func(*http.Request, string) []db.NewBounty) *Database_GetWorkspaceBounties_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceBountiesCount provides a mock function with given fields: r, workspace_uuid
func (_m *Database) GetWorkspaceBountiesCount(r *http.Request, workspace_uuid string) int64 {
	ret := _m.Called(r, workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceBountiesCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(*http.Request, string) int64); ok {
		r0 = rf(r, workspace_uuid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetWorkspaceBountiesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceBountiesCount'
type Database_GetWorkspaceBountiesCount_Call struct {
	*mock.Call
}

// GetWorkspaceBountiesCount is a helper method to define mock.On call
//   - r *http.Request
//   - workspace_uuid string
func (_e *Database_Expecter) GetWorkspaceBountiesCount(r interface{}, workspace_uuid interface{}) *Database_GetWorkspaceBountiesCount_Call {
	return &Database_GetWorkspaceBountiesCount_Call{Call: _e.mock.On("GetWorkspaceBountiesCount", r, workspace_uuid)}
}

func (_c *Database_GetWorkspaceBountiesCount_Call) Run(run func(r *http.Request, workspace_uuid string)) *Database_GetWorkspaceBountiesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceBountiesCount_Call) Return(_a0 int64) *Database_GetWorkspaceBountiesCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceBountiesCount_Call) RunAndReturn(run func(*http.Request, string) int64) *Database_GetWorkspaceBountiesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceBountyCardsData provides a mock function with given fields: r
func (_m *Database) GetWorkspaceBountyCardsData(r *http.Request) []db.NewBounty {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceBountyCardsData")
	}

	var r0 []db.NewBounty
	if rf, ok := ret.Get(0).(func(*http.Request) []db.NewBounty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewBounty)
		}
	}

	return r0
}

// Database_GetWorkspaceBountyCardsData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceBountyCardsData'
type Database_GetWorkspaceBountyCardsData_Call struct {
	*mock.Call
}

// GetWorkspaceBountyCardsData is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetWorkspaceBountyCardsData(r interface{}) *Database_GetWorkspaceBountyCardsData_Call {
	return &Database_GetWorkspaceBountyCardsData_Call{Call: _e.mock.On("GetWorkspaceBountyCardsData", r)}
}

func (_c *Database_GetWorkspaceBountyCardsData_Call) Run(run func(r *http.Request)) *Database_GetWorkspaceBountyCardsData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetWorkspaceBountyCardsData_Call) Return(_a0 []db.NewBounty) *Database_GetWorkspaceBountyCardsData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceBountyCardsData_Call) RunAndReturn(run func(*http.Request) []db.NewBounty) *Database_GetWorkspaceBountyCardsData_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceBountyCount provides a mock function with given fields: _a0
func (_m *Database) GetWorkspaceBountyCount(_a0 string) int64 {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceBountyCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetWorkspaceBountyCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceBountyCount'
type Database_GetWorkspaceBountyCount_Call struct {
	*mock.Call
}

// GetWorkspaceBountyCount is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetWorkspaceBountyCount(_a0 interface{}) *Database_GetWorkspaceBountyCount_Call {
	return &Database_GetWorkspaceBountyCount_Call{Call: _e.mock.On("GetWorkspaceBountyCount", _a0)}
}

func (_c *Database_GetWorkspaceBountyCount_Call) Run(run func(_a0 string)) *Database_GetWorkspaceBountyCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceBountyCount_Call) Return(_a0 int64) *Database_GetWorkspaceBountyCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceBountyCount_Call) RunAndReturn(run func(string) int64) *Database_GetWorkspaceBountyCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceBudget provides a mock function with given fields: workspace_uuid
func (_m *Database) GetWorkspaceBudget(workspace_uuid string) db.NewBountyBudget {
	ret := _m.Called(workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceBudget")
	}

	var r0 db.NewBountyBudget
	if rf, ok := ret.Get(0).(func(string) db.NewBountyBudget); ok {
		r0 = rf(workspace_uuid)
	} else {
		r0 = ret.Get(0).(db.NewBountyBudget)
	}

	return r0
}

// Database_GetWorkspaceBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceBudget'
type Database_GetWorkspaceBudget_Call struct {
	*mock.Call
}

// GetWorkspaceBudget is a helper method to define mock.On call
//   - workspace_uuid string
func (_e *Database_Expecter) GetWorkspaceBudget(workspace_uuid interface{}) *Database_GetWorkspaceBudget_Call {
	return &Database_GetWorkspaceBudget_Call{Call: _e.mock.On("GetWorkspaceBudget", workspace_uuid)}
}

func (_c *Database_GetWorkspaceBudget_Call) Run(run func(workspace_uuid string)) *Database_GetWorkspaceBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceBudget_Call) Return(_a0 db.NewBountyBudget) *Database_GetWorkspaceBudget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceBudget_Call) RunAndReturn(run func(string) db.NewBountyBudget) *Database_GetWorkspaceBudget_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceBudgetHistory provides a mock function with given fields: workspace_uuid
func (_m *Database) GetWorkspaceBudgetHistory(workspace_uuid string) []db.BudgetHistoryData {
	ret := _m.Called(workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceBudgetHistory")
	}

	var r0 []db.BudgetHistoryData
	if rf, ok := ret.Get(0).(func(string) []db.BudgetHistoryData); ok {
		r0 = rf(workspace_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BudgetHistoryData)
		}
	}

	return r0
}

// Database_GetWorkspaceBudgetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceBudgetHistory'
type Database_GetWorkspaceBudgetHistory_Call struct {
	*mock.Call
}

// GetWorkspaceBudgetHistory is a helper method to define mock.On call
//   - workspace_uuid string
func (_e *Database_Expecter) GetWorkspaceBudgetHistory(workspace_uuid interface{}) *Database_GetWorkspaceBudgetHistory_Call {
	return &Database_GetWorkspaceBudgetHistory_Call{Call: _e.mock.On("GetWorkspaceBudgetHistory", workspace_uuid)}
}

func (_c *Database_GetWorkspaceBudgetHistory_Call) Run(run func(workspace_uuid string)) *Database_GetWorkspaceBudgetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceBudgetHistory_Call) Return(_a0 []db.BudgetHistoryData) *Database_GetWorkspaceBudgetHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceBudgetHistory_Call) RunAndReturn(run func(string) []db.BudgetHistoryData) *Database_GetWorkspaceBudgetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceByName provides a mock function with given fields: name
func (_m *Database) GetWorkspaceByName(name string) db.Workspace {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceByName")
	}

	var r0 db.Workspace
	if rf, ok := ret.Get(0).(func(string) db.Workspace); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(db.Workspace)
	}

	return r0
}

// Database_GetWorkspaceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceByName'
type Database_GetWorkspaceByName_Call struct {
	*mock.Call
}

// GetWorkspaceByName is a helper method to define mock.On call
//   - name string
func (_e *Database_Expecter) GetWorkspaceByName(name interface{}) *Database_GetWorkspaceByName_Call {
	return &Database_GetWorkspaceByName_Call{Call: _e.mock.On("GetWorkspaceByName", name)}
}

func (_c *Database_GetWorkspaceByName_Call) Run(run func(name string)) *Database_GetWorkspaceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceByName_Call) Return(_a0 db.Workspace) *Database_GetWorkspaceByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceByName_Call) RunAndReturn(run func(string) db.Workspace) *Database_GetWorkspaceByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceByUuid provides a mock function with given fields: _a0
func (_m *Database) GetWorkspaceByUuid(_a0 string) db.Workspace {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceByUuid")
	}

	var r0 db.Workspace
	if rf, ok := ret.Get(0).(func(string) db.Workspace); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(db.Workspace)
	}

	return r0
}

// Database_GetWorkspaceByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceByUuid'
type Database_GetWorkspaceByUuid_Call struct {
	*mock.Call
}

// GetWorkspaceByUuid is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetWorkspaceByUuid(_a0 interface{}) *Database_GetWorkspaceByUuid_Call {
	return &Database_GetWorkspaceByUuid_Call{Call: _e.mock.On("GetWorkspaceByUuid", _a0)}
}

func (_c *Database_GetWorkspaceByUuid_Call) Run(run func(_a0 string)) *Database_GetWorkspaceByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceByUuid_Call) Return(_a0 db.Workspace) *Database_GetWorkspaceByUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceByUuid_Call) RunAndReturn(run func(string) db.Workspace) *Database_GetWorkspaceByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceFeaturesCount provides a mock function with given fields: _a0
func (_m *Database) GetWorkspaceFeaturesCount(_a0 string) int64 {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceFeaturesCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetWorkspaceFeaturesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceFeaturesCount'
type Database_GetWorkspaceFeaturesCount_Call struct {
	*mock.Call
}

// GetWorkspaceFeaturesCount is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetWorkspaceFeaturesCount(_a0 interface{}) *Database_GetWorkspaceFeaturesCount_Call {
	return &Database_GetWorkspaceFeaturesCount_Call{Call: _e.mock.On("GetWorkspaceFeaturesCount", _a0)}
}

func (_c *Database_GetWorkspaceFeaturesCount_Call) Run(run func(_a0 string)) *Database_GetWorkspaceFeaturesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceFeaturesCount_Call) Return(_a0 int64) *Database_GetWorkspaceFeaturesCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceFeaturesCount_Call) RunAndReturn(run func(string) int64) *Database_GetWorkspaceFeaturesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceInvoices provides a mock function with given fields: workspace_uuid
func (_m *Database) GetWorkspaceInvoices(workspace_uuid string) []db.NewInvoiceList {
	ret := _m.Called(workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceInvoices")
	}

	var r0 []db.NewInvoiceList
	if rf, ok := ret.Get(0).(func(string) []db.NewInvoiceList); ok {
		r0 = rf(workspace_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewInvoiceList)
		}
	}

	return r0
}

// Database_GetWorkspaceInvoices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceInvoices'
type Database_GetWorkspaceInvoices_Call struct {
	*mock.Call
}

// GetWorkspaceInvoices is a helper method to define mock.On call
//   - workspace_uuid string
func (_e *Database_Expecter) GetWorkspaceInvoices(workspace_uuid interface{}) *Database_GetWorkspaceInvoices_Call {
	return &Database_GetWorkspaceInvoices_Call{Call: _e.mock.On("GetWorkspaceInvoices", workspace_uuid)}
}

func (_c *Database_GetWorkspaceInvoices_Call) Run(run func(workspace_uuid string)) *Database_GetWorkspaceInvoices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceInvoices_Call) Return(_a0 []db.NewInvoiceList) *Database_GetWorkspaceInvoices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceInvoices_Call) RunAndReturn(run func(string) []db.NewInvoiceList) *Database_GetWorkspaceInvoices_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceInvoicesCount provides a mock function with given fields: workspace_uuid
func (_m *Database) GetWorkspaceInvoicesCount(workspace_uuid string) int64 {
	ret := _m.Called(workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceInvoicesCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(workspace_uuid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetWorkspaceInvoicesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceInvoicesCount'
type Database_GetWorkspaceInvoicesCount_Call struct {
	*mock.Call
}

// GetWorkspaceInvoicesCount is a helper method to define mock.On call
//   - workspace_uuid string
func (_e *Database_Expecter) GetWorkspaceInvoicesCount(workspace_uuid interface{}) *Database_GetWorkspaceInvoicesCount_Call {
	return &Database_GetWorkspaceInvoicesCount_Call{Call: _e.mock.On("GetWorkspaceInvoicesCount", workspace_uuid)}
}

func (_c *Database_GetWorkspaceInvoicesCount_Call) Run(run func(workspace_uuid string)) *Database_GetWorkspaceInvoicesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceInvoicesCount_Call) Return(_a0 int64) *Database_GetWorkspaceInvoicesCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceInvoicesCount_Call) RunAndReturn(run func(string) int64) *Database_GetWorkspaceInvoicesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspacePendingPayments provides a mock function with given fields: workspace_uuid
func (_m *Database) GetWorkspacePendingPayments(workspace_uuid string) []db.NewPaymentHistory {
	ret := _m.Called(workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspacePendingPayments")
	}

	var r0 []db.NewPaymentHistory
	if rf, ok := ret.Get(0).(func(string) []db.NewPaymentHistory); ok {
		r0 = rf(workspace_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NewPaymentHistory)
		}
	}

	return r0
}

// Database_GetWorkspacePendingPayments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspacePendingPayments'
type Database_GetWorkspacePendingPayments_Call struct {
	*mock.Call
}

// GetWorkspacePendingPayments is a helper method to define mock.On call
//   - workspace_uuid string
func (_e *Database_Expecter) GetWorkspacePendingPayments(workspace_uuid interface{}) *Database_GetWorkspacePendingPayments_Call {
	return &Database_GetWorkspacePendingPayments_Call{Call: _e.mock.On("GetWorkspacePendingPayments", workspace_uuid)}
}

func (_c *Database_GetWorkspacePendingPayments_Call) Run(run func(workspace_uuid string)) *Database_GetWorkspacePendingPayments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspacePendingPayments_Call) Return(_a0 []db.NewPaymentHistory) *Database_GetWorkspacePendingPayments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspacePendingPayments_Call) RunAndReturn(run func(string) []db.NewPaymentHistory) *Database_GetWorkspacePendingPayments_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceRepoByWorkspaceUuidAndRepoUuid provides a mock function with given fields: workspace_uuid, _a1
func (_m *Database) GetWorkspaceRepoByWorkspaceUuidAndRepoUuid(workspace_uuid string, _a1 string) (db.WorkspaceRepositories, error) {
	ret := _m.Called(workspace_uuid, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceRepoByWorkspaceUuidAndRepoUuid")
	}

	var r0 db.WorkspaceRepositories
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (db.WorkspaceRepositories, error)); ok {
		return rf(workspace_uuid, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) db.WorkspaceRepositories); ok {
		r0 = rf(workspace_uuid, _a1)
	} else {
		r0 = ret.Get(0).(db.WorkspaceRepositories)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(workspace_uuid, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetWorkspaceRepoByWorkspaceUuidAndRepoUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceRepoByWorkspaceUuidAndRepoUuid'
type Database_GetWorkspaceRepoByWorkspaceUuidAndRepoUuid_Call struct {
	*mock.Call
}

// GetWorkspaceRepoByWorkspaceUuidAndRepoUuid is a helper method to define mock.On call
//   - workspace_uuid string
//   - _a1 string
func (_e *Database_Expecter) GetWorkspaceRepoByWorkspaceUuidAndRepoUuid(workspace_uuid interface{}, _a1 interface{}) *Database_GetWorkspaceRepoByWorkspaceUuidAndRepoUuid_Call {
	return &Database_GetWorkspaceRepoByWorkspaceUuidAndRepoUuid_Call{Call: _e.mock.On("GetWorkspaceRepoByWorkspaceUuidAndRepoUuid", workspace_uuid, _a1)}
}

func (_c *Database_GetWorkspaceRepoByWorkspaceUuidAndRepoUuid_Call) Run(run func(workspace_uuid string, _a1 string)) *Database_GetWorkspaceRepoByWorkspaceUuidAndRepoUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceRepoByWorkspaceUuidAndRepoUuid_Call) Return(_a0 db.WorkspaceRepositories, _a1 error) *Database_GetWorkspaceRepoByWorkspaceUuidAndRepoUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetWorkspaceRepoByWorkspaceUuidAndRepoUuid_Call) RunAndReturn(run func(string, string) (db.WorkspaceRepositories, error)) *Database_GetWorkspaceRepoByWorkspaceUuidAndRepoUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceRepositorByWorkspaceUuid provides a mock function with given fields: _a0
func (_m *Database) GetWorkspaceRepositorByWorkspaceUuid(_a0 string) []db.WorkspaceRepositories {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceRepositorByWorkspaceUuid")
	}

	var r0 []db.WorkspaceRepositories
	if rf, ok := ret.Get(0).(func(string) []db.WorkspaceRepositories); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WorkspaceRepositories)
		}
	}

	return r0
}

// Database_GetWorkspaceRepositorByWorkspaceUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceRepositorByWorkspaceUuid'
type Database_GetWorkspaceRepositorByWorkspaceUuid_Call struct {
	*mock.Call
}

// GetWorkspaceRepositorByWorkspaceUuid is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetWorkspaceRepositorByWorkspaceUuid(_a0 interface{}) *Database_GetWorkspaceRepositorByWorkspaceUuid_Call {
	return &Database_GetWorkspaceRepositorByWorkspaceUuid_Call{Call: _e.mock.On("GetWorkspaceRepositorByWorkspaceUuid", _a0)}
}

func (_c *Database_GetWorkspaceRepositorByWorkspaceUuid_Call) Run(run func(_a0 string)) *Database_GetWorkspaceRepositorByWorkspaceUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceRepositorByWorkspaceUuid_Call) Return(_a0 []db.WorkspaceRepositories) *Database_GetWorkspaceRepositorByWorkspaceUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceRepositorByWorkspaceUuid_Call) RunAndReturn(run func(string) []db.WorkspaceRepositories) *Database_GetWorkspaceRepositorByWorkspaceUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceStatusBudget provides a mock function with given fields: workspace_uuid
func (_m *Database) GetWorkspaceStatusBudget(workspace_uuid string) db.StatusBudget {
	ret := _m.Called(workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceStatusBudget")
	}

	var r0 db.StatusBudget
	if rf, ok := ret.Get(0).(func(string) db.StatusBudget); ok {
		r0 = rf(workspace_uuid)
	} else {
		r0 = ret.Get(0).(db.StatusBudget)
	}

	return r0
}

// Database_GetWorkspaceStatusBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceStatusBudget'
type Database_GetWorkspaceStatusBudget_Call struct {
	*mock.Call
}

// GetWorkspaceStatusBudget is a helper method to define mock.On call
//   - workspace_uuid string
func (_e *Database_Expecter) GetWorkspaceStatusBudget(workspace_uuid interface{}) *Database_GetWorkspaceStatusBudget_Call {
	return &Database_GetWorkspaceStatusBudget_Call{Call: _e.mock.On("GetWorkspaceStatusBudget", workspace_uuid)}
}

func (_c *Database_GetWorkspaceStatusBudget_Call) Run(run func(workspace_uuid string)) *Database_GetWorkspaceStatusBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceStatusBudget_Call) Return(_a0 db.StatusBudget) *Database_GetWorkspaceStatusBudget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceStatusBudget_Call) RunAndReturn(run func(string) db.StatusBudget) *Database_GetWorkspaceStatusBudget_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceUser provides a mock function with given fields: pubkey, workspace_uuid
func (_m *Database) GetWorkspaceUser(pubkey string, workspace_uuid string) db.WorkspaceUsers {
	ret := _m.Called(pubkey, workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceUser")
	}

	var r0 db.WorkspaceUsers
	if rf, ok := ret.Get(0).(func(string, string) db.WorkspaceUsers); ok {
		r0 = rf(pubkey, workspace_uuid)
	} else {
		r0 = ret.Get(0).(db.WorkspaceUsers)
	}

	return r0
}

// Database_GetWorkspaceUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceUser'
type Database_GetWorkspaceUser_Call struct {
	*mock.Call
}

// GetWorkspaceUser is a helper method to define mock.On call
//   - pubkey string
//   - workspace_uuid string
func (_e *Database_Expecter) GetWorkspaceUser(pubkey interface{}, workspace_uuid interface{}) *Database_GetWorkspaceUser_Call {
	return &Database_GetWorkspaceUser_Call{Call: _e.mock.On("GetWorkspaceUser", pubkey, workspace_uuid)}
}

func (_c *Database_GetWorkspaceUser_Call) Run(run func(pubkey string, workspace_uuid string)) *Database_GetWorkspaceUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceUser_Call) Return(_a0 db.WorkspaceUsers) *Database_GetWorkspaceUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceUser_Call) RunAndReturn(run func(string, string) db.WorkspaceUsers) *Database_GetWorkspaceUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceUsers provides a mock function with given fields: _a0
func (_m *Database) GetWorkspaceUsers(_a0 string) ([]db.WorkspaceUsersData, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceUsers")
	}

	var r0 []db.WorkspaceUsersData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.WorkspaceUsersData, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []db.WorkspaceUsersData); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WorkspaceUsersData)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetWorkspaceUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceUsers'
type Database_GetWorkspaceUsers_Call struct {
	*mock.Call
}

// GetWorkspaceUsers is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetWorkspaceUsers(_a0 interface{}) *Database_GetWorkspaceUsers_Call {
	return &Database_GetWorkspaceUsers_Call{Call: _e.mock.On("GetWorkspaceUsers", _a0)}
}

func (_c *Database_GetWorkspaceUsers_Call) Run(run func(_a0 string)) *Database_GetWorkspaceUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceUsers_Call) Return(_a0 []db.WorkspaceUsersData, _a1 error) *Database_GetWorkspaceUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetWorkspaceUsers_Call) RunAndReturn(run func(string) ([]db.WorkspaceUsersData, error)) *Database_GetWorkspaceUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceUsersCount provides a mock function with given fields: _a0
func (_m *Database) GetWorkspaceUsersCount(_a0 string) int64 {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceUsersCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetWorkspaceUsersCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceUsersCount'
type Database_GetWorkspaceUsersCount_Call struct {
	*mock.Call
}

// GetWorkspaceUsersCount is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) GetWorkspaceUsersCount(_a0 interface{}) *Database_GetWorkspaceUsersCount_Call {
	return &Database_GetWorkspaceUsersCount_Call{Call: _e.mock.On("GetWorkspaceUsersCount", _a0)}
}

func (_c *Database_GetWorkspaceUsersCount_Call) Run(run func(_a0 string)) *Database_GetWorkspaceUsersCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetWorkspaceUsersCount_Call) Return(_a0 int64) *Database_GetWorkspaceUsersCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaceUsersCount_Call) RunAndReturn(run func(string) int64) *Database_GetWorkspaceUsersCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaces provides a mock function with given fields: r
func (_m *Database) GetWorkspaces(r *http.Request) []db.Workspace {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaces")
	}

	var r0 []db.Workspace
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Workspace); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Workspace)
		}
	}

	return r0
}

// Database_GetWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaces'
type Database_GetWorkspaces_Call struct {
	*mock.Call
}

// GetWorkspaces is a helper method to define mock.On call
//   - r *http.Request
func (_e *Database_Expecter) GetWorkspaces(r interface{}) *Database_GetWorkspaces_Call {
	return &Database_GetWorkspaces_Call{Call: _e.mock.On("GetWorkspaces", r)}
}

func (_c *Database_GetWorkspaces_Call) Run(run func(r *http.Request)) *Database_GetWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Database_GetWorkspaces_Call) Return(_a0 []db.Workspace) *Database_GetWorkspaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspaces_Call) RunAndReturn(run func(*http.Request) []db.Workspace) *Database_GetWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspacesCount provides a mock function with no fields
func (_m *Database) GetWorkspacesCount() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspacesCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_GetWorkspacesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspacesCount'
type Database_GetWorkspacesCount_Call struct {
	*mock.Call
}

// GetWorkspacesCount is a helper method to define mock.On call
func (_e *Database_Expecter) GetWorkspacesCount() *Database_GetWorkspacesCount_Call {
	return &Database_GetWorkspacesCount_Call{Call: _e.mock.On("GetWorkspacesCount")}
}

func (_c *Database_GetWorkspacesCount_Call) Run(run func()) *Database_GetWorkspacesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetWorkspacesCount_Call) Return(_a0 int64) *Database_GetWorkspacesCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetWorkspacesCount_Call) RunAndReturn(run func() int64) *Database_GetWorkspacesCount_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementProofCount provides a mock function with given fields: bountyID
func (_m *Database) IncrementProofCount(bountyID uint) error {
	ret := _m.Called(bountyID)

	if len(ret) == 0 {
		panic("no return value specified for IncrementProofCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(bountyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_IncrementProofCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementProofCount'
type Database_IncrementProofCount_Call struct {
	*mock.Call
}

// IncrementProofCount is a helper method to define mock.On call
//   - bountyID uint
func (_e *Database_Expecter) IncrementProofCount(bountyID interface{}) *Database_IncrementProofCount_Call {
	return &Database_IncrementProofCount_Call{Call: _e.mock.On("IncrementProofCount", bountyID)}
}

func (_c *Database_IncrementProofCount_Call) Run(run func(bountyID uint)) *Database_IncrementProofCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_IncrementProofCount_Call) Return(_a0 error) *Database_IncrementProofCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_IncrementProofCount_Call) RunAndReturn(run func(uint) error) *Database_IncrementProofCount_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementRetryCount provides a mock function with given fields: _a0
func (_m *Database) IncrementRetryCount(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IncrementRetryCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_IncrementRetryCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementRetryCount'
type Database_IncrementRetryCount_Call struct {
	*mock.Call
}

// IncrementRetryCount is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) IncrementRetryCount(_a0 interface{}) *Database_IncrementRetryCount_Call {
	return &Database_IncrementRetryCount_Call{Call: _e.mock.On("IncrementRetryCount", _a0)}
}

func (_c *Database_IncrementRetryCount_Call) Run(run func(_a0 string)) *Database_IncrementRetryCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_IncrementRetryCount_Call) Return(_a0 error) *Database_IncrementRetryCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_IncrementRetryCount_Call) RunAndReturn(run func(string) error) *Database_IncrementRetryCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewHuntersPaid provides a mock function with given fields: r, workspace
func (_m *Database) NewHuntersPaid(r db.PaymentDateRange, workspace string) int64 {
	ret := _m.Called(r, workspace)

	if len(ret) == 0 {
		panic("no return value specified for NewHuntersPaid")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, string) int64); ok {
		r0 = rf(r, workspace)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_NewHuntersPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewHuntersPaid'
type Database_NewHuntersPaid_Call struct {
	*mock.Call
}

// NewHuntersPaid is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - workspace string
func (_e *Database_Expecter) NewHuntersPaid(r interface{}, workspace interface{}) *Database_NewHuntersPaid_Call {
	return &Database_NewHuntersPaid_Call{Call: _e.mock.On("NewHuntersPaid", r, workspace)}
}

func (_c *Database_NewHuntersPaid_Call) Run(run func(r db.PaymentDateRange, workspace string)) *Database_NewHuntersPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(string))
	})
	return _c
}

func (_c *Database_NewHuntersPaid_Call) Return(_a0 int64) *Database_NewHuntersPaid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_NewHuntersPaid_Call) RunAndReturn(run func(db.PaymentDateRange, string) int64) *Database_NewHuntersPaid_Call {
	_c.Call.Return(run)
	return _c
}

// PersonUniqueNameFromName provides a mock function with given fields: name
func (_m *Database) PersonUniqueNameFromName(name string) (string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for PersonUniqueNameFromName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_PersonUniqueNameFromName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PersonUniqueNameFromName'
type Database_PersonUniqueNameFromName_Call struct {
	*mock.Call
}

// PersonUniqueNameFromName is a helper method to define mock.On call
//   - name string
func (_e *Database_Expecter) PersonUniqueNameFromName(name interface{}) *Database_PersonUniqueNameFromName_Call {
	return &Database_PersonUniqueNameFromName_Call{Call: _e.mock.On("PersonUniqueNameFromName", name)}
}

func (_c *Database_PersonUniqueNameFromName_Call) Run(run func(name string)) *Database_PersonUniqueNameFromName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_PersonUniqueNameFromName_Call) Return(_a0 string, _a1 error) *Database_PersonUniqueNameFromName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_PersonUniqueNameFromName_Call) RunAndReturn(run func(string) (string, error)) *Database_PersonUniqueNameFromName_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessAddInvoice provides a mock function with given fields: invoice, userData
func (_m *Database) ProcessAddInvoice(invoice db.NewInvoiceList, userData db.UserInvoiceData) error {
	ret := _m.Called(invoice, userData)

	if len(ret) == 0 {
		panic("no return value specified for ProcessAddInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(db.NewInvoiceList, db.UserInvoiceData) error); ok {
		r0 = rf(invoice, userData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_ProcessAddInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessAddInvoice'
type Database_ProcessAddInvoice_Call struct {
	*mock.Call
}

// ProcessAddInvoice is a helper method to define mock.On call
//   - invoice db.NewInvoiceList
//   - userData db.UserInvoiceData
func (_e *Database_Expecter) ProcessAddInvoice(invoice interface{}, userData interface{}) *Database_ProcessAddInvoice_Call {
	return &Database_ProcessAddInvoice_Call{Call: _e.mock.On("ProcessAddInvoice", invoice, userData)}
}

func (_c *Database_ProcessAddInvoice_Call) Run(run func(invoice db.NewInvoiceList, userData db.UserInvoiceData)) *Database_ProcessAddInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewInvoiceList), args[1].(db.UserInvoiceData))
	})
	return _c
}

func (_c *Database_ProcessAddInvoice_Call) Return(_a0 error) *Database_ProcessAddInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_ProcessAddInvoice_Call) RunAndReturn(run func(db.NewInvoiceList, db.UserInvoiceData) error) *Database_ProcessAddInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessAlerts provides a mock function with given fields: p
func (_m *Database) ProcessAlerts(p db.Person) {
	_m.Called(p)
}

// Database_ProcessAlerts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessAlerts'
type Database_ProcessAlerts_Call struct {
	*mock.Call
}

// ProcessAlerts is a helper method to define mock.On call
//   - p db.Person
func (_e *Database_Expecter) ProcessAlerts(p interface{}) *Database_ProcessAlerts_Call {
	return &Database_ProcessAlerts_Call{Call: _e.mock.On("ProcessAlerts", p)}
}

func (_c *Database_ProcessAlerts_Call) Run(run func(p db.Person)) *Database_ProcessAlerts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Person))
	})
	return _c
}

func (_c *Database_ProcessAlerts_Call) Return() *Database_ProcessAlerts_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_ProcessAlerts_Call) RunAndReturn(run func(db.Person)) *Database_ProcessAlerts_Call {
	_c.Run(run)
	return _c
}

// ProcessBountyPayment provides a mock function with given fields: payment, bounty
func (_m *Database) ProcessBountyPayment(payment db.NewPaymentHistory, bounty db.NewBounty) error {
	ret := _m.Called(payment, bounty)

	if len(ret) == 0 {
		panic("no return value specified for ProcessBountyPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(db.NewPaymentHistory, db.NewBounty) error); ok {
		r0 = rf(payment, bounty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_ProcessBountyPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessBountyPayment'
type Database_ProcessBountyPayment_Call struct {
	*mock.Call
}

// ProcessBountyPayment is a helper method to define mock.On call
//   - payment db.NewPaymentHistory
//   - bounty db.NewBounty
func (_e *Database_Expecter) ProcessBountyPayment(payment interface{}, bounty interface{}) *Database_ProcessBountyPayment_Call {
	return &Database_ProcessBountyPayment_Call{Call: _e.mock.On("ProcessBountyPayment", payment, bounty)}
}

func (_c *Database_ProcessBountyPayment_Call) Run(run func(payment db.NewPaymentHistory, bounty db.NewBounty)) *Database_ProcessBountyPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewPaymentHistory), args[1].(db.NewBounty))
	})
	return _c
}

func (_c *Database_ProcessBountyPayment_Call) Return(_a0 error) *Database_ProcessBountyPayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_ProcessBountyPayment_Call) RunAndReturn(run func(db.NewPaymentHistory, db.NewBounty) error) *Database_ProcessBountyPayment_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessBudgetInvoice provides a mock function with given fields: paymentHistory, newInvoice
func (_m *Database) ProcessBudgetInvoice(paymentHistory db.NewPaymentHistory, newInvoice db.NewInvoiceList) error {
	ret := _m.Called(paymentHistory, newInvoice)

	if len(ret) == 0 {
		panic("no return value specified for ProcessBudgetInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(db.NewPaymentHistory, db.NewInvoiceList) error); ok {
		r0 = rf(paymentHistory, newInvoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_ProcessBudgetInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessBudgetInvoice'
type Database_ProcessBudgetInvoice_Call struct {
	*mock.Call
}

// ProcessBudgetInvoice is a helper method to define mock.On call
//   - paymentHistory db.NewPaymentHistory
//   - newInvoice db.NewInvoiceList
func (_e *Database_Expecter) ProcessBudgetInvoice(paymentHistory interface{}, newInvoice interface{}) *Database_ProcessBudgetInvoice_Call {
	return &Database_ProcessBudgetInvoice_Call{Call: _e.mock.On("ProcessBudgetInvoice", paymentHistory, newInvoice)}
}

func (_c *Database_ProcessBudgetInvoice_Call) Run(run func(paymentHistory db.NewPaymentHistory, newInvoice db.NewInvoiceList)) *Database_ProcessBudgetInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewPaymentHistory), args[1].(db.NewInvoiceList))
	})
	return _c
}

func (_c *Database_ProcessBudgetInvoice_Call) Return(_a0 error) *Database_ProcessBudgetInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_ProcessBudgetInvoice_Call) RunAndReturn(run func(db.NewPaymentHistory, db.NewInvoiceList) error) *Database_ProcessBudgetInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessDeleteWorkspace provides a mock function with given fields: workspace_uuid
func (_m *Database) ProcessDeleteWorkspace(workspace_uuid string) error {
	ret := _m.Called(workspace_uuid)

	if len(ret) == 0 {
		panic("no return value specified for ProcessDeleteWorkspace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(workspace_uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_ProcessDeleteWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessDeleteWorkspace'
type Database_ProcessDeleteWorkspace_Call struct {
	*mock.Call
}

// ProcessDeleteWorkspace is a helper method to define mock.On call
//   - workspace_uuid string
func (_e *Database_Expecter) ProcessDeleteWorkspace(workspace_uuid interface{}) *Database_ProcessDeleteWorkspace_Call {
	return &Database_ProcessDeleteWorkspace_Call{Call: _e.mock.On("ProcessDeleteWorkspace", workspace_uuid)}
}

func (_c *Database_ProcessDeleteWorkspace_Call) Run(run func(workspace_uuid string)) *Database_ProcessDeleteWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_ProcessDeleteWorkspace_Call) Return(_a0 error) *Database_ProcessDeleteWorkspace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_ProcessDeleteWorkspace_Call) RunAndReturn(run func(string) error) *Database_ProcessDeleteWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessReversePayments provides a mock function with given fields: paymentId
func (_m *Database) ProcessReversePayments(paymentId uint) error {
	ret := _m.Called(paymentId)

	if len(ret) == 0 {
		panic("no return value specified for ProcessReversePayments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(paymentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_ProcessReversePayments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessReversePayments'
type Database_ProcessReversePayments_Call struct {
	*mock.Call
}

// ProcessReversePayments is a helper method to define mock.On call
//   - paymentId uint
func (_e *Database_Expecter) ProcessReversePayments(paymentId interface{}) *Database_ProcessReversePayments_Call {
	return &Database_ProcessReversePayments_Call{Call: _e.mock.On("ProcessReversePayments", paymentId)}
}

func (_c *Database_ProcessReversePayments_Call) Run(run func(paymentId uint)) *Database_ProcessReversePayments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_ProcessReversePayments_Call) Return(_a0 error) *Database_ProcessReversePayments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_ProcessReversePayments_Call) RunAndReturn(run func(uint) error) *Database_ProcessReversePayments_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessUpdateBudget provides a mock function with given fields: invoice
func (_m *Database) ProcessUpdateBudget(invoice db.NewInvoiceList) error {
	ret := _m.Called(invoice)

	if len(ret) == 0 {
		panic("no return value specified for ProcessUpdateBudget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(db.NewInvoiceList) error); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_ProcessUpdateBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessUpdateBudget'
type Database_ProcessUpdateBudget_Call struct {
	*mock.Call
}

// ProcessUpdateBudget is a helper method to define mock.On call
//   - invoice db.NewInvoiceList
func (_e *Database_Expecter) ProcessUpdateBudget(invoice interface{}) *Database_ProcessUpdateBudget_Call {
	return &Database_ProcessUpdateBudget_Call{Call: _e.mock.On("ProcessUpdateBudget", invoice)}
}

func (_c *Database_ProcessUpdateBudget_Call) Run(run func(invoice db.NewInvoiceList)) *Database_ProcessUpdateBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewInvoiceList))
	})
	return _c
}

func (_c *Database_ProcessUpdateBudget_Call) Return(_a0 error) *Database_ProcessUpdateBudget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_ProcessUpdateBudget_Call) RunAndReturn(run func(db.NewInvoiceList) error) *Database_ProcessUpdateBudget_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessUpdateTicketsWithoutGroup provides a mock function with no fields
func (_m *Database) ProcessUpdateTicketsWithoutGroup() {
	_m.Called()
}

// Database_ProcessUpdateTicketsWithoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessUpdateTicketsWithoutGroup'
type Database_ProcessUpdateTicketsWithoutGroup_Call struct {
	*mock.Call
}

// ProcessUpdateTicketsWithoutGroup is a helper method to define mock.On call
func (_e *Database_Expecter) ProcessUpdateTicketsWithoutGroup() *Database_ProcessUpdateTicketsWithoutGroup_Call {
	return &Database_ProcessUpdateTicketsWithoutGroup_Call{Call: _e.mock.On("ProcessUpdateTicketsWithoutGroup")}
}

func (_c *Database_ProcessUpdateTicketsWithoutGroup_Call) Run(run func()) *Database_ProcessUpdateTicketsWithoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_ProcessUpdateTicketsWithoutGroup_Call) Return() *Database_ProcessUpdateTicketsWithoutGroup_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_ProcessUpdateTicketsWithoutGroup_Call) RunAndReturn(run func()) *Database_ProcessUpdateTicketsWithoutGroup_Call {
	_c.Run(run)
	return _c
}

// SatsPaidPercentage provides a mock function with given fields: r, workspace
func (_m *Database) SatsPaidPercentage(r db.PaymentDateRange, workspace string) uint {
	ret := _m.Called(r, workspace)

	if len(ret) == 0 {
		panic("no return value specified for SatsPaidPercentage")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, string) uint); ok {
		r0 = rf(r, workspace)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_SatsPaidPercentage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SatsPaidPercentage'
type Database_SatsPaidPercentage_Call struct {
	*mock.Call
}

// SatsPaidPercentage is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - workspace string
func (_e *Database_Expecter) SatsPaidPercentage(r interface{}, workspace interface{}) *Database_SatsPaidPercentage_Call {
	return &Database_SatsPaidPercentage_Call{Call: _e.mock.On("SatsPaidPercentage", r, workspace)}
}

func (_c *Database_SatsPaidPercentage_Call) Run(run func(r db.PaymentDateRange, workspace string)) *Database_SatsPaidPercentage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(string))
	})
	return _c
}

func (_c *Database_SatsPaidPercentage_Call) Return(_a0 uint) *Database_SatsPaidPercentage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SatsPaidPercentage_Call) RunAndReturn(run func(db.PaymentDateRange, string) uint) *Database_SatsPaidPercentage_Call {
	_c.Call.Return(run)
	return _c
}

// SearchBots provides a mock function with given fields: s, limit, offset
func (_m *Database) SearchBots(s string, limit int, offset int) []db.BotRes {
	ret := _m.Called(s, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for SearchBots")
	}

	var r0 []db.BotRes
	if rf, ok := ret.Get(0).(func(string, int, int) []db.BotRes); ok {
		r0 = rf(s, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BotRes)
		}
	}

	return r0
}

// Database_SearchBots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchBots'
type Database_SearchBots_Call struct {
	*mock.Call
}

// SearchBots is a helper method to define mock.On call
//   - s string
//   - limit int
//   - offset int
func (_e *Database_Expecter) SearchBots(s interface{}, limit interface{}, offset interface{}) *Database_SearchBots_Call {
	return &Database_SearchBots_Call{Call: _e.mock.On("SearchBots", s, limit, offset)}
}

func (_c *Database_SearchBots_Call) Run(run func(s string, limit int, offset int)) *Database_SearchBots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *Database_SearchBots_Call) Return(_a0 []db.BotRes) *Database_SearchBots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SearchBots_Call) RunAndReturn(run func(string, int, int) []db.BotRes) *Database_SearchBots_Call {
	_c.Call.Return(run)
	return _c
}

// SearchPeople provides a mock function with given fields: s, limit, offset
func (_m *Database) SearchPeople(s string, limit int, offset int) []db.Person {
	ret := _m.Called(s, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for SearchPeople")
	}

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func(string, int, int) []db.Person); ok {
		r0 = rf(s, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// Database_SearchPeople_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchPeople'
type Database_SearchPeople_Call struct {
	*mock.Call
}

// SearchPeople is a helper method to define mock.On call
//   - s string
//   - limit int
//   - offset int
func (_e *Database_Expecter) SearchPeople(s interface{}, limit interface{}, offset interface{}) *Database_SearchPeople_Call {
	return &Database_SearchPeople_Call{Call: _e.mock.On("SearchPeople", s, limit, offset)}
}

func (_c *Database_SearchPeople_Call) Run(run func(s string, limit int, offset int)) *Database_SearchPeople_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *Database_SearchPeople_Call) Return(_a0 []db.Person) *Database_SearchPeople_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SearchPeople_Call) RunAndReturn(run func(string, int, int) []db.Person) *Database_SearchPeople_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTribes provides a mock function with given fields: s
func (_m *Database) SearchTribes(s string) []db.Tribe {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for SearchTribes")
	}

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// Database_SearchTribes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTribes'
type Database_SearchTribes_Call struct {
	*mock.Call
}

// SearchTribes is a helper method to define mock.On call
//   - s string
func (_e *Database_Expecter) SearchTribes(s interface{}) *Database_SearchTribes_Call {
	return &Database_SearchTribes_Call{Call: _e.mock.On("SearchTribes", s)}
}

func (_c *Database_SearchTribes_Call) Run(run func(s string)) *Database_SearchTribes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_SearchTribes_Call) Return(_a0 []db.Tribe) *Database_SearchTribes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SearchTribes_Call) RunAndReturn(run func(string) []db.Tribe) *Database_SearchTribes_Call {
	_c.Call.Return(run)
	return _c
}

// SetPaymentAsComplete provides a mock function with given fields: tag
func (_m *Database) SetPaymentAsComplete(tag string) bool {
	ret := _m.Called(tag)

	if len(ret) == 0 {
		panic("no return value specified for SetPaymentAsComplete")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(tag)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_SetPaymentAsComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPaymentAsComplete'
type Database_SetPaymentAsComplete_Call struct {
	*mock.Call
}

// SetPaymentAsComplete is a helper method to define mock.On call
//   - tag string
func (_e *Database_Expecter) SetPaymentAsComplete(tag interface{}) *Database_SetPaymentAsComplete_Call {
	return &Database_SetPaymentAsComplete_Call{Call: _e.mock.On("SetPaymentAsComplete", tag)}
}

func (_c *Database_SetPaymentAsComplete_Call) Run(run func(tag string)) *Database_SetPaymentAsComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_SetPaymentAsComplete_Call) Return(_a0 bool) *Database_SetPaymentAsComplete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SetPaymentAsComplete_Call) RunAndReturn(run func(string) bool) *Database_SetPaymentAsComplete_Call {
	_c.Call.Return(run)
	return _c
}

// SetPaymentStatusByBountyId provides a mock function with given fields: bountyId, tagResult
func (_m *Database) SetPaymentStatusByBountyId(bountyId uint, tagResult db.V2TagRes) bool {
	ret := _m.Called(bountyId, tagResult)

	if len(ret) == 0 {
		panic("no return value specified for SetPaymentStatusByBountyId")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, db.V2TagRes) bool); ok {
		r0 = rf(bountyId, tagResult)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_SetPaymentStatusByBountyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPaymentStatusByBountyId'
type Database_SetPaymentStatusByBountyId_Call struct {
	*mock.Call
}

// SetPaymentStatusByBountyId is a helper method to define mock.On call
//   - bountyId uint
//   - tagResult db.V2TagRes
func (_e *Database_Expecter) SetPaymentStatusByBountyId(bountyId interface{}, tagResult interface{}) *Database_SetPaymentStatusByBountyId_Call {
	return &Database_SetPaymentStatusByBountyId_Call{Call: _e.mock.On("SetPaymentStatusByBountyId", bountyId, tagResult)}
}

func (_c *Database_SetPaymentStatusByBountyId_Call) Run(run func(bountyId uint, tagResult db.V2TagRes)) *Database_SetPaymentStatusByBountyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(db.V2TagRes))
	})
	return _c
}

func (_c *Database_SetPaymentStatusByBountyId_Call) Return(_a0 bool) *Database_SetPaymentStatusByBountyId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SetPaymentStatusByBountyId_Call) RunAndReturn(run func(uint, db.V2TagRes) bool) *Database_SetPaymentStatusByBountyId_Call {
	_c.Call.Return(run)
	return _c
}

// StartBountyTiming provides a mock function with given fields: bountyID
func (_m *Database) StartBountyTiming(bountyID uint) error {
	ret := _m.Called(bountyID)

	if len(ret) == 0 {
		panic("no return value specified for StartBountyTiming")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(bountyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_StartBountyTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartBountyTiming'
type Database_StartBountyTiming_Call struct {
	*mock.Call
}

// StartBountyTiming is a helper method to define mock.On call
//   - bountyID uint
func (_e *Database_Expecter) StartBountyTiming(bountyID interface{}) *Database_StartBountyTiming_Call {
	return &Database_StartBountyTiming_Call{Call: _e.mock.On("StartBountyTiming", bountyID)}
}

func (_c *Database_StartBountyTiming_Call) Run(run func(bountyID uint)) *Database_StartBountyTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_StartBountyTiming_Call) Return(_a0 error) *Database_StartBountyTiming_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_StartBountyTiming_Call) RunAndReturn(run func(uint) error) *Database_StartBountyTiming_Call {
	_c.Call.Return(run)
	return _c
}

// TotalAssignedBounties provides a mock function with given fields: r, workspace
func (_m *Database) TotalAssignedBounties(r db.PaymentDateRange, workspace string) int64 {
	ret := _m.Called(r, workspace)

	if len(ret) == 0 {
		panic("no return value specified for TotalAssignedBounties")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, string) int64); ok {
		r0 = rf(r, workspace)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_TotalAssignedBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalAssignedBounties'
type Database_TotalAssignedBounties_Call struct {
	*mock.Call
}

// TotalAssignedBounties is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - workspace string
func (_e *Database_Expecter) TotalAssignedBounties(r interface{}, workspace interface{}) *Database_TotalAssignedBounties_Call {
	return &Database_TotalAssignedBounties_Call{Call: _e.mock.On("TotalAssignedBounties", r, workspace)}
}

func (_c *Database_TotalAssignedBounties_Call) Run(run func(r db.PaymentDateRange, workspace string)) *Database_TotalAssignedBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(string))
	})
	return _c
}

func (_c *Database_TotalAssignedBounties_Call) Return(_a0 int64) *Database_TotalAssignedBounties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalAssignedBounties_Call) RunAndReturn(run func(db.PaymentDateRange, string) int64) *Database_TotalAssignedBounties_Call {
	_c.Call.Return(run)
	return _c
}

// TotalBountiesPosted provides a mock function with given fields: r, workspace
func (_m *Database) TotalBountiesPosted(r db.PaymentDateRange, workspace string) int64 {
	ret := _m.Called(r, workspace)

	if len(ret) == 0 {
		panic("no return value specified for TotalBountiesPosted")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, string) int64); ok {
		r0 = rf(r, workspace)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_TotalBountiesPosted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalBountiesPosted'
type Database_TotalBountiesPosted_Call struct {
	*mock.Call
}

// TotalBountiesPosted is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - workspace string
func (_e *Database_Expecter) TotalBountiesPosted(r interface{}, workspace interface{}) *Database_TotalBountiesPosted_Call {
	return &Database_TotalBountiesPosted_Call{Call: _e.mock.On("TotalBountiesPosted", r, workspace)}
}

func (_c *Database_TotalBountiesPosted_Call) Run(run func(r db.PaymentDateRange, workspace string)) *Database_TotalBountiesPosted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(string))
	})
	return _c
}

func (_c *Database_TotalBountiesPosted_Call) Return(_a0 int64) *Database_TotalBountiesPosted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalBountiesPosted_Call) RunAndReturn(run func(db.PaymentDateRange, string) int64) *Database_TotalBountiesPosted_Call {
	_c.Call.Return(run)
	return _c
}

// TotalHuntersPaid provides a mock function with given fields: r, workspace
func (_m *Database) TotalHuntersPaid(r db.PaymentDateRange, workspace string) int64 {
	ret := _m.Called(r, workspace)

	if len(ret) == 0 {
		panic("no return value specified for TotalHuntersPaid")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, string) int64); ok {
		r0 = rf(r, workspace)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_TotalHuntersPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalHuntersPaid'
type Database_TotalHuntersPaid_Call struct {
	*mock.Call
}

// TotalHuntersPaid is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - workspace string
func (_e *Database_Expecter) TotalHuntersPaid(r interface{}, workspace interface{}) *Database_TotalHuntersPaid_Call {
	return &Database_TotalHuntersPaid_Call{Call: _e.mock.On("TotalHuntersPaid", r, workspace)}
}

func (_c *Database_TotalHuntersPaid_Call) Run(run func(r db.PaymentDateRange, workspace string)) *Database_TotalHuntersPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(string))
	})
	return _c
}

func (_c *Database_TotalHuntersPaid_Call) Return(_a0 int64) *Database_TotalHuntersPaid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalHuntersPaid_Call) RunAndReturn(run func(db.PaymentDateRange, string) int64) *Database_TotalHuntersPaid_Call {
	_c.Call.Return(run)
	return _c
}

// TotalPaidBounties provides a mock function with given fields: r, workspace
func (_m *Database) TotalPaidBounties(r db.PaymentDateRange, workspace string) int64 {
	ret := _m.Called(r, workspace)

	if len(ret) == 0 {
		panic("no return value specified for TotalPaidBounties")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, string) int64); ok {
		r0 = rf(r, workspace)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_TotalPaidBounties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalPaidBounties'
type Database_TotalPaidBounties_Call struct {
	*mock.Call
}

// TotalPaidBounties is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - workspace string
func (_e *Database_Expecter) TotalPaidBounties(r interface{}, workspace interface{}) *Database_TotalPaidBounties_Call {
	return &Database_TotalPaidBounties_Call{Call: _e.mock.On("TotalPaidBounties", r, workspace)}
}

func (_c *Database_TotalPaidBounties_Call) Run(run func(r db.PaymentDateRange, workspace string)) *Database_TotalPaidBounties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(string))
	})
	return _c
}

func (_c *Database_TotalPaidBounties_Call) Return(_a0 int64) *Database_TotalPaidBounties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalPaidBounties_Call) RunAndReturn(run func(db.PaymentDateRange, string) int64) *Database_TotalPaidBounties_Call {
	_c.Call.Return(run)
	return _c
}

// TotalPeopleByPeriod provides a mock function with given fields: r
func (_m *Database) TotalPeopleByPeriod(r db.PaymentDateRange) int64 {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TotalPeopleByPeriod")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Database_TotalPeopleByPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalPeopleByPeriod'
type Database_TotalPeopleByPeriod_Call struct {
	*mock.Call
}

// TotalPeopleByPeriod is a helper method to define mock.On call
//   - r db.PaymentDateRange
func (_e *Database_Expecter) TotalPeopleByPeriod(r interface{}) *Database_TotalPeopleByPeriod_Call {
	return &Database_TotalPeopleByPeriod_Call{Call: _e.mock.On("TotalPeopleByPeriod", r)}
}

func (_c *Database_TotalPeopleByPeriod_Call) Run(run func(r db.PaymentDateRange)) *Database_TotalPeopleByPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange))
	})
	return _c
}

func (_c *Database_TotalPeopleByPeriod_Call) Return(_a0 int64) *Database_TotalPeopleByPeriod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalPeopleByPeriod_Call) RunAndReturn(run func(db.PaymentDateRange) int64) *Database_TotalPeopleByPeriod_Call {
	_c.Call.Return(run)
	return _c
}

// TotalSatsPaid provides a mock function with given fields: r, workspace
func (_m *Database) TotalSatsPaid(r db.PaymentDateRange, workspace string) uint {
	ret := _m.Called(r, workspace)

	if len(ret) == 0 {
		panic("no return value specified for TotalSatsPaid")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, string) uint); ok {
		r0 = rf(r, workspace)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_TotalSatsPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalSatsPaid'
type Database_TotalSatsPaid_Call struct {
	*mock.Call
}

// TotalSatsPaid is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - workspace string
func (_e *Database_Expecter) TotalSatsPaid(r interface{}, workspace interface{}) *Database_TotalSatsPaid_Call {
	return &Database_TotalSatsPaid_Call{Call: _e.mock.On("TotalSatsPaid", r, workspace)}
}

func (_c *Database_TotalSatsPaid_Call) Run(run func(r db.PaymentDateRange, workspace string)) *Database_TotalSatsPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(string))
	})
	return _c
}

func (_c *Database_TotalSatsPaid_Call) Return(_a0 uint) *Database_TotalSatsPaid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalSatsPaid_Call) RunAndReturn(run func(db.PaymentDateRange, string) uint) *Database_TotalSatsPaid_Call {
	_c.Call.Return(run)
	return _c
}

// TotalSatsPosted provides a mock function with given fields: r, workspace
func (_m *Database) TotalSatsPosted(r db.PaymentDateRange, workspace string) uint {
	ret := _m.Called(r, workspace)

	if len(ret) == 0 {
		panic("no return value specified for TotalSatsPosted")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(db.PaymentDateRange, string) uint); ok {
		r0 = rf(r, workspace)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Database_TotalSatsPosted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalSatsPosted'
type Database_TotalSatsPosted_Call struct {
	*mock.Call
}

// TotalSatsPosted is a helper method to define mock.On call
//   - r db.PaymentDateRange
//   - workspace string
func (_e *Database_Expecter) TotalSatsPosted(r interface{}, workspace interface{}) *Database_TotalSatsPosted_Call {
	return &Database_TotalSatsPosted_Call{Call: _e.mock.On("TotalSatsPosted", r, workspace)}
}

func (_c *Database_TotalSatsPosted_Call) Run(run func(r db.PaymentDateRange, workspace string)) *Database_TotalSatsPosted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.PaymentDateRange), args[1].(string))
	})
	return _c
}

func (_c *Database_TotalSatsPosted_Call) Return(_a0 uint) *Database_TotalSatsPosted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_TotalSatsPosted_Call) RunAndReturn(run func(db.PaymentDateRange, string) uint) *Database_TotalSatsPosted_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBot provides a mock function with given fields: _a0, u
func (_m *Database) UpdateBot(_a0 string, u map[string]interface{}) bool {
	ret := _m.Called(_a0, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBot")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) bool); ok {
		r0 = rf(_a0, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UpdateBot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBot'
type Database_UpdateBot_Call struct {
	*mock.Call
}

// UpdateBot is a helper method to define mock.On call
//   - _a0 string
//   - u map[string]interface{}
func (_e *Database_Expecter) UpdateBot(_a0 interface{}, u interface{}) *Database_UpdateBot_Call {
	return &Database_UpdateBot_Call{Call: _e.mock.On("UpdateBot", _a0, u)}
}

func (_c *Database_UpdateBot_Call) Run(run func(_a0 string, u map[string]interface{})) *Database_UpdateBot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdateBot_Call) Return(_a0 bool) *Database_UpdateBot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateBot_Call) RunAndReturn(run func(string, map[string]interface{}) bool) *Database_UpdateBot_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBounty provides a mock function with given fields: b
func (_m *Database) UpdateBounty(b db.NewBounty) (db.NewBounty, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBounty")
	}

	var r0 db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.NewBounty) (db.NewBounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.NewBounty) db.NewBounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.NewBounty)
	}

	if rf, ok := ret.Get(1).(func(db.NewBounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_UpdateBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBounty'
type Database_UpdateBounty_Call struct {
	*mock.Call
}

// UpdateBounty is a helper method to define mock.On call
//   - b db.NewBounty
func (_e *Database_Expecter) UpdateBounty(b interface{}) *Database_UpdateBounty_Call {
	return &Database_UpdateBounty_Call{Call: _e.mock.On("UpdateBounty", b)}
}

func (_c *Database_UpdateBounty_Call) Run(run func(b db.NewBounty)) *Database_UpdateBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewBounty))
	})
	return _c
}

func (_c *Database_UpdateBounty_Call) Return(_a0 db.NewBounty, _a1 error) *Database_UpdateBounty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_UpdateBounty_Call) RunAndReturn(run func(db.NewBounty) (db.NewBounty, error)) *Database_UpdateBounty_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBountyBoolColumn provides a mock function with given fields: b, column
func (_m *Database) UpdateBountyBoolColumn(b db.NewBounty, column string) db.NewBounty {
	ret := _m.Called(b, column)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBountyBoolColumn")
	}

	var r0 db.NewBounty
	if rf, ok := ret.Get(0).(func(db.NewBounty, string) db.NewBounty); ok {
		r0 = rf(b, column)
	} else {
		r0 = ret.Get(0).(db.NewBounty)
	}

	return r0
}

// Database_UpdateBountyBoolColumn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBountyBoolColumn'
type Database_UpdateBountyBoolColumn_Call struct {
	*mock.Call
}

// UpdateBountyBoolColumn is a helper method to define mock.On call
//   - b db.NewBounty
//   - column string
func (_e *Database_Expecter) UpdateBountyBoolColumn(b interface{}, column interface{}) *Database_UpdateBountyBoolColumn_Call {
	return &Database_UpdateBountyBoolColumn_Call{Call: _e.mock.On("UpdateBountyBoolColumn", b, column)}
}

func (_c *Database_UpdateBountyBoolColumn_Call) Run(run func(b db.NewBounty, column string)) *Database_UpdateBountyBoolColumn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewBounty), args[1].(string))
	})
	return _c
}

func (_c *Database_UpdateBountyBoolColumn_Call) Return(_a0 db.NewBounty) *Database_UpdateBountyBoolColumn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateBountyBoolColumn_Call) RunAndReturn(run func(db.NewBounty, string) db.NewBounty) *Database_UpdateBountyBoolColumn_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBountyNullColumn provides a mock function with given fields: b, column
func (_m *Database) UpdateBountyNullColumn(b db.NewBounty, column string) db.NewBounty {
	ret := _m.Called(b, column)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBountyNullColumn")
	}

	var r0 db.NewBounty
	if rf, ok := ret.Get(0).(func(db.NewBounty, string) db.NewBounty); ok {
		r0 = rf(b, column)
	} else {
		r0 = ret.Get(0).(db.NewBounty)
	}

	return r0
}

// Database_UpdateBountyNullColumn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBountyNullColumn'
type Database_UpdateBountyNullColumn_Call struct {
	*mock.Call
}

// UpdateBountyNullColumn is a helper method to define mock.On call
//   - b db.NewBounty
//   - column string
func (_e *Database_Expecter) UpdateBountyNullColumn(b interface{}, column interface{}) *Database_UpdateBountyNullColumn_Call {
	return &Database_UpdateBountyNullColumn_Call{Call: _e.mock.On("UpdateBountyNullColumn", b, column)}
}

func (_c *Database_UpdateBountyNullColumn_Call) Run(run func(b db.NewBounty, column string)) *Database_UpdateBountyNullColumn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewBounty), args[1].(string))
	})
	return _c
}

func (_c *Database_UpdateBountyNullColumn_Call) Return(_a0 db.NewBounty) *Database_UpdateBountyNullColumn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateBountyNullColumn_Call) RunAndReturn(run func(db.NewBounty, string) db.NewBounty) *Database_UpdateBountyNullColumn_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBountyPayment provides a mock function with given fields: b
func (_m *Database) UpdateBountyPayment(b db.NewBounty) (db.NewBounty, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBountyPayment")
	}

	var r0 db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.NewBounty) (db.NewBounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.NewBounty) db.NewBounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.NewBounty)
	}

	if rf, ok := ret.Get(1).(func(db.NewBounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_UpdateBountyPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBountyPayment'
type Database_UpdateBountyPayment_Call struct {
	*mock.Call
}

// UpdateBountyPayment is a helper method to define mock.On call
//   - b db.NewBounty
func (_e *Database_Expecter) UpdateBountyPayment(b interface{}) *Database_UpdateBountyPayment_Call {
	return &Database_UpdateBountyPayment_Call{Call: _e.mock.On("UpdateBountyPayment", b)}
}

func (_c *Database_UpdateBountyPayment_Call) Run(run func(b db.NewBounty)) *Database_UpdateBountyPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewBounty))
	})
	return _c
}

func (_c *Database_UpdateBountyPayment_Call) Return(_a0 db.NewBounty, _a1 error) *Database_UpdateBountyPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_UpdateBountyPayment_Call) RunAndReturn(run func(db.NewBounty) (db.NewBounty, error)) *Database_UpdateBountyPayment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBountyPaymentStatuses provides a mock function with given fields: bounty
func (_m *Database) UpdateBountyPaymentStatuses(bounty db.NewBounty) (db.NewBounty, error) {
	ret := _m.Called(bounty)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBountyPaymentStatuses")
	}

	var r0 db.NewBounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.NewBounty) (db.NewBounty, error)); ok {
		return rf(bounty)
	}
	if rf, ok := ret.Get(0).(func(db.NewBounty) db.NewBounty); ok {
		r0 = rf(bounty)
	} else {
		r0 = ret.Get(0).(db.NewBounty)
	}

	if rf, ok := ret.Get(1).(func(db.NewBounty) error); ok {
		r1 = rf(bounty)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_UpdateBountyPaymentStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBountyPaymentStatuses'
type Database_UpdateBountyPaymentStatuses_Call struct {
	*mock.Call
}

// UpdateBountyPaymentStatuses is a helper method to define mock.On call
//   - bounty db.NewBounty
func (_e *Database_Expecter) UpdateBountyPaymentStatuses(bounty interface{}) *Database_UpdateBountyPaymentStatuses_Call {
	return &Database_UpdateBountyPaymentStatuses_Call{Call: _e.mock.On("UpdateBountyPaymentStatuses", bounty)}
}

func (_c *Database_UpdateBountyPaymentStatuses_Call) Run(run func(bounty db.NewBounty)) *Database_UpdateBountyPaymentStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewBounty))
	})
	return _c
}

func (_c *Database_UpdateBountyPaymentStatuses_Call) Return(_a0 db.NewBounty, _a1 error) *Database_UpdateBountyPaymentStatuses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_UpdateBountyPaymentStatuses_Call) RunAndReturn(run func(db.NewBounty) (db.NewBounty, error)) *Database_UpdateBountyPaymentStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBountyTiming provides a mock function with given fields: timing
func (_m *Database) UpdateBountyTiming(timing *db.BountyTiming) error {
	ret := _m.Called(timing)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBountyTiming")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.BountyTiming) error); ok {
		r0 = rf(timing)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateBountyTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBountyTiming'
type Database_UpdateBountyTiming_Call struct {
	*mock.Call
}

// UpdateBountyTiming is a helper method to define mock.On call
//   - timing *db.BountyTiming
func (_e *Database_Expecter) UpdateBountyTiming(timing interface{}) *Database_UpdateBountyTiming_Call {
	return &Database_UpdateBountyTiming_Call{Call: _e.mock.On("UpdateBountyTiming", timing)}
}

func (_c *Database_UpdateBountyTiming_Call) Run(run func(timing *db.BountyTiming)) *Database_UpdateBountyTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.BountyTiming))
	})
	return _c
}

func (_c *Database_UpdateBountyTiming_Call) Return(_a0 error) *Database_UpdateBountyTiming_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateBountyTiming_Call) RunAndReturn(run func(*db.BountyTiming) error) *Database_UpdateBountyTiming_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBountyTimingOnProof provides a mock function with given fields: bountyID
func (_m *Database) UpdateBountyTimingOnProof(bountyID uint) error {
	ret := _m.Called(bountyID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBountyTimingOnProof")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(bountyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateBountyTimingOnProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBountyTimingOnProof'
type Database_UpdateBountyTimingOnProof_Call struct {
	*mock.Call
}

// UpdateBountyTimingOnProof is a helper method to define mock.On call
//   - bountyID uint
func (_e *Database_Expecter) UpdateBountyTimingOnProof(bountyID interface{}) *Database_UpdateBountyTimingOnProof_Call {
	return &Database_UpdateBountyTimingOnProof_Call{Call: _e.mock.On("UpdateBountyTimingOnProof", bountyID)}
}

func (_c *Database_UpdateBountyTimingOnProof_Call) Run(run func(bountyID uint)) *Database_UpdateBountyTimingOnProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Database_UpdateBountyTimingOnProof_Call) Return(_a0 error) *Database_UpdateBountyTimingOnProof_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateBountyTimingOnProof_Call) RunAndReturn(run func(uint) error) *Database_UpdateBountyTimingOnProof_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChannel provides a mock function with given fields: id, u
func (_m *Database) UpdateChannel(id uint, u map[string]interface{}) bool {
	ret := _m.Called(id, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, map[string]interface{}) bool); ok {
		r0 = rf(id, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UpdateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChannel'
type Database_UpdateChannel_Call struct {
	*mock.Call
}

// UpdateChannel is a helper method to define mock.On call
//   - id uint
//   - u map[string]interface{}
func (_e *Database_Expecter) UpdateChannel(id interface{}, u interface{}) *Database_UpdateChannel_Call {
	return &Database_UpdateChannel_Call{Call: _e.mock.On("UpdateChannel", id, u)}
}

func (_c *Database_UpdateChannel_Call) Run(run func(id uint, u map[string]interface{})) *Database_UpdateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdateChannel_Call) Return(_a0 bool) *Database_UpdateChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateChannel_Call) RunAndReturn(run func(uint, map[string]interface{}) bool) *Database_UpdateChannel_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChat provides a mock function with given fields: chat
func (_m *Database) UpdateChat(chat *db.Chat) (db.Chat, error) {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChat")
	}

	var r0 db.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.Chat) (db.Chat, error)); ok {
		return rf(chat)
	}
	if rf, ok := ret.Get(0).(func(*db.Chat) db.Chat); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Get(0).(db.Chat)
	}

	if rf, ok := ret.Get(1).(func(*db.Chat) error); ok {
		r1 = rf(chat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_UpdateChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChat'
type Database_UpdateChat_Call struct {
	*mock.Call
}

// UpdateChat is a helper method to define mock.On call
//   - chat *db.Chat
func (_e *Database_Expecter) UpdateChat(chat interface{}) *Database_UpdateChat_Call {
	return &Database_UpdateChat_Call{Call: _e.mock.On("UpdateChat", chat)}
}

func (_c *Database_UpdateChat_Call) Run(run func(chat *db.Chat)) *Database_UpdateChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.Chat))
	})
	return _c
}

func (_c *Database_UpdateChat_Call) Return(_a0 db.Chat, _a1 error) *Database_UpdateChat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_UpdateChat_Call) RunAndReturn(run func(*db.Chat) (db.Chat, error)) *Database_UpdateChat_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChatMessage provides a mock function with given fields: message
func (_m *Database) UpdateChatMessage(message *db.ChatMessage) (db.ChatMessage, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChatMessage")
	}

	var r0 db.ChatMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.ChatMessage) (db.ChatMessage, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(*db.ChatMessage) db.ChatMessage); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(db.ChatMessage)
	}

	if rf, ok := ret.Get(1).(func(*db.ChatMessage) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_UpdateChatMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChatMessage'
type Database_UpdateChatMessage_Call struct {
	*mock.Call
}

// UpdateChatMessage is a helper method to define mock.On call
//   - message *db.ChatMessage
func (_e *Database_Expecter) UpdateChatMessage(message interface{}) *Database_UpdateChatMessage_Call {
	return &Database_UpdateChatMessage_Call{Call: _e.mock.On("UpdateChatMessage", message)}
}

func (_c *Database_UpdateChatMessage_Call) Run(run func(message *db.ChatMessage)) *Database_UpdateChatMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.ChatMessage))
	})
	return _c
}

func (_c *Database_UpdateChatMessage_Call) Return(_a0 db.ChatMessage, _a1 error) *Database_UpdateChatMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_UpdateChatMessage_Call) RunAndReturn(run func(*db.ChatMessage) (db.ChatMessage, error)) *Database_UpdateChatMessage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEndpoint provides a mock function with given fields: endpoint
func (_m *Database) UpdateEndpoint(endpoint *db.Endpoint) (db.Endpoint, error) {
	ret := _m.Called(endpoint)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEndpoint")
	}

	var r0 db.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.Endpoint) (db.Endpoint, error)); ok {
		return rf(endpoint)
	}
	if rf, ok := ret.Get(0).(func(*db.Endpoint) db.Endpoint); ok {
		r0 = rf(endpoint)
	} else {
		r0 = ret.Get(0).(db.Endpoint)
	}

	if rf, ok := ret.Get(1).(func(*db.Endpoint) error); ok {
		r1 = rf(endpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_UpdateEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEndpoint'
type Database_UpdateEndpoint_Call struct {
	*mock.Call
}

// UpdateEndpoint is a helper method to define mock.On call
//   - endpoint *db.Endpoint
func (_e *Database_Expecter) UpdateEndpoint(endpoint interface{}) *Database_UpdateEndpoint_Call {
	return &Database_UpdateEndpoint_Call{Call: _e.mock.On("UpdateEndpoint", endpoint)}
}

func (_c *Database_UpdateEndpoint_Call) Run(run func(endpoint *db.Endpoint)) *Database_UpdateEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.Endpoint))
	})
	return _c
}

func (_c *Database_UpdateEndpoint_Call) Return(_a0 db.Endpoint, _a1 error) *Database_UpdateEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_UpdateEndpoint_Call) RunAndReturn(run func(*db.Endpoint) (db.Endpoint, error)) *Database_UpdateEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFeatureFlag provides a mock function with given fields: flag
func (_m *Database) UpdateFeatureFlag(flag *db.FeatureFlag) (db.FeatureFlag, error) {
	ret := _m.Called(flag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeatureFlag")
	}

	var r0 db.FeatureFlag
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.FeatureFlag) (db.FeatureFlag, error)); ok {
		return rf(flag)
	}
	if rf, ok := ret.Get(0).(func(*db.FeatureFlag) db.FeatureFlag); ok {
		r0 = rf(flag)
	} else {
		r0 = ret.Get(0).(db.FeatureFlag)
	}

	if rf, ok := ret.Get(1).(func(*db.FeatureFlag) error); ok {
		r1 = rf(flag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_UpdateFeatureFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFeatureFlag'
type Database_UpdateFeatureFlag_Call struct {
	*mock.Call
}

// UpdateFeatureFlag is a helper method to define mock.On call
//   - flag *db.FeatureFlag
func (_e *Database_Expecter) UpdateFeatureFlag(flag interface{}) *Database_UpdateFeatureFlag_Call {
	return &Database_UpdateFeatureFlag_Call{Call: _e.mock.On("UpdateFeatureFlag", flag)}
}

func (_c *Database_UpdateFeatureFlag_Call) Run(run func(flag *db.FeatureFlag)) *Database_UpdateFeatureFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.FeatureFlag))
	})
	return _c
}

func (_c *Database_UpdateFeatureFlag_Call) Return(_a0 db.FeatureFlag, _a1 error) *Database_UpdateFeatureFlag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_UpdateFeatureFlag_Call) RunAndReturn(run func(*db.FeatureFlag) (db.FeatureFlag, error)) *Database_UpdateFeatureFlag_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFeatureStatus provides a mock function with given fields: _a0, status
func (_m *Database) UpdateFeatureStatus(_a0 string, status db.FeatureStatus) (db.WorkspaceFeatures, error) {
	ret := _m.Called(_a0, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeatureStatus")
	}

	var r0 db.WorkspaceFeatures
	var r1 error
	if rf, ok := ret.Get(0).(func(string, db.FeatureStatus) (db.WorkspaceFeatures, error)); ok {
		return rf(_a0, status)
	}
	if rf, ok := ret.Get(0).(func(string, db.FeatureStatus) db.WorkspaceFeatures); ok {
		r0 = rf(_a0, status)
	} else {
		r0 = ret.Get(0).(db.WorkspaceFeatures)
	}

	if rf, ok := ret.Get(1).(func(string, db.FeatureStatus) error); ok {
		r1 = rf(_a0, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_UpdateFeatureStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFeatureStatus'
type Database_UpdateFeatureStatus_Call struct {
	*mock.Call
}

// UpdateFeatureStatus is a helper method to define mock.On call
//   - _a0 string
//   - status db.FeatureStatus
func (_e *Database_Expecter) UpdateFeatureStatus(_a0 interface{}, status interface{}) *Database_UpdateFeatureStatus_Call {
	return &Database_UpdateFeatureStatus_Call{Call: _e.mock.On("UpdateFeatureStatus", _a0, status)}
}

func (_c *Database_UpdateFeatureStatus_Call) Run(run func(_a0 string, status db.FeatureStatus)) *Database_UpdateFeatureStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(db.FeatureStatus))
	})
	return _c
}

func (_c *Database_UpdateFeatureStatus_Call) Return(_a0 db.WorkspaceFeatures, _a1 error) *Database_UpdateFeatureStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_UpdateFeatureStatus_Call) RunAndReturn(run func(string, db.FeatureStatus) (db.WorkspaceFeatures, error)) *Database_UpdateFeatureStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFeaturedBounty provides a mock function with given fields: bountyID, bounty
func (_m *Database) UpdateFeaturedBounty(bountyID string, bounty db.FeaturedBounty) error {
	ret := _m.Called(bountyID, bounty)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeaturedBounty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, db.FeaturedBounty) error); ok {
		r0 = rf(bountyID, bounty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateFeaturedBounty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFeaturedBounty'
type Database_UpdateFeaturedBounty_Call struct {
	*mock.Call
}

// UpdateFeaturedBounty is a helper method to define mock.On call
//   - bountyID string
//   - bounty db.FeaturedBounty
func (_e *Database_Expecter) UpdateFeaturedBounty(bountyID interface{}, bounty interface{}) *Database_UpdateFeaturedBounty_Call {
	return &Database_UpdateFeaturedBounty_Call{Call: _e.mock.On("UpdateFeaturedBounty", bountyID, bounty)}
}

func (_c *Database_UpdateFeaturedBounty_Call) Run(run func(bountyID string, bounty db.FeaturedBounty)) *Database_UpdateFeaturedBounty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(db.FeaturedBounty))
	})
	return _c
}

func (_c *Database_UpdateFeaturedBounty_Call) Return(_a0 error) *Database_UpdateFeaturedBounty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateFeaturedBounty_Call) RunAndReturn(run func(string, db.FeaturedBounty) error) *Database_UpdateFeaturedBounty_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGithubConfirmed provides a mock function with given fields: id, confirmed
func (_m *Database) UpdateGithubConfirmed(id uint, confirmed bool) {
	_m.Called(id, confirmed)
}

// Database_UpdateGithubConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGithubConfirmed'
type Database_UpdateGithubConfirmed_Call struct {
	*mock.Call
}

// UpdateGithubConfirmed is a helper method to define mock.On call
//   - id uint
//   - confirmed bool
func (_e *Database_Expecter) UpdateGithubConfirmed(id interface{}, confirmed interface{}) *Database_UpdateGithubConfirmed_Call {
	return &Database_UpdateGithubConfirmed_Call{Call: _e.mock.On("UpdateGithubConfirmed", id, confirmed)}
}

func (_c *Database_UpdateGithubConfirmed_Call) Run(run func(id uint, confirmed bool)) *Database_UpdateGithubConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(bool))
	})
	return _c
}

func (_c *Database_UpdateGithubConfirmed_Call) Return() *Database_UpdateGithubConfirmed_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_UpdateGithubConfirmed_Call) RunAndReturn(run func(uint, bool)) *Database_UpdateGithubConfirmed_Call {
	_c.Run(run)
	return _c
}

// UpdateGithubIssues provides a mock function with given fields: id, issues
func (_m *Database) UpdateGithubIssues(id uint, issues map[string]interface{}) {
	_m.Called(id, issues)
}

// Database_UpdateGithubIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGithubIssues'
type Database_UpdateGithubIssues_Call struct {
	*mock.Call
}

// UpdateGithubIssues is a helper method to define mock.On call
//   - id uint
//   - issues map[string]interface{}
func (_e *Database_Expecter) UpdateGithubIssues(id interface{}, issues interface{}) *Database_UpdateGithubIssues_Call {
	return &Database_UpdateGithubIssues_Call{Call: _e.mock.On("UpdateGithubIssues", id, issues)}
}

func (_c *Database_UpdateGithubIssues_Call) Run(run func(id uint, issues map[string]interface{})) *Database_UpdateGithubIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdateGithubIssues_Call) Return() *Database_UpdateGithubIssues_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_UpdateGithubIssues_Call) RunAndReturn(run func(uint, map[string]interface{})) *Database_UpdateGithubIssues_Call {
	_c.Run(run)
	return _c
}

// UpdateInvoice provides a mock function with given fields: payment_request
func (_m *Database) UpdateInvoice(payment_request string) db.NewInvoiceList {
	ret := _m.Called(payment_request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoice")
	}

	var r0 db.NewInvoiceList
	if rf, ok := ret.Get(0).(func(string) db.NewInvoiceList); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.NewInvoiceList)
	}

	return r0
}

// Database_UpdateInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInvoice'
type Database_UpdateInvoice_Call struct {
	*mock.Call
}

// UpdateInvoice is a helper method to define mock.On call
//   - payment_request string
func (_e *Database_Expecter) UpdateInvoice(payment_request interface{}) *Database_UpdateInvoice_Call {
	return &Database_UpdateInvoice_Call{Call: _e.mock.On("UpdateInvoice", payment_request)}
}

func (_c *Database_UpdateInvoice_Call) Run(run func(payment_request string)) *Database_UpdateInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_UpdateInvoice_Call) Return(_a0 db.NewInvoiceList) *Database_UpdateInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateInvoice_Call) RunAndReturn(run func(string) db.NewInvoiceList) *Database_UpdateInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLeaderBoard provides a mock function with given fields: _a0, alias, u
func (_m *Database) UpdateLeaderBoard(_a0 string, alias string, u map[string]interface{}) bool {
	ret := _m.Called(_a0, alias, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLeaderBoard")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) bool); ok {
		r0 = rf(_a0, alias, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UpdateLeaderBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLeaderBoard'
type Database_UpdateLeaderBoard_Call struct {
	*mock.Call
}

// UpdateLeaderBoard is a helper method to define mock.On call
//   - _a0 string
//   - alias string
//   - u map[string]interface{}
func (_e *Database_Expecter) UpdateLeaderBoard(_a0 interface{}, alias interface{}, u interface{}) *Database_UpdateLeaderBoard_Call {
	return &Database_UpdateLeaderBoard_Call{Call: _e.mock.On("UpdateLeaderBoard", _a0, alias, u)}
}

func (_c *Database_UpdateLeaderBoard_Call) Run(run func(_a0 string, alias string, u map[string]interface{})) *Database_UpdateLeaderBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdateLeaderBoard_Call) Return(_a0 bool) *Database_UpdateLeaderBoard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateLeaderBoard_Call) RunAndReturn(run func(string, string, map[string]interface{}) bool) *Database_UpdateLeaderBoard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotification provides a mock function with given fields: _a0, updates
func (_m *Database) UpdateNotification(_a0 string, updates map[string]interface{}) error {
	ret := _m.Called(_a0, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(_a0, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotification'
type Database_UpdateNotification_Call struct {
	*mock.Call
}

// UpdateNotification is a helper method to define mock.On call
//   - _a0 string
//   - updates map[string]interface{}
func (_e *Database_Expecter) UpdateNotification(_a0 interface{}, updates interface{}) *Database_UpdateNotification_Call {
	return &Database_UpdateNotification_Call{Call: _e.mock.On("UpdateNotification", _a0, updates)}
}

func (_c *Database_UpdateNotification_Call) Run(run func(_a0 string, updates map[string]interface{})) *Database_UpdateNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdateNotification_Call) Return(_a0 error) *Database_UpdateNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateNotification_Call) RunAndReturn(run func(string, map[string]interface{}) error) *Database_UpdateNotification_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePerson provides a mock function with given fields: id, u
func (_m *Database) UpdatePerson(id uint, u map[string]interface{}) bool {
	ret := _m.Called(id, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePerson")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, map[string]interface{}) bool); ok {
		r0 = rf(id, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UpdatePerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePerson'
type Database_UpdatePerson_Call struct {
	*mock.Call
}

// UpdatePerson is a helper method to define mock.On call
//   - id uint
//   - u map[string]interface{}
func (_e *Database_Expecter) UpdatePerson(id interface{}, u interface{}) *Database_UpdatePerson_Call {
	return &Database_UpdatePerson_Call{Call: _e.mock.On("UpdatePerson", id, u)}
}

func (_c *Database_UpdatePerson_Call) Run(run func(id uint, u map[string]interface{})) *Database_UpdatePerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdatePerson_Call) Return(_a0 bool) *Database_UpdatePerson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdatePerson_Call) RunAndReturn(run func(uint, map[string]interface{}) bool) *Database_UpdatePerson_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProcessingMap provides a mock function with given fields: pm
func (_m *Database) UpdateProcessingMap(pm *db.WfProcessingMap) error {
	ret := _m.Called(pm)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProcessingMap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.WfProcessingMap) error); ok {
		r0 = rf(pm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateProcessingMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProcessingMap'
type Database_UpdateProcessingMap_Call struct {
	*mock.Call
}

// UpdateProcessingMap is a helper method to define mock.On call
//   - pm *db.WfProcessingMap
func (_e *Database_Expecter) UpdateProcessingMap(pm interface{}) *Database_UpdateProcessingMap_Call {
	return &Database_UpdateProcessingMap_Call{Call: _e.mock.On("UpdateProcessingMap", pm)}
}

func (_c *Database_UpdateProcessingMap_Call) Run(run func(pm *db.WfProcessingMap)) *Database_UpdateProcessingMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.WfProcessingMap))
	})
	return _c
}

func (_c *Database_UpdateProcessingMap_Call) Return(_a0 error) *Database_UpdateProcessingMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateProcessingMap_Call) RunAndReturn(run func(*db.WfProcessingMap) error) *Database_UpdateProcessingMap_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProofStatus provides a mock function with given fields: proofID, status
func (_m *Database) UpdateProofStatus(proofID string, status db.ProofOfWorkStatus) error {
	ret := _m.Called(proofID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProofStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, db.ProofOfWorkStatus) error); ok {
		r0 = rf(proofID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateProofStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProofStatus'
type Database_UpdateProofStatus_Call struct {
	*mock.Call
}

// UpdateProofStatus is a helper method to define mock.On call
//   - proofID string
//   - status db.ProofOfWorkStatus
func (_e *Database_Expecter) UpdateProofStatus(proofID interface{}, status interface{}) *Database_UpdateProofStatus_Call {
	return &Database_UpdateProofStatus_Call{Call: _e.mock.On("UpdateProofStatus", proofID, status)}
}

func (_c *Database_UpdateProofStatus_Call) Run(run func(proofID string, status db.ProofOfWorkStatus)) *Database_UpdateProofStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(db.ProofOfWorkStatus))
	})
	return _c
}

func (_c *Database_UpdateProofStatus_Call) Return(_a0 error) *Database_UpdateProofStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateProofStatus_Call) RunAndReturn(run func(string, db.ProofOfWorkStatus) error) *Database_UpdateProofStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTicket provides a mock function with given fields: ticket
func (_m *Database) UpdateTicket(ticket db.Tickets) (db.Tickets, error) {
	ret := _m.Called(ticket)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTicket")
	}

	var r0 db.Tickets
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Tickets) (db.Tickets, error)); ok {
		return rf(ticket)
	}
	if rf, ok := ret.Get(0).(func(db.Tickets) db.Tickets); ok {
		r0 = rf(ticket)
	} else {
		r0 = ret.Get(0).(db.Tickets)
	}

	if rf, ok := ret.Get(1).(func(db.Tickets) error); ok {
		r1 = rf(ticket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_UpdateTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTicket'
type Database_UpdateTicket_Call struct {
	*mock.Call
}

// UpdateTicket is a helper method to define mock.On call
//   - ticket db.Tickets
func (_e *Database_Expecter) UpdateTicket(ticket interface{}) *Database_UpdateTicket_Call {
	return &Database_UpdateTicket_Call{Call: _e.mock.On("UpdateTicket", ticket)}
}

func (_c *Database_UpdateTicket_Call) Run(run func(ticket db.Tickets)) *Database_UpdateTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Tickets))
	})
	return _c
}

func (_c *Database_UpdateTicket_Call) Return(_a0 db.Tickets, _a1 error) *Database_UpdateTicket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_UpdateTicket_Call) RunAndReturn(run func(db.Tickets) (db.Tickets, error)) *Database_UpdateTicket_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTicketsWithoutGroup provides a mock function with given fields: ticket
func (_m *Database) UpdateTicketsWithoutGroup(ticket db.Tickets) error {
	ret := _m.Called(ticket)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTicketsWithoutGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(db.Tickets) error); ok {
		r0 = rf(ticket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateTicketsWithoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTicketsWithoutGroup'
type Database_UpdateTicketsWithoutGroup_Call struct {
	*mock.Call
}

// UpdateTicketsWithoutGroup is a helper method to define mock.On call
//   - ticket db.Tickets
func (_e *Database_Expecter) UpdateTicketsWithoutGroup(ticket interface{}) *Database_UpdateTicketsWithoutGroup_Call {
	return &Database_UpdateTicketsWithoutGroup_Call{Call: _e.mock.On("UpdateTicketsWithoutGroup", ticket)}
}

func (_c *Database_UpdateTicketsWithoutGroup_Call) Run(run func(ticket db.Tickets)) *Database_UpdateTicketsWithoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Tickets))
	})
	return _c
}

func (_c *Database_UpdateTicketsWithoutGroup_Call) Return(_a0 error) *Database_UpdateTicketsWithoutGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateTicketsWithoutGroup_Call) RunAndReturn(run func(db.Tickets) error) *Database_UpdateTicketsWithoutGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTribe provides a mock function with given fields: _a0, u
func (_m *Database) UpdateTribe(_a0 string, u map[string]interface{}) bool {
	ret := _m.Called(_a0, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTribe")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) bool); ok {
		r0 = rf(_a0, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UpdateTribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTribe'
type Database_UpdateTribe_Call struct {
	*mock.Call
}

// UpdateTribe is a helper method to define mock.On call
//   - _a0 string
//   - u map[string]interface{}
func (_e *Database_Expecter) UpdateTribe(_a0 interface{}, u interface{}) *Database_UpdateTribe_Call {
	return &Database_UpdateTribe_Call{Call: _e.mock.On("UpdateTribe", _a0, u)}
}

func (_c *Database_UpdateTribe_Call) Run(run func(_a0 string, u map[string]interface{})) *Database_UpdateTribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Database_UpdateTribe_Call) Return(_a0 bool) *Database_UpdateTribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateTribe_Call) RunAndReturn(run func(string, map[string]interface{}) bool) *Database_UpdateTribe_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTribeUniqueName provides a mock function with given fields: _a0, u
func (_m *Database) UpdateTribeUniqueName(_a0 string, u string) {
	_m.Called(_a0, u)
}

// Database_UpdateTribeUniqueName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTribeUniqueName'
type Database_UpdateTribeUniqueName_Call struct {
	*mock.Call
}

// UpdateTribeUniqueName is a helper method to define mock.On call
//   - _a0 string
//   - u string
func (_e *Database_Expecter) UpdateTribeUniqueName(_a0 interface{}, u interface{}) *Database_UpdateTribeUniqueName_Call {
	return &Database_UpdateTribeUniqueName_Call{Call: _e.mock.On("UpdateTribeUniqueName", _a0, u)}
}

func (_c *Database_UpdateTribeUniqueName_Call) Run(run func(_a0 string, u string)) *Database_UpdateTribeUniqueName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_UpdateTribeUniqueName_Call) Return() *Database_UpdateTribeUniqueName_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_UpdateTribeUniqueName_Call) RunAndReturn(run func(string, string)) *Database_UpdateTribeUniqueName_Call {
	_c.Run(run)
	return _c
}

// UpdateTwitterConfirmed provides a mock function with given fields: id, confirmed
func (_m *Database) UpdateTwitterConfirmed(id uint, confirmed bool) {
	_m.Called(id, confirmed)
}

// Database_UpdateTwitterConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTwitterConfirmed'
type Database_UpdateTwitterConfirmed_Call struct {
	*mock.Call
}

// UpdateTwitterConfirmed is a helper method to define mock.On call
//   - id uint
//   - confirmed bool
func (_e *Database_Expecter) UpdateTwitterConfirmed(id interface{}, confirmed interface{}) *Database_UpdateTwitterConfirmed_Call {
	return &Database_UpdateTwitterConfirmed_Call{Call: _e.mock.On("UpdateTwitterConfirmed", id, confirmed)}
}

func (_c *Database_UpdateTwitterConfirmed_Call) Run(run func(id uint, confirmed bool)) *Database_UpdateTwitterConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(bool))
	})
	return _c
}

func (_c *Database_UpdateTwitterConfirmed_Call) Return() *Database_UpdateTwitterConfirmed_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_UpdateTwitterConfirmed_Call) RunAndReturn(run func(uint, bool)) *Database_UpdateTwitterConfirmed_Call {
	_c.Run(run)
	return _c
}

// UpdateWorkflowRequest provides a mock function with given fields: req
func (_m *Database) UpdateWorkflowRequest(req *db.WfRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkflowRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.WfRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateWorkflowRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflowRequest'
type Database_UpdateWorkflowRequest_Call struct {
	*mock.Call
}

// UpdateWorkflowRequest is a helper method to define mock.On call
//   - req *db.WfRequest
func (_e *Database_Expecter) UpdateWorkflowRequest(req interface{}) *Database_UpdateWorkflowRequest_Call {
	return &Database_UpdateWorkflowRequest_Call{Call: _e.mock.On("UpdateWorkflowRequest", req)}
}

func (_c *Database_UpdateWorkflowRequest_Call) Run(run func(req *db.WfRequest)) *Database_UpdateWorkflowRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.WfRequest))
	})
	return _c
}

func (_c *Database_UpdateWorkflowRequest_Call) Return(_a0 error) *Database_UpdateWorkflowRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateWorkflowRequest_Call) RunAndReturn(run func(*db.WfRequest) error) *Database_UpdateWorkflowRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkflowRequestStatusAndResponse provides a mock function with given fields: requestID, status, responseData
func (_m *Database) UpdateWorkflowRequestStatusAndResponse(requestID string, status db.WfRequestStatus, responseData db.PropertyMap) error {
	ret := _m.Called(requestID, status, responseData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkflowRequestStatusAndResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, db.WfRequestStatus, db.PropertyMap) error); ok {
		r0 = rf(requestID, status, responseData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateWorkflowRequestStatusAndResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflowRequestStatusAndResponse'
type Database_UpdateWorkflowRequestStatusAndResponse_Call struct {
	*mock.Call
}

// UpdateWorkflowRequestStatusAndResponse is a helper method to define mock.On call
//   - requestID string
//   - status db.WfRequestStatus
//   - responseData db.PropertyMap
func (_e *Database_Expecter) UpdateWorkflowRequestStatusAndResponse(requestID interface{}, status interface{}, responseData interface{}) *Database_UpdateWorkflowRequestStatusAndResponse_Call {
	return &Database_UpdateWorkflowRequestStatusAndResponse_Call{Call: _e.mock.On("UpdateWorkflowRequestStatusAndResponse", requestID, status, responseData)}
}

func (_c *Database_UpdateWorkflowRequestStatusAndResponse_Call) Run(run func(requestID string, status db.WfRequestStatus, responseData db.PropertyMap)) *Database_UpdateWorkflowRequestStatusAndResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(db.WfRequestStatus), args[2].(db.PropertyMap))
	})
	return _c
}

func (_c *Database_UpdateWorkflowRequestStatusAndResponse_Call) Return(_a0 error) *Database_UpdateWorkflowRequestStatusAndResponse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateWorkflowRequestStatusAndResponse_Call) RunAndReturn(run func(string, db.WfRequestStatus, db.PropertyMap) error) *Database_UpdateWorkflowRequestStatusAndResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkspaceBudget provides a mock function with given fields: budget
func (_m *Database) UpdateWorkspaceBudget(budget db.NewBountyBudget) db.NewBountyBudget {
	ret := _m.Called(budget)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceBudget")
	}

	var r0 db.NewBountyBudget
	if rf, ok := ret.Get(0).(func(db.NewBountyBudget) db.NewBountyBudget); ok {
		r0 = rf(budget)
	} else {
		r0 = ret.Get(0).(db.NewBountyBudget)
	}

	return r0
}

// Database_UpdateWorkspaceBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkspaceBudget'
type Database_UpdateWorkspaceBudget_Call struct {
	*mock.Call
}

// UpdateWorkspaceBudget is a helper method to define mock.On call
//   - budget db.NewBountyBudget
func (_e *Database_Expecter) UpdateWorkspaceBudget(budget interface{}) *Database_UpdateWorkspaceBudget_Call {
	return &Database_UpdateWorkspaceBudget_Call{Call: _e.mock.On("UpdateWorkspaceBudget", budget)}
}

func (_c *Database_UpdateWorkspaceBudget_Call) Run(run func(budget db.NewBountyBudget)) *Database_UpdateWorkspaceBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.NewBountyBudget))
	})
	return _c
}

func (_c *Database_UpdateWorkspaceBudget_Call) Return(_a0 db.NewBountyBudget) *Database_UpdateWorkspaceBudget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateWorkspaceBudget_Call) RunAndReturn(run func(db.NewBountyBudget) db.NewBountyBudget) *Database_UpdateWorkspaceBudget_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkspaceForDeletion provides a mock function with given fields: _a0
func (_m *Database) UpdateWorkspaceForDeletion(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceForDeletion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateWorkspaceForDeletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkspaceForDeletion'
type Database_UpdateWorkspaceForDeletion_Call struct {
	*mock.Call
}

// UpdateWorkspaceForDeletion is a helper method to define mock.On call
//   - _a0 string
func (_e *Database_Expecter) UpdateWorkspaceForDeletion(_a0 interface{}) *Database_UpdateWorkspaceForDeletion_Call {
	return &Database_UpdateWorkspaceForDeletion_Call{Call: _e.mock.On("UpdateWorkspaceForDeletion", _a0)}
}

func (_c *Database_UpdateWorkspaceForDeletion_Call) Run(run func(_a0 string)) *Database_UpdateWorkspaceForDeletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_UpdateWorkspaceForDeletion_Call) Return(_a0 error) *Database_UpdateWorkspaceForDeletion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateWorkspaceForDeletion_Call) RunAndReturn(run func(string) error) *Database_UpdateWorkspaceForDeletion_Call {
	_c.Call.Return(run)
	return _c
}

// UserHasAccess provides a mock function with given fields: pubKeyFromAuth, _a1, role
func (_m *Database) UserHasAccess(pubKeyFromAuth string, _a1 string, role string) bool {
	ret := _m.Called(pubKeyFromAuth, _a1, role)

	if len(ret) == 0 {
		panic("no return value specified for UserHasAccess")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(pubKeyFromAuth, _a1, role)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UserHasAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHasAccess'
type Database_UserHasAccess_Call struct {
	*mock.Call
}

// UserHasAccess is a helper method to define mock.On call
//   - pubKeyFromAuth string
//   - _a1 string
//   - role string
func (_e *Database_Expecter) UserHasAccess(pubKeyFromAuth interface{}, _a1 interface{}, role interface{}) *Database_UserHasAccess_Call {
	return &Database_UserHasAccess_Call{Call: _e.mock.On("UserHasAccess", pubKeyFromAuth, _a1, role)}
}

func (_c *Database_UserHasAccess_Call) Run(run func(pubKeyFromAuth string, _a1 string, role string)) *Database_UserHasAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Database_UserHasAccess_Call) Return(_a0 bool) *Database_UserHasAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UserHasAccess_Call) RunAndReturn(run func(string, string, string) bool) *Database_UserHasAccess_Call {
	_c.Call.Return(run)
	return _c
}

// UserHasManageBountyRoles provides a mock function with given fields: pubKeyFromAuth, _a1
func (_m *Database) UserHasManageBountyRoles(pubKeyFromAuth string, _a1 string) bool {
	ret := _m.Called(pubKeyFromAuth, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UserHasManageBountyRoles")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pubKeyFromAuth, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Database_UserHasManageBountyRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHasManageBountyRoles'
type Database_UserHasManageBountyRoles_Call struct {
	*mock.Call
}

// UserHasManageBountyRoles is a helper method to define mock.On call
//   - pubKeyFromAuth string
//   - _a1 string
func (_e *Database_Expecter) UserHasManageBountyRoles(pubKeyFromAuth interface{}, _a1 interface{}) *Database_UserHasManageBountyRoles_Call {
	return &Database_UserHasManageBountyRoles_Call{Call: _e.mock.On("UserHasManageBountyRoles", pubKeyFromAuth, _a1)}
}

func (_c *Database_UserHasManageBountyRoles_Call) Run(run func(pubKeyFromAuth string, _a1 string)) *Database_UserHasManageBountyRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Database_UserHasManageBountyRoles_Call) Return(_a0 bool) *Database_UserHasManageBountyRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UserHasManageBountyRoles_Call) RunAndReturn(run func(string, string) bool) *Database_UserHasManageBountyRoles_Call {
	_c.Call.Return(run)
	return _c
}

// WithdrawBudget provides a mock function with given fields: sender_pubkey, workspace_uuid, amount
func (_m *Database) WithdrawBudget(sender_pubkey string, workspace_uuid string, amount uint) {
	_m.Called(sender_pubkey, workspace_uuid, amount)
}

// Database_WithdrawBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawBudget'
type Database_WithdrawBudget_Call struct {
	*mock.Call
}

// WithdrawBudget is a helper method to define mock.On call
//   - sender_pubkey string
//   - workspace_uuid string
//   - amount uint
func (_e *Database_Expecter) WithdrawBudget(sender_pubkey interface{}, workspace_uuid interface{}, amount interface{}) *Database_WithdrawBudget_Call {
	return &Database_WithdrawBudget_Call{Call: _e.mock.On("WithdrawBudget", sender_pubkey, workspace_uuid, amount)}
}

func (_c *Database_WithdrawBudget_Call) Run(run func(sender_pubkey string, workspace_uuid string, amount uint)) *Database_WithdrawBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(uint))
	})
	return _c
}

func (_c *Database_WithdrawBudget_Call) Return() *Database_WithdrawBudget_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_WithdrawBudget_Call) RunAndReturn(run func(string, string, uint)) *Database_WithdrawBudget_Call {
	_c.Run(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
